{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/performance/MetricsBuffer.ts"],"sourcesContent":["import { PerformanceMetric, TimeRange } from './types';\n\nexport class MetricsBuffer {\n  private buffer: PerformanceMetric[] = [];\n  private maxSize: number;\n  private maxAge: number; // in milliseconds\n\n  constructor(maxSize: number = 10000, maxAge: number = 24 * 60 * 60 * 1000) {\n    this.maxSize = maxSize;\n    this.maxAge = maxAge;\n  }\n\n  addMetric(metric: PerformanceMetric): void {\n    // Add new metric\n    this.buffer.push(metric);\n\n    // Clean up old metrics\n    this.cleanup();\n\n    // Trim buffer if it exceeds max size\n    if (this.buffer.length > this.maxSize) {\n      this.buffer = this.buffer.slice(-this.maxSize);\n    }\n  }\n\n  getMetrics(category?: string, timeRange?: TimeRange): PerformanceMetric[] {\n    let filteredMetrics = this.buffer;\n\n    // Filter by category\n    if (category) {\n      filteredMetrics = filteredMetrics.filter(metric => metric.category === category);\n    }\n\n    // Filter by time range\n    if (timeRange) {\n      filteredMetrics = filteredMetrics.filter(metric => \n        metric.timestamp >= timeRange.start && metric.timestamp <= timeRange.end\n      );\n    }\n\n    return filteredMetrics;\n  }\n\n  getMetricsByComponent(componentId: string): PerformanceMetric[] {\n    return this.buffer.filter(metric => metric.id.startsWith(componentId));\n  }\n\n  getLatestMetrics(limit: number = 100): PerformanceMetric[] {\n    return this.buffer.slice(-limit);\n  }\n\n  getMetricsSummary(): {\n    total: number;\n    byCategory: Record<string, number>;\n    byComponent: Record<string, number>;\n  } {\n    const byCategory: Record<string, number> = {};\n    const byComponent: Record<string, number> = {};\n\n    this.buffer.forEach(metric => {\n      // Count by category\n      byCategory[metric.category] = (byCategory[metric.category] || 0) + 1;\n\n      // Count by component (extract component ID from metric ID)\n      const componentId = metric.id.split('_')[0];\n      byComponent[componentId] = (byComponent[componentId] || 0) + 1;\n    });\n\n    return {\n      total: this.buffer.length,\n      byCategory,\n      byComponent\n    };\n  }\n\n  clearMetrics(): void {\n    this.buffer = [];\n  }\n\n  clearOldMetrics(ageThreshold: number = this.maxAge): void {\n    const cutoffTime = Date.now() - ageThreshold;\n    this.buffer = this.buffer.filter(metric => metric.timestamp > cutoffTime);\n  }\n\n  private cleanup(): void {\n    const cutoffTime = Date.now() - this.maxAge;\n    this.buffer = this.buffer.filter(metric => metric.timestamp > cutoffTime);\n  }\n\n  getBufferSize(): number {\n    return this.buffer.length;\n  }\n\n  getBufferCapacity(): number {\n    return this.maxSize;\n  }\n\n  isBufferFull(): boolean {\n    return this.buffer.length >= this.maxSize;\n  }\n}\n"],"names":["MetricsBuffer","constructor","maxSize","maxAge","buffer","addMetric","metric","push","cleanup","length","slice","getMetrics","category","timeRange","filteredMetrics","filter","timestamp","start","end","getMetricsByComponent","componentId","id","startsWith","getLatestMetrics","limit","getMetricsSummary","byCategory","byComponent","forEach","split","total","clearMetrics","clearOldMetrics","ageThreshold","cutoffTime","Date","now","getBufferSize","getBufferCapacity","isBufferFull"],"mappings":";;;;+BAEaA;;;eAAAA;;;AAAN,MAAMA;IAKXC,YAAYC,UAAkB,KAAK,EAAEC,SAAiB,KAAK,KAAK,KAAK,IAAI,CAAE;aAJnEC,SAA8B,EAAE;QAKtC,IAAI,CAACF,OAAO,GAAGA;QACf,IAAI,CAACC,MAAM,GAAGA;IAChB;IAEAE,UAAUC,MAAyB,EAAQ;QACzC,iBAAiB;QACjB,IAAI,CAACF,MAAM,CAACG,IAAI,CAACD;QAEjB,uBAAuB;QACvB,IAAI,CAACE,OAAO;QAEZ,qCAAqC;QACrC,IAAI,IAAI,CAACJ,MAAM,CAACK,MAAM,GAAG,IAAI,CAACP,OAAO,EAAE;YACrC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACM,KAAK,CAAC,CAAC,IAAI,CAACR,OAAO;QAC/C;IACF;IAEAS,WAAWC,QAAiB,EAAEC,SAAqB,EAAuB;QACxE,IAAIC,kBAAkB,IAAI,CAACV,MAAM;QAEjC,qBAAqB;QACrB,IAAIQ,UAAU;YACZE,kBAAkBA,gBAAgBC,MAAM,CAACT,CAAAA,SAAUA,OAAOM,QAAQ,KAAKA;QACzE;QAEA,uBAAuB;QACvB,IAAIC,WAAW;YACbC,kBAAkBA,gBAAgBC,MAAM,CAACT,CAAAA,SACvCA,OAAOU,SAAS,IAAIH,UAAUI,KAAK,IAAIX,OAAOU,SAAS,IAAIH,UAAUK,GAAG;QAE5E;QAEA,OAAOJ;IACT;IAEAK,sBAAsBC,WAAmB,EAAuB;QAC9D,OAAO,IAAI,CAAChB,MAAM,CAACW,MAAM,CAACT,CAAAA,SAAUA,OAAOe,EAAE,CAACC,UAAU,CAACF;IAC3D;IAEAG,iBAAiBC,QAAgB,GAAG,EAAuB;QACzD,OAAO,IAAI,CAACpB,MAAM,CAACM,KAAK,CAAC,CAACc;IAC5B;IAEAC,oBAIE;QACA,MAAMC,aAAqC,CAAC;QAC5C,MAAMC,cAAsC,CAAC;QAE7C,IAAI,CAACvB,MAAM,CAACwB,OAAO,CAACtB,CAAAA;YAClB,oBAAoB;YACpBoB,UAAU,CAACpB,OAAOM,QAAQ,CAAC,GAAG,AAACc,CAAAA,UAAU,CAACpB,OAAOM,QAAQ,CAAC,IAAI,CAAA,IAAK;YAEnE,2DAA2D;YAC3D,MAAMQ,cAAcd,OAAOe,EAAE,CAACQ,KAAK,CAAC,IAAI,CAAC,EAAE;YAC3CF,WAAW,CAACP,YAAY,GAAG,AAACO,CAAAA,WAAW,CAACP,YAAY,IAAI,CAAA,IAAK;QAC/D;QAEA,OAAO;YACLU,OAAO,IAAI,CAAC1B,MAAM,CAACK,MAAM;YACzBiB;YACAC;QACF;IACF;IAEAI,eAAqB;QACnB,IAAI,CAAC3B,MAAM,GAAG,EAAE;IAClB;IAEA4B,gBAAgBC,eAAuB,IAAI,CAAC9B,MAAM,EAAQ;QACxD,MAAM+B,aAAaC,KAAKC,GAAG,KAAKH;QAChC,IAAI,CAAC7B,MAAM,GAAG,IAAI,CAACA,MAAM,CAACW,MAAM,CAACT,CAAAA,SAAUA,OAAOU,SAAS,GAAGkB;IAChE;IAEQ1B,UAAgB;QACtB,MAAM0B,aAAaC,KAAKC,GAAG,KAAK,IAAI,CAACjC,MAAM;QAC3C,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACW,MAAM,CAACT,CAAAA,SAAUA,OAAOU,SAAS,GAAGkB;IAChE;IAEAG,gBAAwB;QACtB,OAAO,IAAI,CAACjC,MAAM,CAACK,MAAM;IAC3B;IAEA6B,oBAA4B;QAC1B,OAAO,IAAI,CAACpC,OAAO;IACrB;IAEAqC,eAAwB;QACtB,OAAO,IAAI,CAACnC,MAAM,CAACK,MAAM,IAAI,IAAI,CAACP,OAAO;IAC3C;AACF"}