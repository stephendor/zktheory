{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/GroupDatabase.ts"],"sourcesContent":["/**\n * Group Database - Complete implementation of finite groups up to order 20\n * Extended with elliptic curve groups\n */\n\nimport { Group, GroupElement, Permutation } from './GroupTheory';\nimport { EllipticCurveGroup, EllipticCurveParameters } from './EllipticCurveGroup';\n\nexport class GroupDatabase {\n  private static groups: Map<string, Group> = new Map();\n\n  static {\n    this.initializeAllGroups();\n  }\n\n  static getAllGroups(): Group[] {\n    return Array.from(this.groups.values());\n  }\n\n  static getGroup(name: string): Group | undefined {\n    return this.groups.get(name);\n  }\n\n  static getGroupNames(): string[] {\n    return Array.from(this.groups.keys()).sort();\n  }\n\n  static getGroupsByOrder(order: number): Group[] {\n    return Array.from(this.groups.values()).filter(g => g.order === order);\n  }\n\n  private static toSuperscript(num: number): string {\n    const superscriptMap: { [key: string]: string } = {\n      '0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴',\n      '5': '⁵', '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹'\n    };\n    return num.toString().split('').map(digit => superscriptMap[digit] || digit).join('');\n  }\n\n  private static initializeAllGroups() {\n    // Order 1\n    this.groups.set('C1', this.createTrivialGroup());\n\n    // Order 2\n    this.groups.set('C2', this.createCyclicGroup(2));\n\n    // Order 3\n    this.groups.set('C3', this.createCyclicGroup(3));\n\n    // Order 4\n    this.groups.set('C4', this.createCyclicGroup(4));\n    this.groups.set('V4', this.createKleinFourGroup());\n\n    // Order 5\n    this.groups.set('C5', this.createCyclicGroup(5));\n\n    // Order 6\n    this.groups.set('C6', this.createCyclicGroup(6));\n    this.groups.set('D3', this.createDihedralGroup(3));\n    this.groups.set('S3', this.createSymmetricGroup3());\n\n    // Order 7\n    this.groups.set('C7', this.createCyclicGroup(7));\n\n    // Order 8\n    this.groups.set('C8', this.createCyclicGroup(8));\n    this.groups.set('D4', this.createDihedralGroup(4));\n    this.groups.set('Q8', this.createQuaternionGroup());\n    this.groups.set('C2xC4', this.createDirectProduct(2, 4));\n    this.groups.set('C2xC2xC2', this.createElementaryAbelianGroup(8));\n\n    // Order 9\n    this.groups.set('C9', this.createCyclicGroup(9));\n    this.groups.set('C3xC3', this.createDirectProduct(3, 3));\n\n    // Order 10\n    this.groups.set('C10', this.createCyclicGroup(10));\n    this.groups.set('D5', this.createDihedralGroup(5));\n\n    // Order 11\n    this.groups.set('C11', this.createCyclicGroup(11));\n\n    // Order 12\n    this.groups.set('C12', this.createCyclicGroup(12));\n    this.groups.set('D6', this.createDihedralGroup(6));\n    this.groups.set('A4', this.createAlternatingGroup4());\n    this.groups.set('C2xC6', this.createDirectProduct(2, 6));\n\n    // Order 13\n    this.groups.set('C13', this.createCyclicGroup(13));\n\n    // Order 14\n    this.groups.set('C14', this.createCyclicGroup(14));\n    this.groups.set('D7', this.createDihedralGroup(7));\n\n    // Order 15\n    this.groups.set('C15', this.createCyclicGroup(15));\n\n    // Order 16\n    this.groups.set('C16', this.createCyclicGroup(16));\n    this.groups.set('D8', this.createDihedralGroup(8));\n    this.groups.set('C2xC8', this.createDirectProduct(2, 8));\n    this.groups.set('C4xC4', this.createDirectProduct(4, 4));\n    this.groups.set('C2xC2xC4', this.createDirectProduct2x2x4());\n\n    // Order 17\n    this.groups.set('C17', this.createCyclicGroup(17));\n\n    // Order 18\n    this.groups.set('C18', this.createCyclicGroup(18));\n    this.groups.set('D9', this.createDihedralGroup(9));\n    this.groups.set('C3xC6', this.createDirectProduct(3, 6));\n\n    // Order 19\n    this.groups.set('C19', this.createCyclicGroup(19));\n\n    // Order 20\n    this.groups.set('C20', this.createCyclicGroup(20));\n    this.groups.set('D10', this.createDihedralGroup(10));\n    this.groups.set('C4xC5', this.createDirectProduct(4, 5));\n    this.groups.set('C2xC10', this.createDirectProduct(2, 10));\n    \n    // Add elliptic curve groups\n    this.initializeEllipticCurveGroups();\n  }\n\n  private static createTrivialGroup(): Group {\n    return {\n      name: 'C1',\n      displayName: 'Trivial Group',\n      order: 1,\n      elements: [{ id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 }],\n      operations: new Map([['e', new Map([['e', 'e']])]]),\n      generators: [],\n      relations: [],\n      isAbelian: true,\n      center: ['e'],\n      conjugacyClasses: [['e']],\n      subgroups: [{ elements: ['e'], name: 'Trivial', isNormal: true }]\n    };\n  }\n\n  private static createCyclicGroup(n: number): Group {\n    const elements: GroupElement[] = [];\n    const operations = new Map<string, Map<string, string>>();\n\n    // Create elements\n    for (let i = 0; i < n; i++) {\n      elements.push({\n        id: `g${i}`,\n        label: i === 0 ? 'e' : (i === 1 ? 'g' : `g${this.toSuperscript(i)}`),\n        order: n / this.gcd(i, n),\n        inverse: `g${(n - i) % n}`,\n        conjugacyClass: 0 // All elements in their own class for abelian groups\n      });\n    }\n\n    // Create multiplication table\n    for (let i = 0; i < n; i++) {\n      const rowMap = new Map<string, string>();\n      for (let j = 0; j < n; j++) {\n        rowMap.set(`g${j}`, `g${(i + j) % n}`);\n      }\n      operations.set(`g${i}`, rowMap);\n    }\n\n    // Find subgroups\n    const subgroups = this.findCyclicSubgroups(n);\n    \n    // Find all possible generators (elements that generate the full group)\n    const allGenerators: string[] = [];\n    for (let i = 1; i < n; i++) {\n      if (this.gcd(i, n) === 1) { // φ(n) - Euler's totient function\n        allGenerators.push(`g${i}`);\n      }\n    }\n\n    return {\n      name: `C${n}`,\n      displayName: `Cyclic Group C₍${n}₎`,\n      order: n,\n      elements,\n      operations,\n      generators: n > 1 ? (allGenerators.length > 0 ? allGenerators : ['g1']) : [],\n      relations: n > 1 ? [`g^${n} = e`] : [],\n      isAbelian: true,\n      center: elements.map(e => e.id),\n      conjugacyClasses: elements.map(e => [e.id]),\n      subgroups\n    };\n  }\n\n  private static createDihedralGroup(n: number): Group {\n    const elements: GroupElement[] = [];\n    const operations = new Map<string, Map<string, string>>();\n\n    // Rotations\n    for (let i = 0; i < n; i++) {\n      elements.push({\n        id: `r${i}`,\n        label: i === 0 ? 'e' : `r${this.toSuperscript(i)}`,\n        order: n / this.gcd(i, n),\n        inverse: `r${(n - i) % n}`,\n        conjugacyClass: this.getRotationConjugacyClass(i, n)\n      });\n    }\n\n    // Reflections\n    for (let i = 0; i < n; i++) {\n      elements.push({\n        id: `s${i}`,\n        label: i === 0 ? 's' : `sr${this.toSuperscript(i)}`,\n        order: 2,\n        inverse: `s${i}`,\n        conjugacyClass: this.getReflectionConjugacyClass(i, n)\n      });\n    }\n\n    // Create multiplication table\n    this.createDihedralMultiplicationTable(operations, n);\n\n    return {\n      name: `D${n}`,\n      displayName: `Dihedral Group D₍${n}₎`,\n      order: 2 * n,\n      elements,\n      operations,\n      generators: ['r1', 's0'],\n      relations: [`r^${n} = e`, 's^2 = e', `srs^(-1) = r^(-1)`],\n      isAbelian: n <= 2,\n      center: this.getDihedralCenter(n),\n      conjugacyClasses: this.getDihedralConjugacyClasses(n),\n      subgroups: this.getDihedralSubgroups(n)\n    };\n  }\n\n  private static createSymmetricGroup3(): Group {\n    const elements: GroupElement[] = [\n      { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n      { id: 'a', label: '(1 2)', order: 2, inverse: 'a', conjugacyClass: 1 },\n      { id: 'b', label: '(1 3)', order: 2, inverse: 'b', conjugacyClass: 1 },\n      { id: 'c', label: '(2 3)', order: 2, inverse: 'c', conjugacyClass: 1 },\n      { id: 'd', label: '(1 2 3)', order: 3, inverse: 'f', conjugacyClass: 2 },\n      { id: 'f', label: '(1 3 2)', order: 3, inverse: 'd', conjugacyClass: 2 }\n    ];\n\n    const operations = new Map<string, Map<string, string>>();\n    \n    // S3 multiplication table\n    const table = {\n      'e': { 'e': 'e', 'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'f': 'f' },\n      'a': { 'e': 'a', 'a': 'e', 'b': 'd', 'c': 'f', 'd': 'b', 'f': 'c' },\n      'b': { 'e': 'b', 'a': 'f', 'b': 'e', 'c': 'd', 'd': 'c', 'f': 'a' },\n      'c': { 'e': 'c', 'a': 'd', 'b': 'f', 'c': 'e', 'd': 'a', 'f': 'b' },\n      'd': { 'e': 'd', 'a': 'c', 'b': 'a', 'c': 'b', 'd': 'f', 'f': 'e' },\n      'f': { 'e': 'f', 'a': 'b', 'b': 'c', 'c': 'a', 'd': 'e', 'f': 'd' }\n    };\n\n    for (const [elem1, row] of Object.entries(table)) {\n      const rowMap = new Map<string, string>();\n      for (const [elem2, result] of Object.entries(row)) {\n        rowMap.set(elem2, result);\n      }\n      operations.set(elem1, rowMap);\n    }\n\n    return {\n      name: 'S3',\n      displayName: 'Symmetric Group S₃',\n      order: 6,\n      elements,\n      operations,\n      generators: ['a', 'b', 'c', 'd'], // Multiple generators: all transpositions and a 3-cycle\n      relations: ['a^2 = e', 'b^2 = e', 'c^2 = e', 'd^3 = e', '(ab)^3 = e', '(ac)^3 = e', '(bc)^3 = e'],\n      isAbelian: false,\n      center: ['e'],\n      conjugacyClasses: [['e'], ['a', 'b', 'c'], ['d', 'f']],\n      subgroups: [\n        { elements: ['e'], name: 'Trivial', isNormal: true },\n        { elements: ['e', 'a'], name: '⟨a⟩', isNormal: false },\n        { elements: ['e', 'b'], name: '⟨b⟩', isNormal: false },\n        { elements: ['e', 'c'], name: '⟨c⟩', isNormal: false },\n        { elements: ['e', 'd', 'f'], name: '⟨d⟩', isNormal: true },\n        { elements: ['e', 'a', 'b', 'c', 'd', 'f'], name: 'S₃', isNormal: true }\n      ]\n    };\n  }\n\n  private static createKleinFourGroup(): Group {\n    const elements: GroupElement[] = [\n      { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n      { id: 'a', label: 'a', order: 2, inverse: 'a', conjugacyClass: 1 },\n      { id: 'b', label: 'b', order: 2, inverse: 'b', conjugacyClass: 2 },\n      { id: 'c', label: 'c', order: 2, inverse: 'c', conjugacyClass: 3 }\n    ];\n\n    const operations = new Map<string, Map<string, string>>();\n    const table = {\n      'e': { 'e': 'e', 'a': 'a', 'b': 'b', 'c': 'c' },\n      'a': { 'e': 'a', 'a': 'e', 'b': 'c', 'c': 'b' },\n      'b': { 'e': 'b', 'a': 'c', 'b': 'e', 'c': 'a' },\n      'c': { 'e': 'c', 'a': 'b', 'b': 'a', 'c': 'e' }\n    };\n\n    for (const [elem1, row] of Object.entries(table)) {\n      const rowMap = new Map<string, string>();\n      for (const [elem2, result] of Object.entries(row)) {\n        rowMap.set(elem2, result);\n      }\n      operations.set(elem1, rowMap);\n    }\n\n    return {\n      name: 'V4',\n      displayName: 'Klein Four Group V₄',\n      order: 4,\n      elements,\n      operations,\n      generators: ['a', 'b', 'c'], // All three non-identity elements are generators\n      relations: ['a^2 = e', 'b^2 = e', 'c^2 = e', 'ab = c', 'ac = b', 'bc = a'],\n      isAbelian: true,\n      center: ['e', 'a', 'b', 'c'],\n      conjugacyClasses: [['e'], ['a'], ['b'], ['c']],\n      subgroups: [\n        { elements: ['e'], name: 'Trivial', isNormal: true },\n        { elements: ['e', 'a'], name: '⟨a⟩', isNormal: true },\n        { elements: ['e', 'b'], name: '⟨b⟩', isNormal: true },\n        { elements: ['e', 'c'], name: '⟨c⟩', isNormal: true },\n        { elements: ['e', 'a', 'b', 'c'], name: 'V₄', isNormal: true }\n      ]\n    };\n  }\n\n  private static createQuaternionGroup(): Group {\n    const elements: GroupElement[] = [\n      { id: '1', label: '1', order: 1, inverse: '1', conjugacyClass: 0 },\n      { id: '-1', label: '-1', order: 2, inverse: '-1', conjugacyClass: 1 },\n      { id: 'i', label: 'i', order: 4, inverse: '-i', conjugacyClass: 2 },\n      { id: '-i', label: '-i', order: 4, inverse: 'i', conjugacyClass: 2 },\n      { id: 'j', label: 'j', order: 4, inverse: '-j', conjugacyClass: 3 },\n      { id: '-j', label: '-j', order: 4, inverse: 'j', conjugacyClass: 3 },\n      { id: 'k', label: 'k', order: 4, inverse: '-k', conjugacyClass: 4 },\n      { id: '-k', label: '-k', order: 4, inverse: 'k', conjugacyClass: 4 }\n    ];\n\n    const operations = new Map<string, Map<string, string>>();\n    const table = {\n      '1': { '1': '1', '-1': '-1', 'i': 'i', '-i': '-i', 'j': 'j', '-j': '-j', 'k': 'k', '-k': '-k' },\n      '-1': { '1': '-1', '-1': '1', 'i': '-i', '-i': 'i', 'j': '-j', '-j': 'j', 'k': '-k', '-k': 'k' },\n      'i': { '1': 'i', '-1': '-i', 'i': '-1', '-i': '1', 'j': 'k', '-j': '-k', 'k': '-j', '-k': 'j' },\n      '-i': { '1': '-i', '-1': 'i', 'i': '1', '-i': '-1', 'j': '-k', '-j': 'k', 'k': 'j', '-k': '-j' },\n      'j': { '1': 'j', '-1': '-j', 'i': '-k', '-i': 'k', 'j': '-1', '-j': '1', 'k': 'i', '-k': '-i' },\n      '-j': { '1': '-j', '-1': 'j', 'i': 'k', '-i': '-k', 'j': '1', '-j': '-1', 'k': '-i', '-k': 'i' },\n      'k': { '1': 'k', '-1': '-k', 'i': 'j', '-i': '-j', 'j': '-i', '-j': 'i', 'k': '-1', '-k': '1' },\n      '-k': { '1': '-k', '-1': 'k', 'i': '-j', '-i': 'j', 'j': 'i', '-j': '-i', 'k': '1', '-k': '-1' }\n    };\n\n    for (const [elem1, row] of Object.entries(table)) {\n      const rowMap = new Map<string, string>();\n      for (const [elem2, result] of Object.entries(row)) {\n        rowMap.set(elem2, result);\n      }\n      operations.set(elem1, rowMap);\n    }\n\n    return {\n      name: 'Q8',\n      displayName: 'Quaternion Group Q₈',\n      order: 8,\n      elements,\n      operations,\n      generators: ['i', 'j', 'k'], // Multiple generators available\n      relations: ['i^4 = 1', 'j^4 = 1', 'k^4 = 1', 'i^2 = j^2 = k^2 = ijk = -1'],\n      isAbelian: false,\n      center: ['1', '-1'],\n      conjugacyClasses: [['1'], ['-1'], ['i', '-i'], ['j', '-j'], ['k', '-k']],\n      subgroups: [\n        { elements: ['1'], name: 'Trivial', isNormal: true },\n        { elements: ['1', '-1'], name: '⟨-1⟩', isNormal: true },\n        { elements: ['1', '-1', 'i', '-i'], name: '⟨i⟩', isNormal: true },\n        { elements: ['1', '-1', 'j', '-j'], name: '⟨j⟩', isNormal: true },\n        { elements: ['1', '-1', 'k', '-k'], name: '⟨k⟩', isNormal: true }\n      ]\n    };\n  }\n\n  private static createAlternatingGroup4(): Group {\n    // A4 - proper implementation using permutation composition\n    const elements: GroupElement[] = [\n      { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n      // 3-cycles - 8 elements\n      { id: '123', label: '(1 2 3)', order: 3, inverse: '132', conjugacyClass: 1 },\n      { id: '132', label: '(1 3 2)', order: 3, inverse: '123', conjugacyClass: 1 },\n      { id: '124', label: '(1 2 4)', order: 3, inverse: '142', conjugacyClass: 1 },\n      { id: '142', label: '(1 4 2)', order: 3, inverse: '124', conjugacyClass: 1 },\n      { id: '134', label: '(1 3 4)', order: 3, inverse: '143', conjugacyClass: 1 },\n      { id: '143', label: '(1 4 3)', order: 3, inverse: '134', conjugacyClass: 1 },\n      { id: '234', label: '(2 3 4)', order: 3, inverse: '243', conjugacyClass: 1 },\n      { id: '243', label: '(2 4 3)', order: 3, inverse: '234', conjugacyClass: 1 },\n      // Double transpositions - 3 elements  \n      { id: '12)(34', label: '(1 2)(3 4)', order: 2, inverse: '12)(34', conjugacyClass: 2 },\n      { id: '13)(24', label: '(1 3)(2 4)', order: 2, inverse: '13)(24', conjugacyClass: 2 },\n      { id: '14)(23', label: '(1 4)(2 3)', order: 2, inverse: '14)(23', conjugacyClass: 2 }\n    ];\n\n    // Generate multiplication table using proper permutation composition\n    const operations = new Map<string, Map<string, string>>();\n    \n    // Define permutations as arrays [p(1), p(2), p(3), p(4)]\n    const permutations: { [key: string]: number[] } = {\n      'e': [1, 2, 3, 4],\n      '123': [2, 3, 1, 4],     // (1 2 3): 1->2, 2->3, 3->1, 4->4\n      '132': [3, 1, 2, 4],     // (1 3 2): 1->3, 2->1, 3->2, 4->4\n      '124': [2, 4, 3, 1],     // (1 2 4): 1->2, 2->4, 3->3, 4->1\n      '142': [4, 1, 3, 2],     // (1 4 2): 1->4, 2->1, 3->3, 4->2\n      '134': [3, 2, 4, 1],     // (1 3 4): 1->3, 2->2, 3->4, 4->1\n      '143': [4, 2, 1, 3],     // (1 4 3): 1->4, 2->2, 3->1, 4->3\n      '234': [1, 3, 4, 2],     // (2 3 4): 1->1, 2->3, 3->4, 4->2\n      '243': [1, 4, 2, 3],     // (2 4 3): 1->1, 2->4, 3->2, 4->3\n      '12)(34': [2, 1, 4, 3],  // (1 2)(3 4): 1->2, 2->1, 3->4, 4->3\n      '13)(24': [3, 4, 1, 2],  // (1 3)(2 4): 1->3, 2->4, 3->1, 4->2\n      '14)(23': [4, 3, 2, 1]   // (1 4)(2 3): 1->4, 2->3, 3->2, 4->1\n    };\n\n    // Function to compose two permutations\n    const compose = (p1: number[], p2: number[]): number[] => {\n      return [p1[p2[0] - 1], p1[p2[1] - 1], p1[p2[2] - 1], p1[p2[3] - 1]];\n    };\n\n    // Function to find permutation by result array\n    const findPermutation = (result: number[]): string => {\n      for (const [key, perm] of Object.entries(permutations)) {\n        if (perm.every((val, idx) => val === result[idx])) {\n          return key;\n        }\n      }\n      return 'e';\n    };\n\n    // Build multiplication table\n    elements.forEach(elem1 => {\n      const row = new Map<string, string>();\n      elements.forEach(elem2 => {\n        const result = compose(permutations[elem1.id], permutations[elem2.id]);\n        const resultId = findPermutation(result);\n        row.set(elem2.id, resultId);\n      });\n      operations.set(elem1.id, row);\n    });\n\n    return {\n      name: 'A4',\n      displayName: 'Alternating Group A₄',\n      order: 12,\n      elements,\n      operations,\n      generators: ['123', '124'], // (1 2 3) and (1 2 4) generate A4\n      relations: ['(123)^3 = e', '(124)^3 = e'],\n      isAbelian: false,\n      center: ['e'],\n      conjugacyClasses: [['e'], ['123', '132', '124', '142', '134', '143', '234', '243'], ['12)(34', '13)(24', '14)(23']],\n      subgroups: []\n    };\n  }\n\n  private static createDirectProduct(n1: number, n2: number): Group {\n    // Create C_n1 × C_n2\n    const order = n1 * n2;\n    const elements: GroupElement[] = [];\n    const operations = new Map<string, Map<string, string>>();\n\n    // Create elements\n    for (let i = 0; i < n1; i++) {\n      for (let j = 0; j < n2; j++) {\n        elements.push({\n          id: `(${i},${j})`,\n          label: `(${i},${j})`,\n          order: this.lcm(n1 / this.gcd(i, n1), n2 / this.gcd(j, n2)),\n          inverse: `(${(n1 - i) % n1},${(n2 - j) % n2})`,\n          conjugacyClass: i * n2 + j\n        });\n      }\n    }\n\n    // Create multiplication table\n    for (let i1 = 0; i1 < n1; i1++) {\n      for (let j1 = 0; j1 < n2; j1++) {\n        const rowMap = new Map<string, string>();\n        for (let i2 = 0; i2 < n1; i2++) {\n          for (let j2 = 0; j2 < n2; j2++) {\n            rowMap.set(`(${i2},${j2})`, `(${(i1 + i2) % n1},${(j1 + j2) % n2})`);\n          }\n        }\n        operations.set(`(${i1},${j1})`, rowMap);\n      }\n    }\n\n    return {\n      name: `C${n1}xC${n2}`,\n      displayName: `C₍${n1}₎ × C₍${n2}₎`,\n      order,\n      elements,\n      operations,\n      generators: ['(1,0)', '(0,1)'],\n      relations: [`a^${n1} = e`, `b^${n2} = e`, 'ab = ba'],\n      isAbelian: true,\n      center: elements.map(e => e.id),\n      conjugacyClasses: elements.map(e => [e.id]),\n      subgroups: []\n    };\n  }\n\n  private static createElementaryAbelianGroup(order: number): Group {\n    // Create (Z/2Z)^n where 2^n = order\n    const n = Math.log2(order);\n    const elements: GroupElement[] = [];\n    const operations = new Map<string, Map<string, string>>();\n\n    // Generate all binary strings of length n\n    for (let i = 0; i < order; i++) {\n      const binary = i.toString(2).padStart(n, '0');\n      elements.push({\n        id: binary,\n        label: binary === '0'.repeat(n) ? 'e' : binary,\n        order: binary === '0'.repeat(n) ? 1 : 2,\n        inverse: binary,\n        conjugacyClass: i\n      });\n    }\n\n    // XOR operation\n    for (let i = 0; i < order; i++) {\n      const rowMap = new Map<string, string>();\n      const binary1 = i.toString(2).padStart(n, '0');\n      for (let j = 0; j < order; j++) {\n        const binary2 = j.toString(2).padStart(n, '0');\n        const result = (i ^ j).toString(2).padStart(n, '0');\n        rowMap.set(binary2, result);\n      }\n      operations.set(binary1, rowMap);\n    }\n\n    return {\n      name: `(C2)^${n}`,\n      displayName: `Elementary Abelian Group (C₂)^${n}`,\n      order,\n      elements,\n      operations,\n      generators: Array.from({ length: n }, (_, i) => {\n        const gen = '0'.repeat(i) + '1' + '0'.repeat(n - i - 1);\n        return gen;\n      }),\n      relations: Array.from({ length: n }, (_, i) => `g${i}^2 = e`),\n      isAbelian: true,\n      center: elements.map(e => e.id),\n      conjugacyClasses: elements.map(e => [e.id]),\n      subgroups: []\n    };\n  }\n\n  private static createDirectProduct2x2x4(): Group {\n    // Create C2 × C2 × C4\n    const elements: GroupElement[] = [];\n    const operations = new Map<string, Map<string, string>>();\n\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 2; j++) {\n        for (let k = 0; k < 4; k++) {\n          elements.push({\n            id: `(${i},${j},${k})`,\n            label: `(${i},${j},${k})`,\n            order: this.lcm(this.lcm(i === 0 ? 1 : 2, j === 0 ? 1 : 2), k === 0 ? 1 : 4 / this.gcd(k, 4)),\n            inverse: `(${i},${j},${(4 - k) % 4})`,\n            conjugacyClass: i * 8 + j * 4 + k\n          });\n        }\n      }\n    }\n\n    // Create multiplication table\n    for (let i1 = 0; i1 < 2; i1++) {\n      for (let j1 = 0; j1 < 2; j1++) {\n        for (let k1 = 0; k1 < 4; k1++) {\n          const rowMap = new Map<string, string>();\n          for (let i2 = 0; i2 < 2; i2++) {\n            for (let j2 = 0; j2 < 2; j2++) {\n              for (let k2 = 0; k2 < 4; k2++) {\n                rowMap.set(`(${i2},${j2},${k2})`, `(${(i1 + i2) % 2},${(j1 + j2) % 2},${(k1 + k2) % 4})`);\n              }\n            }\n          }\n          operations.set(`(${i1},${j1},${k1})`, rowMap);\n        }\n      }\n    }\n\n    return {\n      name: 'C2xC2xC4',\n      displayName: 'C₂ × C₂ × C₄',\n      order: 16,\n      elements,\n      operations,\n      generators: ['(1,0,0)', '(0,1,0)', '(0,0,1)'],\n      relations: ['a^2 = e', 'b^2 = e', 'c^4 = e', 'ab = ba', 'ac = ca', 'bc = cb'],\n      isAbelian: true,\n      center: elements.map(e => e.id),\n      conjugacyClasses: elements.map(e => [e.id]),\n      subgroups: []\n    };\n  }\n\n  // Helper methods\n  private static gcd(a: number, b: number): number {\n    return b === 0 ? a : this.gcd(b, a % b);\n  }\n\n  private static lcm(a: number, b: number): number {\n    return (a * b) / this.gcd(a, b);\n  }\n\n  private static findCyclicSubgroups(n: number): { elements: string[]; name: string; isNormal: boolean }[] {\n    const subgroups: { elements: string[]; name: string; isNormal: boolean }[] = [];\n    \n    for (let d = 1; d <= n; d++) {\n      if (n % d === 0) {\n        const elements: string[] = [];\n        const step = n / d;\n        for (let i = 0; i < d; i++) {\n          elements.push(`g${(i * step) % n}`);\n        }\n        subgroups.push({\n          elements,\n          name: d === 1 ? 'Trivial' : d === n ? `C${n}` : `⟨g^${step}⟩`,\n          isNormal: true\n        });\n      }\n    }\n    \n    return subgroups;\n  }\n\n  private static createDihedralMultiplicationTable(operations: Map<string, Map<string, string>>, n: number) {\n    // r^i * r^j = r^(i+j mod n)\n    // r^i * s^j = s^(j-i mod n)\n    // s^i * r^j = s^(i+j mod n)\n    // s^i * s^j = r^(j-i mod n)\n    \n    for (let i = 0; i < n; i++) {\n      const rotRowMap = new Map<string, string>();\n      for (let j = 0; j < n; j++) {\n        // r^i * r^j\n        rotRowMap.set(`r${j}`, `r${(i + j) % n}`);\n        // r^i * s^j\n        rotRowMap.set(`s${j}`, `s${(j - i + n) % n}`);\n      }\n      operations.set(`r${i}`, rotRowMap);\n    }\n\n    for (let i = 0; i < n; i++) {\n      const refRowMap = new Map<string, string>();\n      for (let j = 0; j < n; j++) {\n        // s^i * r^j\n        refRowMap.set(`r${j}`, `s${(i + j) % n}`);\n        // s^i * s^j\n        refRowMap.set(`s${j}`, `r${(j - i + n) % n}`);\n      }\n      operations.set(`s${i}`, refRowMap);\n    }\n  }\n\n  private static getRotationConjugacyClass(i: number, n: number): number {\n    if (i === 0) return 0;\n    if (n % 2 === 0 && i === n / 2) return 1;\n    return 2;\n  }\n\n  private static getReflectionConjugacyClass(i: number, n: number): number {\n    return n % 2 === 0 ? (i % 2 === 0 ? 3 : 4) : 3;\n  }\n\n  private static getDihedralCenter(n: number): string[] {\n    return n % 2 === 0 ? ['r0', `r${n/2}`] : ['r0'];\n  }\n\n  private static getDihedralConjugacyClasses(n: number): string[][] {\n    const classes: string[][] = [['r0']];\n    \n    if (n % 2 === 0) {\n      classes.push([`r${n/2}`]);\n      \n      // Other rotations\n      const otherRots: string[] = [];\n      for (let i = 1; i < n; i++) {\n        if (i !== n/2) otherRots.push(`r${i}`);\n      }\n      if (otherRots.length > 0) classes.push(otherRots);\n      \n      // Reflections through vertices\n      const vertexRefs: string[] = [];\n      for (let i = 0; i < n; i += 2) {\n        vertexRefs.push(`s${i}`);\n      }\n      classes.push(vertexRefs);\n      \n      // Reflections through edge midpoints\n      const edgeRefs: string[] = [];\n      for (let i = 1; i < n; i += 2) {\n        edgeRefs.push(`s${i}`);\n      }\n      classes.push(edgeRefs);\n    } else {\n      // Other rotations\n      const otherRots: string[] = [];\n      for (let i = 1; i < n; i++) {\n        otherRots.push(`r${i}`);\n      }\n      if (otherRots.length > 0) classes.push(otherRots);\n      \n      // All reflections\n      const allRefs: string[] = [];\n      for (let i = 0; i < n; i++) {\n        allRefs.push(`s${i}`);\n      }\n      classes.push(allRefs);\n    }\n    \n    return classes;\n  }\n\n  private static getDihedralSubgroups(n: number): { elements: string[]; name: string; isNormal: boolean }[] {\n    const subgroups = [\n      { elements: ['r0'], name: 'Trivial', isNormal: true }\n    ];\n    \n    // Cyclic subgroup of rotations\n    const rotations: string[] = [];\n    for (let i = 0; i < n; i++) {\n      rotations.push(`r${i}`);\n    }\n    subgroups.push({ elements: rotations, name: `⟨r⟩ ≅ C${n}`, isNormal: true });\n    \n    // Reflection subgroups\n    for (let i = 0; i < n; i++) {\n      subgroups.push({ \n        elements: ['r0', `s${i}`], \n        name: `⟨s${i}⟩ ≅ C₂`, \n        isNormal: false \n      });\n    }\n    \n    // Find subgroups corresponding to divisors of n\n    for (let d = 2; d < n; d++) {\n      if (n % d === 0) {\n        const rotSubgroup: string[] = [];\n        const step = n / d;\n        for (let i = 0; i < d; i++) {\n          rotSubgroup.push(`r${(i * step) % n}`);\n        }\n        subgroups.push({\n          elements: rotSubgroup,\n          name: `⟨r^${step}⟩ ≅ C${d}`,\n          isNormal: true\n        });\n        \n        // Corresponding dihedral subgroup\n        const dihedralSubgroup = [...rotSubgroup];\n        for (let i = 0; i < d; i++) {\n          dihedralSubgroup.push(`s${(i * step) % n}`);\n        }\n        subgroups.push({\n          elements: dihedralSubgroup,\n          name: `D${d}`,\n          isNormal: d === 2 || n / d === 2\n        });\n      }\n    }\n    \n    // Full group\n    const allElements: string[] = [];\n    for (let i = 0; i < n; i++) {\n      allElements.push(`r${i}`, `s${i}`);\n    }\n    subgroups.push({ elements: allElements, name: `D${n}`, isNormal: true });\n    \n    return subgroups;\n  }\n\n  /**\n   * Initialize elliptic curve groups for educational purposes\n   */\n  private static initializeEllipticCurveGroups() {\n    const examples = EllipticCurveGroup.createExampleCurves();\n    \n    for (const [name, params] of Object.entries(examples)) {\n      try {\n        const ecGroup = new EllipticCurveGroup(params);\n        const group = ecGroup.getGroup();\n        \n        // Add EC prefix to distinguish from other groups\n        const groupName = `EC_${name}`;\n        this.groups.set(groupName, {\n          ...group,\n          name: groupName,\n          displayName: `Elliptic Curve ${name}: ${ecGroup.getCurve().getEquationLatex()}`\n        });\n        \n        console.log(`✅ Added elliptic curve group ${groupName} with ${group.order} elements`);\n      } catch (error) {\n        console.warn(`⚠️ Failed to create elliptic curve group ${name}:`, error.message);\n      }\n    }\n  }\n\n  /**\n   * Add a custom elliptic curve group to the database\n   */\n  static addEllipticCurveGroup(name: string, params: EllipticCurveParameters): boolean {\n    try {\n      const ecGroup = new EllipticCurveGroup(params);\n      const group = ecGroup.getGroup();\n      \n      const groupName = `EC_${name}`;\n      this.groups.set(groupName, {\n        ...group,\n        name: groupName,\n        displayName: `Elliptic Curve ${name}: ${ecGroup.getCurve().getEquationLatex()}`\n      });\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to add elliptic curve group ${name}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get all elliptic curve groups\n   */\n  static getEllipticCurveGroups(): Group[] {\n    return Array.from(this.groups.values()).filter(g => g.name.startsWith('EC_'));\n  }\n}\n"],"names":["GroupDatabase","groups","Map","initializeAllGroups","getAllGroups","Array","from","values","getGroup","name","get","getGroupNames","keys","sort","getGroupsByOrder","order","filter","g","toSuperscript","num","superscriptMap","toString","split","map","digit","join","set","createTrivialGroup","createCyclicGroup","createKleinFourGroup","createDihedralGroup","createSymmetricGroup3","createQuaternionGroup","createDirectProduct","createElementaryAbelianGroup","createAlternatingGroup4","createDirectProduct2x2x4","initializeEllipticCurveGroups","displayName","elements","id","label","inverse","conjugacyClass","operations","generators","relations","isAbelian","center","conjugacyClasses","subgroups","isNormal","n","i","push","gcd","rowMap","j","findCyclicSubgroups","allGenerators","length","e","getRotationConjugacyClass","getReflectionConjugacyClass","createDihedralMultiplicationTable","getDihedralCenter","getDihedralConjugacyClasses","getDihedralSubgroups","table","elem1","row","Object","entries","elem2","result","permutations","compose","p1","p2","findPermutation","key","perm","every","val","idx","forEach","resultId","n1","n2","lcm","i1","j1","i2","j2","Math","log2","binary","padStart","repeat","binary1","binary2","_","gen","k","k1","k2","a","b","d","step","rotRowMap","refRowMap","classes","otherRots","vertexRefs","edgeRefs","allRefs","rotations","rotSubgroup","dihedralSubgroup","allElements","examples","EllipticCurveGroup","createExampleCurves","params","ecGroup","group","groupName","getCurve","getEquationLatex","console","log","error","warn","message","addEllipticCurveGroup","getEllipticCurveGroups","startsWith"],"mappings":"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"}