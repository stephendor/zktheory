{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/tests/global-teardown.js"],"sourcesContent":["/**\n * Global Teardown for Mathematical Testing Suite\n * Cleanup and performance reporting after test completion\n */\n\nmodule.exports = async () => {\n  console.log('\\n🧹 Mathematical Testing Suite Teardown...\\n');\n  \n  // Calculate total test execution time\n  const endTime = Date.now();\n  const totalDuration = endTime - (global.__PERFORMANCE_BASELINE__?.startTime || endTime);\n  \n  // Memory usage analysis\n  const finalMemory = process.memoryUsage();\n  const initialMemory = global.__PERFORMANCE_BASELINE__?.initialMemory || finalMemory;\n  \n  const memoryDelta = {\n    rss: finalMemory.rss - initialMemory.rss,\n    heapTotal: finalMemory.heapTotal - initialMemory.heapTotal,\n    heapUsed: finalMemory.heapUsed - initialMemory.heapUsed,\n    external: finalMemory.external - initialMemory.external,\n    arrayBuffers: finalMemory.arrayBuffers - initialMemory.arrayBuffers\n  };\n  \n  // Performance summary\n  console.log('📈 Performance Summary:');\n  console.log(`⏱️  Total execution time: ${totalDuration}ms`);\n  console.log(`💾 Memory usage delta:`);\n  console.log(`   RSS: ${Math.round(memoryDelta.rss / 1024 / 1024 * 100) / 100}MB`);\n  console.log(`   Heap Total: ${Math.round(memoryDelta.heapTotal / 1024 / 1024 * 100) / 100}MB`);\n  console.log(`   Heap Used: ${Math.round(memoryDelta.heapUsed / 1024 / 1024 * 100) / 100}MB`);\n  \n  // Check for memory leaks (basic heuristic)\n  const heapUsedMB = memoryDelta.heapUsed / 1024 / 1024;\n  if (heapUsedMB > 50) {\n    console.warn(`⚠️  High memory usage detected: ${Math.round(heapUsedMB)}MB`);\n    console.warn('   Consider checking for memory leaks in mathematical computations');\n  }\n  \n  // Performance benchmarks\n  if (typeof performance !== 'undefined' && performance.mark && performance.measure) {\n    try {\n      performance.mark('test-suite-end');\n      performance.measure('total-test-duration', 'test-suite-start', 'test-suite-end');\n      \n      const measures = performance.getEntriesByType('measure');\n      if (measures.length > 0) {\n        console.log('\\n🎯 Detailed Performance Metrics:');\n        measures.forEach(measure => {\n          console.log(`   ${measure.name}: ${Math.round(measure.duration * 100) / 100}ms`);\n        });\n      }\n    } catch (perfError) {\n      // Performance API not available or failed\n      console.log('📊 Performance metrics not available');\n    }\n  }\n  \n  // Cleanup global variables\n  try {\n    delete global.__MATHEMATICAL_CONSTANTS__;\n    delete global.__PERFORMANCE_BASELINE__;\n    delete global.__MATHEMATICAL_PRECISION__;\n    delete global.__TEST_DATA_GENERATORS__;\n    delete global.__MATHEMATICAL_VALIDATORS__;\n    delete global.__BENCHMARK_DATA__;\n    delete global.__TEST_TIMEOUTS__;\n    delete global.__STATISTICAL_UTILS__;\n  } catch (cleanupError) {\n    console.warn('⚠️  Error during cleanup:', cleanupError.message);\n  }\n  \n  // Test quality metrics\n  const testResults = global.__TEST_RESULTS__ || {};\n  if (Object.keys(testResults).length > 0) {\n    console.log('\\n📊 Test Quality Metrics:');\n    Object.entries(testResults).forEach(([category, metrics]) => {\n      console.log(`   ${category}: ${JSON.stringify(metrics)}`);\n    });\n  }\n  \n  // Mathematical accuracy summary\n  if (global.__MATHEMATICAL_ACCURACY_SUMMARY__) {\n    console.log('\\n🔬 Mathematical Accuracy Summary:');\n    const summary = global.__MATHEMATICAL_ACCURACY_SUMMARY__;\n    console.log(`   Tests with high precision: ${summary.highPrecision || 0}`);\n    console.log(`   Tests with medium precision: ${summary.mediumPrecision || 0}`);\n    console.log(`   Tests with low precision: ${summary.lowPrecision || 0}`);\n    \n    if (summary.failures && summary.failures.length > 0) {\n      console.warn(`   ⚠️  Accuracy failures: ${summary.failures.length}`);\n      summary.failures.forEach(failure => {\n        console.warn(`      ${failure}`);\n      });\n    }\n  }\n  \n  // Final recommendations\n  console.log('\\n💡 Performance Recommendations:');\n  \n  if (totalDuration > 60000) {\n    console.log('   - Consider parallelizing slow mathematical computations');\n  }\n  \n  if (heapUsedMB > 25) {\n    console.log('   - Review mathematical algorithms for memory efficiency');\n  }\n  \n  if (heapUsedMB < 5) {\n    console.log('   ✅ Excellent memory efficiency');\n  }\n  \n  if (totalDuration < 30000) {\n    console.log('   ✅ Good test performance');\n  }\n  \n  console.log('\\n🏁 Mathematical testing suite completed successfully!\\n');\n};"],"names":["module","exports","console","log","endTime","Date","now","totalDuration","global","__PERFORMANCE_BASELINE__","startTime","finalMemory","process","memoryUsage","initialMemory","memoryDelta","rss","heapTotal","heapUsed","external","arrayBuffers","Math","round","heapUsedMB","warn","performance","mark","measure","measures","getEntriesByType","length","forEach","name","duration","perfError","__MATHEMATICAL_CONSTANTS__","__MATHEMATICAL_PRECISION__","__TEST_DATA_GENERATORS__","__MATHEMATICAL_VALIDATORS__","__BENCHMARK_DATA__","__TEST_TIMEOUTS__","__STATISTICAL_UTILS__","cleanupError","message","testResults","__TEST_RESULTS__","Object","keys","entries","category","metrics","JSON","stringify","__MATHEMATICAL_ACCURACY_SUMMARY__","summary","highPrecision","mediumPrecision","lowPrecision","failures","failure"],"mappings":"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"}