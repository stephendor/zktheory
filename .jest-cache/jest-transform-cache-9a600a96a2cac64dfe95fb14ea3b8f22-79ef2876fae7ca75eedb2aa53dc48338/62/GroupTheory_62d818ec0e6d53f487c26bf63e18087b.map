{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/GroupTheory.ts"],"sourcesContent":["/**\n * Comprehensive Group Theory Library\n * Implements finite groups up to order 20 without external dependencies\n */\n\nimport { StandardLayoutGenerator } from './StandardLayouts';\nimport { AdvancedLayoutEngine } from './AdvancedLayoutEngine';\n\n// Export elliptic curve types and functions\nexport * from './EllipticCurveGroups';\n\nexport interface GroupElement {\n  id: string;\n  label: string;\n  latex?: string;\n  order: number;\n  inverse: string;\n  conjugacyClass: number;\n}\n\nexport interface GroupOperation {\n  left: string;\n  right: string;\n  result: string;\n}\n\nexport interface Group {\n  name: string;\n  displayName: string;\n  order: number;\n  elements: GroupElement[];\n  operations: Map<string, Map<string, string>>;\n  generators: string[];\n  relations: string[];\n  isAbelian: boolean;\n  center: string[];\n  conjugacyClasses: string[][];\n  subgroups: { elements: string[]; name: string; isNormal: boolean }[];\n}\n\nexport interface CayleyGraphVertex {\n  id: string;\n  label: string;\n  x: number;\n  y: number;\n  z?: number;\n  color: string;\n  highlighted?: boolean;\n  size?: number;\n}\n\nexport interface CayleyGraphEdge {\n  source: string;\n  target: string;\n  generator: string;\n  color: string;\n  highlighted?: boolean;\n  width?: number;\n}\n\nexport interface CayleyGraph {\n  vertices: CayleyGraphVertex[];\n  edges: CayleyGraphEdge[];\n  generators: { id: string; label: string; color: string }[];\n}\n\n/**\n * Permutation class for representing group elements\n */\nexport class Permutation {\n  private cycles: number[][];\n  private degree: number;\n\n  constructor(cycles: number[][] | number[], degree?: number) {\n    if (typeof cycles[0] === 'number') {\n      // Array representation [1,2,0] means 0->1, 1->2, 2->0\n      const arr = cycles as number[];\n      this.degree = degree || arr.length;\n      this.cycles = this.arrayToCycles(arr);\n    } else {\n      // Cycle notation [[0,1,2]] means (0 1 2)\n      this.cycles = cycles as number[][];\n      this.degree = degree || Math.max(...this.cycles.flat()) + 1;\n    }\n  }\n\n  private arrayToCycles(arr: number[]): number[][] {\n    const visited = new Set<number>();\n    const cycles: number[][] = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (!visited.has(i)) {\n        const cycle: number[] = [];\n        let current = i;\n        \n        do {\n          cycle.push(current);\n          visited.add(current);\n          current = arr[current];\n        } while (current !== i && !visited.has(current));\n        \n        if (cycle.length > 1) {\n          cycles.push(cycle);\n        }\n      }\n    }\n    \n    return cycles;\n  }\n\n  toArray(): number[] {\n    const result = Array.from({ length: this.degree }, (_, i) => i);\n    \n    for (const cycle of this.cycles) {\n      for (let i = 0; i < cycle.length; i++) {\n        const next = (i + 1) % cycle.length;\n        result[cycle[i]] = cycle[next];\n      }\n    }\n    \n    return result;\n  }\n\n  toString(): string {\n    if (this.cycles.length === 0) return 'e';\n    return this.cycles.map(cycle => `(${cycle.join(',')})`).join('');\n  }\n\n  multiply(other: Permutation): Permutation {\n    const thisArray = this.toArray();\n    const otherArray = other.toArray();\n    const result = Array.from({ length: Math.max(this.degree, other.degree) }, (_, i) => i);\n    \n    for (let i = 0; i < result.length; i++) {\n      const intermediate = i < otherArray.length ? otherArray[i] : i;\n      result[i] = intermediate < thisArray.length ? thisArray[intermediate] : intermediate;\n    }\n    \n    return new Permutation(result);\n  }\n\n  inverse(): Permutation {\n    const arr = this.toArray();\n    const result = Array.from({ length: this.degree }, (_, i) => i);\n    \n    for (let i = 0; i < arr.length; i++) {\n      result[arr[i]] = i;\n    }\n    \n    return new Permutation(result);\n  }\n\n  order(): number {\n    return this.cycles.reduce((lcm, cycle) => this.lcm(lcm, cycle.length), 1);\n  }\n\n  private gcd(a: number, b: number): number {\n    return b === 0 ? a : this.gcd(b, a % b);\n  }\n\n  private lcm(a: number, b: number): number {\n    return (a * b) / this.gcd(a, b);\n  }\n\n  equals(other: Permutation): boolean {\n    const thisArray = this.toArray();\n    const otherArray = other.toArray();\n    const maxLength = Math.max(thisArray.length, otherArray.length);\n    \n    for (let i = 0; i < maxLength; i++) {\n      const thisVal = i < thisArray.length ? thisArray[i] : i;\n      const otherVal = i < otherArray.length ? otherArray[i] : i;\n      if (thisVal !== otherVal) return false;\n    }\n    \n    return true;\n  }\n}\n\n/**\n * Group Theory Library with database integration and elliptic curve support\n */\nimport { GroupDatabase } from './GroupDatabase';\nimport { \n  EllipticCurveGroupGenerator, \n  EllipticCurveGroup,\n  EllipticCurve \n} from './EllipticCurveGroups';\n\nexport class GroupTheoryLibrary {\n  private static ellipticCurveGroups: Map<string, Group> = new Map();\n\n  static getGroup(name: string): Group | undefined {\n    // Check if it's an elliptic curve group\n    if (name.startsWith('EC_')) {\n      return this.ellipticCurveGroups.get(name);\n    }\n    return GroupDatabase.getGroup(name);\n  }\n\n  static getAllGroups(): Group[] {\n    const standardGroups = GroupDatabase.getAllGroups();\n    const ecGroups = Array.from(this.ellipticCurveGroups.values());\n    return [...standardGroups, ...ecGroups];\n  }\n\n  static getGroupsByOrder(order: number): Group[] {\n    const standardGroups = GroupDatabase.getGroupsByOrder(order);\n    const ecGroups = Array.from(this.ellipticCurveGroups.values())\n      .filter(group => group.order === order);\n    return [...standardGroups, ...ecGroups];\n  }\n\n  static getGroupNames(): string[] {\n    const standardNames = GroupDatabase.getGroupNames();\n    const ecNames = Array.from(this.ellipticCurveGroups.keys());\n    return [...standardNames, ...ecNames];\n  }\n\n  /**\n   * Initialize elliptic curve groups\n   */\n  static initializeEllipticCurveGroups(): void {\n    try {\n      const curves = EllipticCurveGroupGenerator.getPredefinedCurves();\n      \n      curves.forEach(curve => {\n        try {\n          const ecGroup = EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);\n          const standardGroup = EllipticCurveGroupGenerator.toStandardGroup(ecGroup);\n          this.ellipticCurveGroups.set(standardGroup.name, standardGroup);\n          console.log(`‚úì Successfully initialized elliptic curve group: ${standardGroup.name}`);\n        } catch (error) {\n          console.warn(`‚ö†Ô∏è Failed to initialize elliptic curve ${curve.name}:`, error);\n          // Continue with other curves even if one fails\n        }\n      });\n    } catch (error) {\n      console.error('‚ùå Failed to initialize elliptic curve groups:', error);\n      // Don't let elliptic curve failures break the entire system\n    }\n  }\n\n  /**\n   * Get all available elliptic curves\n   */\n  static getEllipticCurves(): EllipticCurve[] {\n    return EllipticCurveGroupGenerator.getPredefinedCurves();\n  }\n\n  /**\n   * Get elliptic curve group by curve parameters\n   */\n  static getEllipticCurveGroup(a: number, b: number, p: number): Group | undefined {\n    const curveName = `E_${p}_${a}_${b}`;\n    return this.ellipticCurveGroups.get(`EC_${curveName}`);\n  }\n}\n\n// Initialize elliptic curve groups on module load (with error handling)\ntry {\n  GroupTheoryLibrary.initializeEllipticCurveGroups();\n} catch (error) {\n  console.error('‚ùå Failed to initialize elliptic curve system:', error);\n  console.log('üìã Continuing with standard groups only');\n}\n\n/**\n * Cayley Graph Generator\n */\nexport class CayleyGraphGenerator {\n  static generateGraph(\n    group: Group, \n    generators: string[],\n    layout: '2d' | '3d' = '2d'\n  ): CayleyGraph {\n    const vertices: CayleyGraphVertex[] = [];\n    const edges: CayleyGraphEdge[] = [];\n    \n    // Create vertices\n    const positions = this.generateLayout(group, layout);\n    for (let i = 0; i < group.elements.length; i++) {\n      const element = group.elements[i];\n      vertices.push({\n        id: element.id,\n        label: element.label,\n        x: positions[i].x,\n        y: positions[i].y,\n        z: positions[i].z,\n        color: this.getElementColor(element, group),\n        size: 20\n      });\n    }\n\n    // Create edges\n    const generatorColors = ['#e74c3c', '#27ae60', '#3498db', '#f39c12', '#9b59b6'];\n    const genInfo = generators.map((gen, i) => ({\n      id: gen,\n      label: group.elements.find(e => e.id === gen)?.label || gen,\n      color: generatorColors[i % generatorColors.length]\n    }));\n\n    console.log('Creating edges for generators:', generators);\n    console.log('Available operations keys:', Array.from(group.operations.keys()));\n    let edgeCount = 0;\n\n    for (const vertex of vertices) {\n      for (let i = 0; i < generators.length; i++) {\n        const generator = generators[i];\n        console.log(`Looking for operation: ${vertex.id} * ${generator}`);\n        \n        const vertexOps = group.operations.get(vertex.id);\n        if (!vertexOps) {\n          console.log(`‚ùå No operations found for vertex ${vertex.id}`);\n          continue;\n        }\n        \n        const target = vertexOps.get(generator);\n        console.log(`   Result: ${vertex.id} * ${generator} = ${target}`);\n        \n        if (target) {\n          edges.push({\n            source: vertex.id,\n            target: target,\n            generator,\n            color: generatorColors[i % generatorColors.length],\n            width: 2\n          });\n          edgeCount++;\n          console.log(`‚úÖ Edge ${edgeCount}: ${vertex.id} --${generator}--> ${target}`);\n        } else {\n          console.log(`‚ùå No target found for ${vertex.id} * ${generator}`);\n        }\n      }\n    }\n\n    console.log(`Total edges created: ${edgeCount}, Expected: ${group.elements.length * generators.length}`);\n\n    return {\n      vertices,\n      edges,\n      generators: genInfo\n    };\n  }\n\n  private static generateLayout(\n    group: Group, \n    layout: '2d' | '3d'\n  ): Array<{x: number, y: number, z?: number}> {\n    const positions: Array<{x: number, y: number, z?: number}> = [];\n    \n    console.log(`üéØ Generating optimized layout for ${group.name} (${group.elements.length} elements)`);\n    \n    const centerX = 400;\n    const centerY = 300;\n    \n    // Choose layout strategy based on group structure\n    if (group.name.includes('xC') || group.name.includes('√ó') || group.name.startsWith('(C2)') || group.name === 'C2xC2xC2') {\n      // Direct product and elementary abelian groups - check first before general abelian\n      if (group.name.startsWith('(C2)') || group.name === 'C2xC2xC2') {\n        // Elementary abelian groups - symmetric layout\n        console.log(`‚ö° Using elementary abelian layout`);\n        if (group.elements.length === 8) {\n          // Cube vertices layout for (C2)^3\n          const cubeSize = 120;\n          const cubePositions = [\n            { x: -cubeSize/2, y: -cubeSize/2 }, // 000\n            { x: cubeSize/2, y: -cubeSize/2 },  // 001\n            { x: -cubeSize/2, y: cubeSize/2 },  // 010\n            { x: cubeSize/2, y: cubeSize/2 },   // 011\n            { x: -cubeSize/2, y: -cubeSize/4 }, // 100\n            { x: cubeSize/2, y: -cubeSize/4 },  // 101\n            { x: -cubeSize/2, y: cubeSize/4 },  // 110\n            { x: cubeSize/2, y: cubeSize/4 }    // 111\n          ];\n          \n          for (let i = 0; i < Math.min(8, group.elements.length); i++) {\n            positions.push({\n              x: centerX + cubePositions[i].x,\n              y: centerY + cubePositions[i].y,\n              z: layout === '3d' ? 0 : undefined\n            });\n          }\n        } else {\n          // Default grid for other elementary abelian groups\n          const cols = Math.ceil(Math.sqrt(group.elements.length));\n          const rows = Math.ceil(group.elements.length / cols);\n          const spacingX = 90;\n          const spacingY = 80;\n          \n          for (let i = 0; i < group.elements.length; i++) {\n            const row = Math.floor(i / cols);\n            const col = i % cols;\n            positions.push({\n              x: centerX - (cols - 1) * spacingX / 2 + col * spacingX,\n              y: centerY - (rows - 1) * spacingY / 2 + row * spacingY,\n              z: layout === '3d' ? 0 : undefined\n            });\n          }\n        }\n      } else {\n        // Direct product groups - rectangular grid layout\n        console.log(`üìê Using direct product grid layout for ${group.name}`);\n        \n        // Extract the component orders for better grid arrangement\n        let cols, rows;\n        if (group.name === 'C2xC4') {\n          cols = 2; rows = 4;\n        } else if (group.name === 'C3xC3') {\n          cols = 3; rows = 3;\n        } else if (group.name === 'C2xC6') {\n          cols = 2; rows = 6;\n        } else if (group.name === 'C4xC4') {\n          cols = 4; rows = 4;\n        } else if (group.name === 'C4xC5') {\n          cols = 4; rows = 5;\n        } else if (group.name === 'C2xC10') {\n          cols = 2; rows = 10;\n        } else {\n          // Default square-ish arrangement\n          const sqrtOrder = Math.sqrt(group.elements.length);\n          cols = Math.ceil(sqrtOrder);\n          rows = Math.ceil(group.elements.length / cols);\n        }\n        \n        const spacingX = Math.min(120, 600 / cols);\n        const spacingY = Math.min(100, 500 / rows);\n        \n        for (let i = 0; i < group.elements.length; i++) {\n          const row = Math.floor(i / cols);\n          const col = i % cols;\n          positions.push({\n            x: centerX - (cols - 1) * spacingX / 2 + col * spacingX,\n            y: centerY - (rows - 1) * spacingY / 2 + row * spacingY,\n            z: layout === '3d' ? 0 : undefined\n          });\n        }\n      }\n    } else if (group.isAbelian && group.elements.length <= 8) {\n      // Circular layout for small abelian groups\n      const radius = Math.min(250, 100 + group.elements.length * 15);\n      console.log(`üîÑ Using circular layout with radius ${radius}`);\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        const angle = (2 * Math.PI * i) / group.elements.length;\n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle),\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.isAbelian && group.elements.length > 8 && group.elements.length <= 16) {\n      // Enhanced spacing layout for medium abelian groups\n      console.log(`üåÄ Using enhanced spacing layout for medium abelian group`);\n      const baseRadius = 150; // Increased from 140 for more starting space\n      const radiusIncrement = 30; // Increased from 25 for better separation\n      const angleIncrement = (2 * Math.PI) / 5; // Reduced from 6 to 5 elements per turn for more space\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        const angle = i * angleIncrement;\n        const radius = baseRadius + Math.floor(i / 5) * radiusIncrement; // Every 5 elements instead of 6\n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle),\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.isAbelian && group.elements.length > 16) {\n      // Concentric circles layout for very large abelian groups\n      console.log(`‚≠ï Using concentric circles layout for large abelian group`);\n      const elementsPerRing = 8;\n      const baseRadius = 100;\n      const ringSpacing = 60;\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        const ring = Math.floor(i / elementsPerRing);\n        const positionInRing = i % elementsPerRing;\n        const radius = baseRadius + ring * ringSpacing;\n        const angle = (2 * Math.PI * positionInRing) / elementsPerRing;\n        \n        positions.push({\n          x: centerX + radius * Math.cos(angle),\n          y: centerY + radius * Math.sin(angle),\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.name.startsWith('D')) {\n      // Special layout for dihedral groups - adaptive based on size\n      const n = Math.floor(group.elements.length / 2); // D_n has 2n elements\n      let innerRadius, outerRadius;\n      \n      if (n <= 6) {\n        // Small dihedral groups - tight dual circle\n        innerRadius = 100;\n        outerRadius = 180;\n        console.log(`üî∫ Using small dihedral layout (n=${n}, inner: ${innerRadius}, outer: ${outerRadius})`);\n      } else {\n        // Large dihedral groups - more spacing needed\n        innerRadius = 120;\n        outerRadius = 220;\n        console.log(`üî∫ Using large dihedral layout (n=${n}, inner: ${innerRadius}, outer: ${outerRadius})`);\n      }\n      \n      const rotations: number[] = [];\n      const reflections: number[] = [];\n      \n      // Separate rotations and reflections\n      for (let i = 0; i < group.elements.length; i++) {\n        const element = group.elements[i];\n        if (element.id.startsWith('r')) {\n          rotations.push(i);\n        } else {\n          reflections.push(i);\n        }\n      }\n      \n      // Position rotations on inner circle\n      for (let i = 0; i < rotations.length; i++) {\n        const angle = (2 * Math.PI * i) / rotations.length;\n        positions[rotations[i]] = {\n          x: centerX + innerRadius * Math.cos(angle),\n          y: centerY + innerRadius * Math.sin(angle),\n          z: layout === '3d' ? 0 : undefined\n        };\n      }\n      \n      // Position reflections on outer circle - aligned with polygon vertices when possible\n      for (let i = 0; i < reflections.length; i++) {\n        const angle = (2 * Math.PI * i) / reflections.length;\n        positions[reflections[i]] = {\n          x: centerX + outerRadius * Math.cos(angle),\n          y: centerY + outerRadius * Math.sin(angle),\n          z: layout === '3d' ? 50 : undefined\n        };\n      }\n    } else if (group.name === 'V4' || group.name === 'K4') {\n      // Klein Four Group - rectangular layout (Group Explorer style)\n      console.log(`‚¨ú Using Klein Four rectangular layout`);\n      const spacingX = 140;\n      const spacingY = 100;\n      \n      // Standard V4 layout: e at center, a,b,ab around it\n      const positions_v4 = [\n        { x: centerX, y: centerY - spacingY/2 },           // e (identity) at top center\n        { x: centerX - spacingX/2, y: centerY + spacingY/2 }, // a (left)\n        { x: centerX + spacingX/2, y: centerY + spacingY/2 }, // b (right)\n        { x: centerX, y: centerY + spacingY }               // ab (bottom)\n      ];\n      \n      for (let i = 0; i < Math.min(4, group.elements.length); i++) {\n        positions.push({\n          x: positions_v4[i].x,\n          y: positions_v4[i].y,\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.name === 'S3') {\n      // Symmetric group S3 - Group Explorer style layout\n      console.log(`üî∫ Using S3 Group Explorer layout`);\n      \n      // S3 standard layout: identity at center, transpositions around it, 3-cycles at outer positions\n      const radius1 = 100; // Inner circle for transpositions\n      const radius2 = 160; // Outer circle for 3-cycles\n      \n      // Elements: e, (1 2), (1 3), (2 3), (1 2 3), (1 3 2)\n      // Layout: e in center, transpositions in inner triangle, 3-cycles in outer positions\n      const s3_positions = [\n        { x: centerX, y: centerY },                                    // e (identity) at center\n        { x: centerX, y: centerY - radius1 },                         // (1 2) - top\n        { x: centerX - radius1 * Math.cos(Math.PI/6), y: centerY + radius1/2 }, // (1 3) - bottom left\n        { x: centerX + radius1 * Math.cos(Math.PI/6), y: centerY + radius1/2 }, // (2 3) - bottom right\n        { x: centerX - radius2 * Math.cos(Math.PI/6), y: centerY - radius2/2 }, // (1 2 3) - outer left\n        { x: centerX + radius2 * Math.cos(Math.PI/6), y: centerY - radius2/2 }  // (1 3 2) - outer right\n      ];\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        positions.push({\n          x: s3_positions[i].x,\n          y: s3_positions[i].y,\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.name === 'Q8') {\n      // Quaternion group - 3D cube-like layout\n      console.log(`üßä Using Quaternion group cube layout`);\n      \n      // Q8 elements: 1, -1, i, -i, j, -j, k, -k\n      // Arrange as vertices of a cube with ¬±1 at center, i,j,k pairs at opposite corners\n      const spacing = 120;\n      const q8_positions = [\n        { x: centerX, y: centerY },                                    // 1 (identity) at center\n        { x: centerX, y: centerY + 30 },                              // -1 slightly offset from center\n        { x: centerX - spacing, y: centerY - spacing },               // i - top left\n        { x: centerX + spacing, y: centerY + spacing },               // -i - bottom right\n        { x: centerX + spacing, y: centerY - spacing },               // j - top right\n        { x: centerX - spacing, y: centerY + spacing },               // -j - bottom left\n        { x: centerX, y: centerY - spacing },                         // k - top center\n        { x: centerX, y: centerY + spacing }                          // -k - bottom center\n      ];\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        positions.push({\n          x: q8_positions[i].x,\n          y: q8_positions[i].y,\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    } else if (group.name === 'A4' || group.name === 'T') {\n      // Alternating Group A4 - Using canonical tetrahedral structure\n      console.log(`üî∫ A4 layout - canonical tetrahedral structure from mathematical literature`);\n      \n      // A4 canonical structure: \n      // - Identity: e\n      // - 8 three-cycles: (123), (132), (124), (142), (134), (143), (234), (243)  \n      // - 3 double transpositions: (12)(34), (13)(24), (14)(23)\n      \n      // Standard tetrahedral arrangement - 4 triangular faces\n      // Each face is a triangle of 3 elements\n      const tetrahedralFaces = [\n        ['e', '12)(34', '13)(24'],      // Face 1: identity + 2 double transpositions\n        ['123', '142', '134'],          // Face 2: 3-cycles involving vertex 1\n        ['132', '124', '143'],          // Face 3: inverse 3-cycles  \n        ['234', '243', '14)(23']        // Face 4: 3-cycles + remaining double transposition\n      ];\n      \n      console.log(`Tetrahedral faces:`, tetrahedralFaces);\n      \n      // Initialize positions array\n      for (let i = 0; i < group.elements.length; i++) {\n        positions.push({ x: centerX, y: centerY, z: layout === '3d' ? 0 : undefined });\n      }\n      \n      // Arrange the 4 tetrahedral faces in a tetrahedral pattern\n      // Face positions: top, bottom-left, bottom-right, back\n      const facePositions = [\n        { centerX: centerX, centerY: centerY - 120 },           // Face 1: top\n        { centerX: centerX - 100, centerY: centerY + 60 },      // Face 2: bottom-left  \n        { centerX: centerX + 100, centerY: centerY + 60 },      // Face 3: bottom-right\n        { centerX: centerX, centerY: centerY + 120 }            // Face 4: bottom\n      ];\n      \n      const faceRadius = 50;\n      \n      // Place each tetrahedral face as a triangle\n      for (let faceIndex = 0; faceIndex < tetrahedralFaces.length; faceIndex++) {\n        const face = tetrahedralFaces[faceIndex];\n        const faceCenter = facePositions[faceIndex];\n        \n        // Triangle vertices for this face\n        const triangleVertices = [\n          { x: faceCenter.centerX, y: faceCenter.centerY - faceRadius },                           // top vertex\n          { x: faceCenter.centerX + faceRadius * Math.cos(Math.PI/6), y: faceCenter.centerY + faceRadius/2 }, // bottom-right vertex\n          { x: faceCenter.centerX - faceRadius * Math.cos(Math.PI/6), y: faceCenter.centerY + faceRadius/2 }  // bottom-left vertex\n        ];\n        \n        // Place elements in this face\n        for (let i = 0; i < face.length && i < 3; i++) {\n          const elementId = face[i];\n          const elementIndex = group.elements.findIndex(e => e.id === elementId);\n          if (elementIndex !== -1) {\n            positions[elementIndex] = {\n              x: triangleVertices[i].x,\n              y: triangleVertices[i].y,\n              z: layout === '3d' ? 0 : undefined\n            };\n          }\n        }\n      }\n    } else {\n      // Grid layout for larger or non-abelian groups\n      const cols = Math.ceil(Math.sqrt(group.elements.length));\n      const rows = Math.ceil(group.elements.length / cols);\n      const spacingX = 80;\n      const spacingY = 80;\n      console.log(`üìê Using grid layout (${cols}x${rows})`);\n      \n      for (let i = 0; i < group.elements.length; i++) {\n        const row = Math.floor(i / cols);\n        const col = i % cols;\n        positions.push({\n          x: centerX - (cols - 1) * spacingX / 2 + col * spacingX,\n          y: centerY - (rows - 1) * spacingY / 2 + row * spacingY,\n          z: layout === '3d' ? 0 : undefined\n        });\n      }\n    }\n    \n    console.log(`üìç Generated ${positions.length} positions`);\n    return positions;\n  }\n\n  private static getElementColor(element: GroupElement, group: Group): string {\n    // Color by conjugacy class\n    const colors = ['#3498db', '#e74c3c', '#27ae60', '#f39c12', '#9b59b6', '#e67e22', '#1abc9c', '#34495e'];\n    return colors[element.conjugacyClass % colors.length];\n  }\n}\n"],"names":["CayleyGraphGenerator","GroupTheoryLibrary","Permutation","constructor","cycles","degree","arr","length","arrayToCycles","Math","max","flat","visited","Set","i","has","cycle","current","push","add","toArray","result","Array","from","_","next","toString","map","join","multiply","other","thisArray","otherArray","intermediate","inverse","order","reduce","lcm","gcd","a","b","equals","maxLength","thisVal","otherVal","ellipticCurveGroups","Map","getGroup","name","startsWith","get","GroupDatabase","getAllGroups","standardGroups","ecGroups","values","getGroupsByOrder","filter","group","getGroupNames","standardNames","ecNames","keys","initializeEllipticCurveGroups","curves","EllipticCurveGroupGenerator","getPredefinedCurves","forEach","curve","ecGroup","createEllipticCurveGroup","standardGroup","toStandardGroup","set","console","log","error","warn","getEllipticCurves","getEllipticCurveGroup","p","curveName","generateGraph","generators","layout","vertices","edges","positions","generateLayout","elements","element","id","label","x","y","z","color","getElementColor","size","generatorColors","genInfo","gen","find","e","operations","edgeCount","vertex","generator","vertexOps","target","source","width","centerX","centerY","includes","cubeSize","cubePositions","min","undefined","cols","ceil","sqrt","rows","spacingX","spacingY","row","floor","col","sqrtOrder","isAbelian","radius","angle","PI","cos","sin","baseRadius","radiusIncrement","angleIncrement","elementsPerRing","ringSpacing","ring","positionInRing","n","innerRadius","outerRadius","rotations","reflections","positions_v4","radius1","radius2","s3_positions","spacing","q8_positions","tetrahedralFaces","facePositions","faceRadius","faceIndex","face","faceCenter","triangleVertices","elementId","elementIndex","findIndex","colors","conjugacyClass"],"mappings":"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"}