{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/jest.setup.js"],"sourcesContent":["import '@testing-library/jest-dom'\n\n// Import and register mathematical validation matchers\nimport { mathematicalMatchers } from './src/__tests__/utils/mathematicalValidation.ts'\nexpect.extend(mathematicalMatchers)\n\n// Mock TDA engine for testing (pure JavaScript implementation)\nglobal.mockTDAEngine = {\n  set_points: jest.fn(),\n  compute_vietoris_rips: jest.fn(),\n  compute_persistence: jest.fn().mockReturnValue([\n    { birth: 0, death: 0.1, dimension: 0 },\n    { birth: 0, death: 0.15, dimension: 0 },\n    { birth: 0, death: 0.3, dimension: 1 },\n    { birth: 0.05, death: 0.25, dimension: 1 },\n  ]),\n}\n\n// Mock ResizeObserver for mathematical visualizations\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}))\n\n// Mock IntersectionObserver for performance optimizations\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}))\n\n// Mock performance API for mathematical performance tests\nObject.defineProperty(global.performance, 'memory', {\n  value: {\n    usedJSHeapSize: 1024 * 1024, // 1MB\n    totalJSHeapSize: 2048 * 1024, // 2MB\n    jsHeapSizeLimit: 4096 * 1024, // 4MB\n  },\n  writable: false,\n})\n\n// Mock canvas for 3D rendering tests\nHTMLCanvasElement.prototype.getContext = jest.fn().mockImplementation((contextType) => {\n  if (contextType === 'webgl' || contextType === 'webgl2') {\n    return {\n      // Mock WebGL context for Three.js tests\n      createShader: jest.fn(),\n      shaderSource: jest.fn(),\n      compileShader: jest.fn(),\n      getShaderParameter: jest.fn().mockReturnValue(true),\n      createProgram: jest.fn(),\n      attachShader: jest.fn(),\n      linkProgram: jest.fn(),\n      getProgramParameter: jest.fn().mockReturnValue(true),\n      useProgram: jest.fn(),\n      createBuffer: jest.fn(),\n      bindBuffer: jest.fn(),\n      bufferData: jest.fn(),\n      enable: jest.fn(),\n      viewport: jest.fn(),\n      clear: jest.fn(),\n      clearColor: jest.fn(),\n      drawArrays: jest.fn(),\n      drawElements: jest.fn(),\n    }\n  }\n  \n  if (contextType === '2d') {\n    return {\n      // Mock 2D context for mathematical visualizations\n      fillRect: jest.fn(),\n      clearRect: jest.fn(),\n      strokeRect: jest.fn(),\n      fillText: jest.fn(),\n      measureText: jest.fn().mockReturnValue({ width: 100 }),\n      beginPath: jest.fn(),\n      moveTo: jest.fn(),\n      lineTo: jest.fn(),\n      stroke: jest.fn(),\n      fill: jest.fn(),\n      arc: jest.fn(),\n      scale: jest.fn(),\n      translate: jest.fn(),\n      save: jest.fn(),\n      restore: jest.fn(),\n    }\n  }\n  \n  return null\n})\n\n// Mock URL.createObjectURL for file export tests\nglobal.URL.createObjectURL = jest.fn().mockReturnValue('mock-url')\nglobal.URL.revokeObjectURL = jest.fn()\n\n// Mock file reader for data import tests\nglobal.FileReader = jest.fn().mockImplementation(() => ({\n  readAsText: jest.fn(),\n  readAsDataURL: jest.fn(),\n  onload: null,\n  onerror: null,\n  result: null,\n}))\n\n// Mock clipboard API for mathematical expression copying\nObject.assign(navigator, {\n  clipboard: {\n    writeText: jest.fn().mockResolvedValue(undefined),\n    readText: jest.fn().mockResolvedValue(''),\n  },\n})\n\n// Enhanced mathematical test utilities for comprehensive testing\nglobal.testUtils = {\n  // Helper for testing mathematical accuracy with configurable tolerance\n  expectMathematicalAccuracy: (computed, expected, tolerance = 1e-10) => {\n    if (typeof computed !== 'number' || typeof expected !== 'number') {\n      throw new Error('Both computed and expected values must be numbers')\n    }\n    if (isNaN(computed) || isNaN(expected)) {\n      throw new Error('Computed or expected value is NaN')\n    }\n    expect(Math.abs(computed - expected)).toBeLessThan(tolerance)\n  },\n  \n  // Enhanced helper for testing persistence intervals\n  expectValidPersistenceInterval: (interval) => {\n    expect(interval).toHaveProperty('birth')\n    expect(interval).toHaveProperty('death')\n    expect(interval).toHaveProperty('dimension')\n    \n    expect(typeof interval.birth).toBe('number')\n    expect(typeof interval.death).toBe('number')\n    expect(typeof interval.dimension).toBe('number')\n    \n    expect(isFinite(interval.birth)).toBe(true)\n    expect(isFinite(interval.death)).toBe(true)\n    expect(Number.isInteger(interval.dimension)).toBe(true)\n    \n    expect(interval.birth).toBeLessThanOrEqual(interval.death)\n    expect(interval.dimension).toBeGreaterThanOrEqual(0)\n    expect(interval.dimension).toBeLessThanOrEqual(10) // Reasonable upper bound\n  },\n  \n  // Enhanced helper for testing Cayley graph structure\n  expectValidCayleyGraph: (graph) => {\n    expect(graph).toHaveProperty('vertices')\n    expect(graph).toHaveProperty('edges')\n    expect(graph).toHaveProperty('generators')\n    \n    expect(Array.isArray(graph.vertices)).toBe(true)\n    expect(Array.isArray(graph.edges)).toBe(true)\n    expect(Array.isArray(graph.generators)).toBe(true)\n    \n    // Validate vertices\n    graph.vertices.forEach(vertex => {\n      expect(vertex).toHaveProperty('id')\n      expect(vertex).toHaveProperty('x')\n      expect(vertex).toHaveProperty('y')\n      expect(typeof vertex.id).toBe('string')\n      expect(typeof vertex.x).toBe('number')\n      expect(typeof vertex.y).toBe('number')\n      expect(isFinite(vertex.x)).toBe(true)\n      expect(isFinite(vertex.y)).toBe(true)\n    })\n    \n    // Validate edges\n    graph.edges.forEach(edge => {\n      expect(edge).toHaveProperty('source')\n      expect(edge).toHaveProperty('target')\n      expect(typeof edge.source).toBe('string')\n      expect(typeof edge.target).toBe('string')\n    })\n  },\n  \n  // Helper for testing group theory properties\n  expectValidGroup: (group) => {\n    expect(group).toHaveProperty('name')\n    expect(group).toHaveProperty('order')\n    expect(group).toHaveProperty('elements')\n    expect(group).toHaveProperty('operations')\n    expect(group).toHaveProperty('isAbelian')\n    \n    expect(typeof group.name).toBe('string')\n    expect(typeof group.order).toBe('number')\n    expect(typeof group.isAbelian).toBe('boolean')\n    expect(Array.isArray(group.elements)).toBe(true)\n    expect(group.elements.length).toBe(group.order)\n    \n    // Validate elements\n    group.elements.forEach(element => {\n      expect(element).toHaveProperty('id')\n      expect(element).toHaveProperty('order')\n      expect(element).toHaveProperty('inverse')\n      expect(typeof element.id).toBe('string')\n      expect(typeof element.order).toBe('number')\n      expect(typeof element.inverse).toBe('string')\n      expect(element.order).toBeGreaterThan(0)\n    })\n    \n    // Validate operations map\n    expect(group.operations instanceof Map).toBe(true)\n    expect(group.operations.size).toBe(group.order)\n  },\n  \n  // Helper for testing elliptic curve points\n  expectValidEllipticCurvePoint: (point, curve) => {\n    expect(point).toHaveProperty('x')\n    expect(point).toHaveProperty('y')\n    expect(point).toHaveProperty('isIdentity')\n    \n    expect(typeof point.isIdentity).toBe('boolean')\n    \n    if (!point.isIdentity) {\n      expect(typeof point.x).toBe('number')\n      expect(typeof point.y).toBe('number')\n      expect(Number.isInteger(point.x)).toBe(true)\n      expect(Number.isInteger(point.y)).toBe(true)\n      expect(point.x).toBeGreaterThanOrEqual(0)\n      expect(point.y).toBeGreaterThanOrEqual(0)\n      \n      if (curve) {\n        expect(point.x).toBeLessThan(curve.p)\n        expect(point.y).toBeLessThan(curve.p)\n      }\n    }\n  },\n  \n  // Helper for performance testing\n  expectPerformance: (operation, maxTimeMs = 100) => {\n    const startTime = performance.now()\n    const result = operation()\n    const endTime = performance.now()\n    const duration = endTime - startTime\n    \n    expect(duration).toBeLessThan(maxTimeMs)\n    return { result, duration }\n  },\n  \n  // Helper for memory usage testing\n  expectMemoryUsage: (operation, maxMemoryMB = 50) => {\n    const initialMemory = performance.memory?.usedJSHeapSize || 0\n    const result = operation()\n    const finalMemory = performance.memory?.usedJSHeapSize || 0\n    const memoryIncrease = (finalMemory - initialMemory) / (1024 * 1024)\n    \n    expect(memoryIncrease).toBeLessThan(maxMemoryMB)\n    return { result, memoryIncrease }\n  },\n  \n  // Helper for testing statistical properties\n  expectStatisticalProperties: (values, expectedMean, tolerance = 0.1) => {\n    expect(Array.isArray(values)).toBe(true)\n    expect(values.length).toBeGreaterThan(0)\n    \n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length\n    const stdDev = Math.sqrt(variance)\n    \n    if (expectedMean !== undefined) {\n      expect(Math.abs(mean - expectedMean)).toBeLessThan(tolerance)\n    }\n    \n    return { mean, variance, stdDev }\n  },\n  \n  // Helper for testing deterministic behavior\n  expectDeterministicBehavior: (operation, iterations = 5) => {\n    const results = []\n    for (let i = 0; i < iterations; i++) {\n      results.push(operation())\n    }\n    \n    // All results should be identical for deterministic operations\n    const firstResult = JSON.stringify(results[0])\n    results.forEach((result, index) => {\n      expect(JSON.stringify(result)).toBe(firstResult)\n    })\n    \n    return results[0]\n  },\n  \n  // Helper for testing mathematical invariants\n  expectMathematicalInvariant: (values, invariantFunction, tolerance = 1e-10) => {\n    expect(Array.isArray(values)).toBe(true)\n    expect(typeof invariantFunction).toBe('function')\n    \n    const invariantValues = values.map(invariantFunction)\n    const firstInvariant = invariantValues[0]\n    \n    invariantValues.forEach(invariant => {\n      expect(Math.abs(invariant - firstInvariant)).toBeLessThan(tolerance)\n    })\n    \n    return firstInvariant\n  },\n  \n  // Helper for testing numerical stability\n  expectNumericalStability: (operation, perturbation = 1e-8, tolerance = 1e-6) => {\n    const originalResult = operation(0)\n    const perturbedResult = operation(perturbation)\n    \n    if (typeof originalResult === 'number' && typeof perturbedResult === 'number') {\n      const relativeDifference = Math.abs((perturbedResult - originalResult) / originalResult)\n      expect(relativeDifference).toBeLessThan(tolerance)\n    }\n    \n    return { originalResult, perturbedResult }\n  },\n  \n  // Helper for testing matrix properties (for future linear algebra needs)\n  expectValidMatrix: (matrix, rows, cols) => {\n    expect(Array.isArray(matrix)).toBe(true)\n    expect(matrix.length).toBe(rows)\n    \n    matrix.forEach(row => {\n      expect(Array.isArray(row)).toBe(true)\n      expect(row.length).toBe(cols)\n      row.forEach(element => {\n        expect(typeof element).toBe('number')\n        expect(isFinite(element)).toBe(true)\n      })\n    })\n  },\n  \n  // Helper for testing complex numbers (for future use)\n  expectValidComplexNumber: (complex) => {\n    expect(complex).toHaveProperty('real')\n    expect(complex).toHaveProperty('imag')\n    expect(typeof complex.real).toBe('number')\n    expect(typeof complex.imag).toBe('number')\n    expect(isFinite(complex.real)).toBe(true)\n    expect(isFinite(complex.imag)).toBe(true)\n  },\n  \n  // Helper for testing function continuity\n  expectContinuity: (func, points, tolerance = 1e-6) => {\n    expect(typeof func).toBe('function')\n    expect(Array.isArray(points)).toBe(true)\n    \n    points.forEach(point => {\n      const epsilon = 1e-8\n      const leftLimit = func(point - epsilon)\n      const rightLimit = func(point + epsilon)\n      const functionValue = func(point)\n      \n      expect(Math.abs(leftLimit - functionValue)).toBeLessThan(tolerance)\n      expect(Math.abs(rightLimit - functionValue)).toBeLessThan(tolerance)\n    })\n  },\n}\n\n// Increase timeout for mathematical computation tests\njest.setTimeout(15000)"],"names":["expect","extend","mathematicalMatchers","global","mockTDAEngine","set_points","jest","fn","compute_vietoris_rips","compute_persistence","mockReturnValue","birth","death","dimension","ResizeObserver","mockImplementation","observe","unobserve","disconnect","IntersectionObserver","Object","defineProperty","performance","value","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","writable","HTMLCanvasElement","prototype","getContext","contextType","createShader","shaderSource","compileShader","getShaderParameter","createProgram","attachShader","linkProgram","getProgramParameter","useProgram","createBuffer","bindBuffer","bufferData","enable","viewport","clear","clearColor","drawArrays","drawElements","fillRect","clearRect","strokeRect","fillText","measureText","width","beginPath","moveTo","lineTo","stroke","fill","arc","scale","translate","save","restore","URL","createObjectURL","revokeObjectURL","FileReader","readAsText","readAsDataURL","onload","onerror","result","assign","navigator","clipboard","writeText","mockResolvedValue","undefined","readText","testUtils","expectMathematicalAccuracy","computed","expected","tolerance","Error","isNaN","Math","abs","toBeLessThan","expectValidPersistenceInterval","interval","toHaveProperty","toBe","isFinite","Number","isInteger","toBeLessThanOrEqual","toBeGreaterThanOrEqual","expectValidCayleyGraph","graph","Array","isArray","vertices","edges","generators","forEach","vertex","id","x","y","edge","source","target","expectValidGroup","group","name","order","isAbelian","elements","length","element","inverse","toBeGreaterThan","operations","Map","size","expectValidEllipticCurvePoint","point","curve","isIdentity","p","expectPerformance","operation","maxTimeMs","startTime","now","endTime","duration","expectMemoryUsage","maxMemoryMB","initialMemory","memory","finalMemory","memoryIncrease","expectStatisticalProperties","values","expectedMean","mean","reduce","sum","val","variance","pow","stdDev","sqrt","expectDeterministicBehavior","iterations","results","i","push","firstResult","JSON","stringify","index","expectMathematicalInvariant","invariantFunction","invariantValues","map","firstInvariant","invariant","expectNumericalStability","perturbation","originalResult","perturbedResult","relativeDifference","expectValidMatrix","matrix","rows","cols","row","expectValidComplexNumber","complex","real","imag","expectContinuity","func","points","epsilon","leftLimit","rightLimit","functionValue","setTimeout"],"mappings":"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"}