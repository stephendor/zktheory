191a1c2bbfc9699c8e3888f32998ac6c
/**
 * Comprehensive Jest Unit Tests for Elliptic Curve Groups
 * Tests mathematical accuracy, group properties, and arithmetic operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _EllipticCurveGroups = require("../../lib/EllipticCurveGroups");
const _mathematicalValidation = require("../utils/mathematicalValidation");
// Extend Jest matchers
expect.extend(_mathematicalValidation.mathematicalMatchers);
describe('EllipticCurveArithmetic', ()=>{
    describe('Modular Arithmetic Operations', ()=>{
        test('calculates modular inverse correctly', ()=>{
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(3, 7)).toBe(5); // 3 * 5 ≡ 1 (mod 7)
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(2, 5)).toBe(3); // 2 * 3 ≡ 1 (mod 5)
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(7, 11)).toBe(8); // 7 * 8 ≡ 1 (mod 11)
        });
        test('throws error for invalid modular inverse inputs', ()=>{
            expect(()=>_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(0, 5)).toThrow('Cannot find inverse of 0');
            expect(()=>_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(3, 0)).toThrow('Modulus must be positive');
            expect(()=>_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(6, 9)).toThrow('does not exist'); // gcd(6,9) = 3 ≠ 1
        });
        test('calculates modular exponentiation correctly', ()=>{
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modPow(2, 3, 5)).toBe(3); // 2³ ≡ 3 (mod 5)
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modPow(3, 4, 7)).toBe(4); // 3⁴ ≡ 4 (mod 7)
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modPow(5, 0, 13)).toBe(1); // x⁰ ≡ 1 (mod n)
        });
        test('handles edge cases in modular operations', ()=>{
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modPow(0, 5, 7)).toBe(0);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modPow(1, 100, 13)).toBe(1);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.modInverse(-2, 7)).toBe(3); // -2 ≡ 5 (mod 7), 5⁻¹ ≡ 3
        });
    });
    describe('Point Validation', ()=>{
        const testCurve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'test_curve',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        test('validates points on curve correctly', ()=>{
            const validPoint = {
                x: 0,
                y: 1,
                isIdentity: false
            };
            const invalidPoint = {
                x: 1,
                y: 1,
                isIdentity: false
            };
            const identityPoint = {
                x: null,
                y: null,
                isIdentity: true
            };
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(validPoint, testCurve)).toBe(true);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(invalidPoint, testCurve)).toBe(false);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(identityPoint, testCurve)).toBe(true);
        });
        test('validates identity point handling', ()=>{
            const identityPoint = {
                x: null,
                y: null,
                isIdentity: true
            };
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(identityPoint, testCurve)).toBe(true);
            // Test malformed identity points
            const malformedIdentity1 = {
                x: 5,
                y: null,
                isIdentity: true
            };
            const malformedIdentity2 = {
                x: null,
                y: 3,
                isIdentity: true
            };
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(malformedIdentity1, testCurve)).toBe(true);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(malformedIdentity2, testCurve)).toBe(true);
        });
        test('validates points using mathematical validation framework', ()=>{
            const validPoint = {
                x: 0,
                y: 1,
                isIdentity: false
            };
            expect(validPoint).toBeValidEllipticCurvePoint(testCurve);
            const identityPoint = {
                x: null,
                y: null,
                isIdentity: true
            };
            expect(identityPoint).toBeValidEllipticCurvePoint(testCurve);
        });
    });
    // Helper function to normalize point coordinates to [0, p-1]
    const normalizePoint1 = (point, p)=>{
        if (point.isIdentity) return point;
        return {
            x: point.x !== null ? (point.x % p + p) % p : null,
            y: point.y !== null ? (point.y % p + p) % p : null,
            isIdentity: false
        };
    };
    describe('Point Addition', ()=>{
        const curve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'test_curve',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        const identityPoint = {
            x: null,
            y: null,
            isIdentity: true
        };
        const point1 = {
            x: 0,
            y: 1,
            isIdentity: false
        };
        const point2 = {
            x: 2,
            y: 1,
            isIdentity: false
        };
        test('handles identity element correctly', ()=>{
            const result1 = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(identityPoint, point1, curve);
            const result2 = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point1, identityPoint, curve);
            expect(result1).toEqual(point1);
            expect(result2).toEqual(point1);
            expect(normalizePoint1(result1, curve.p)).toBeValidEllipticCurvePoint(curve);
            expect(normalizePoint1(result2, curve.p)).toBeValidEllipticCurvePoint(curve);
        });
        test('adds distinct points correctly', ()=>{
            const result = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point1, point2, curve);
            const normalized = normalizePoint1(result, curve.p);
            expect(result.isIdentity).toBe(false);
            expect(normalized).toBeValidEllipticCurvePoint(curve);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(result, curve)).toBe(true);
        });
        test('handles point doubling', ()=>{
            const result = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point1, point1, curve);
            const normalized = normalizePoint1(result, curve.p);
            expect(normalized).toBeValidEllipticCurvePoint(curve);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(result, curve)).toBe(true);
        });
        test('handles inverse points correctly', ()=>{
            const point = {
                x: 0,
                y: 1,
                isIdentity: false
            };
            const inversePoint = {
                x: 0,
                y: 4,
                isIdentity: false
            }; // -1 ≡ 4 (mod 5)
            const result = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point, inversePoint, curve);
            expect(result.isIdentity).toBe(true);
            expect(result.x).toBeNull();
            expect(result.y).toBeNull();
        });
        test('handles vertical tangent case', ()=>{
            // Find a point where doubling gives identity (has order 2)
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            const orderTwoPoint = points.find((p)=>!p.isIdentity && _EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(p, curve) === 2);
            if (orderTwoPoint) {
                const result = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(orderTwoPoint, orderTwoPoint, curve);
                expect(result.isIdentity).toBe(true);
            }
        });
        test('validates group law properties', ()=>{
            const points = [
                identityPoint,
                point1,
                point2,
                {
                    x: 3,
                    y: 0,
                    isIdentity: false
                }
            ].filter((p)=>_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(p, curve));
            // Test associativity: (P + Q) + R = P + (Q + R)
            for(let i = 0; i < points.length && i < 3; i++){
                for(let j = 0; j < points.length && j < 3; j++){
                    for(let k = 0; k < points.length && k < 3; k++){
                        const p = points[i];
                        const q = points[j];
                        const r = points[k];
                        const left = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(_EllipticCurveGroups.EllipticCurveArithmetic.addPoints(p, q, curve), r, curve);
                        const right = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(p, _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(q, r, curve), curve);
                        // Normalize both results for comparison
                        const leftNorm = normalizePoint1(left, curve.p);
                        const rightNorm = normalizePoint1(right, curve.p);
                        expect(leftNorm.isIdentity).toBe(rightNorm.isIdentity);
                        if (!leftNorm.isIdentity && !rightNorm.isIdentity) {
                            expect(leftNorm.x).toBe(rightNorm.x);
                            expect(leftNorm.y).toBe(rightNorm.y);
                        }
                    }
                }
            }
        });
        test('validates commutativity: P + Q = Q + P', ()=>{
            const result1 = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point1, point2, curve);
            const result2 = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point2, point1, curve);
            expect(result1.isIdentity).toBe(result2.isIdentity);
            if (!result1.isIdentity) {
                expect(result1.x).toBe(result2.x);
                expect(result1.y).toBe(result2.y);
            }
        });
    });
    describe('Scalar Multiplication', ()=>{
        const curve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'test_curve',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        const basePoint = {
            x: 0,
            y: 1,
            isIdentity: false
        };
        test('handles scalar multiplication edge cases', ()=>{
            const result0 = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(basePoint, 0, curve);
            const result1 = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(basePoint, 1, curve);
            expect(result0.isIdentity).toBe(true);
            expect(result1).toEqual(basePoint);
        });
        test('performs scalar multiplication correctly', ()=>{
            const result2 = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(basePoint, 2, curve);
            const result3 = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(basePoint, 3, curve);
            // 2P should equal P + P
            const doubling = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(basePoint, basePoint, curve);
            const result2Norm = normalizePoint1(result2, curve.p);
            const doublingNorm = normalizePoint1(doubling, curve.p);
            expect(result2Norm).toEqual(doublingNorm);
            // Results should be on curve
            expect(result2Norm).toBeValidEllipticCurvePoint(curve);
            expect(normalizePoint1(result3, curve.p)).toBeValidEllipticCurvePoint(curve);
        });
        test('validates distributive property: k(P + Q) = kP + kQ', ()=>{
            const point2 = {
                x: 2,
                y: 1,
                isIdentity: false
            };
            const k = 3;
            if (_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(point2, curve)) {
                const sum = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(basePoint, point2, curve);
                const left = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(sum, k, curve);
                const kP = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(basePoint, k, curve);
                const kQ = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(point2, k, curve);
                const right = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(kP, kQ, curve);
                expect(left.isIdentity).toBe(right.isIdentity);
                if (!left.isIdentity) {
                    expect(left.x).toBe(right.x);
                    expect(left.y).toBe(right.y);
                }
            }
        });
        test('handles identity point in scalar multiplication', ()=>{
            const identity = {
                x: null,
                y: null,
                isIdentity: true
            };
            const result = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(identity, 5, curve);
            expect(result.isIdentity).toBe(true);
        });
    });
    describe('Point Order Calculation', ()=>{
        const curve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'test_curve',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        test('calculates point orders correctly', ()=>{
            const identity = {
                x: null,
                y: null,
                isIdentity: true
            };
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(identity, curve)).toBe(1);
            // Generate all points and test their orders
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            points.forEach((point)=>{
                const order = _EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(point, curve);
                expect(order).toBeGreaterThan(0);
                if (order !== -1) {
                    // Verify that order * point = identity
                    const result = _EllipticCurveGroups.EllipticCurveArithmetic.scalarMultiply(point, order, curve);
                    expect(result.isIdentity).toBe(true);
                }
            });
        });
        test('validates Lagrange theorem for point orders', ()=>{
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            const groupOrder = points.length;
            points.forEach((point)=>{
                const pointOrder = _EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(point, curve);
                if (pointOrder !== -1 && pointOrder > 0) {
                    expect(groupOrder % pointOrder).toBe(0);
                }
            });
        });
        test('handles edge cases in order calculation', ()=>{
            // Test with a problematic curve where computation might fail
            const badCurve = {
                a: 0,
                b: 0,
                p: 2,
                name: 'bad_curve',
                displayName: 'y² = x³ (mod 2)'
            };
            const point = {
                x: 1,
                y: 1,
                isIdentity: false
            };
            const order = _EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(point, badCurve);
            // Should handle gracefully, returning valid order or -1
            expect(typeof order).toBe('number');
            expect(order).toBeGreaterThanOrEqual(-1);
        });
    });
});
describe('EllipticCurveGroupGenerator', ()=>{
    describe('Point Generation', ()=>{
        test('generates valid curve points', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'test_curve',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            expect(Array.isArray(points)).toBe(true);
            expect(points.length).toBeGreaterThan(0);
            // First point should be identity
            expect(points[0].isIdentity).toBe(true);
            expect(points[0].x).toBeNull();
            expect(points[0].y).toBeNull();
            // All points should be on the curve
            points.forEach((point)=>{
                expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(point, curve)).toBe(true);
                expect(point).toBeValidEllipticCurvePoint(curve);
            });
        });
        test('generates reasonable number of points for known curves', ()=>{
            // Test that curves generate a reasonable number of points within Hasse bound
            const curves = [
                {
                    a: 1,
                    b: 1,
                    p: 5,
                    name: 'E_5_1_1',
                    displayName: 'y² = x³ + x + 1 (mod 5)'
                },
                {
                    a: 1,
                    b: 6,
                    p: 7,
                    name: 'E_7_1_6',
                    displayName: 'y² = x³ + x + 6 (mod 7)'
                }
            ];
            curves.forEach((curve)=>{
                const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
                // Should have at least the identity point
                expect(points.length).toBeGreaterThan(0);
                // Should satisfy Hasse bound: |#E(Fp) - (p + 1)| ≤ 2√p
                const bound = 2 * Math.sqrt(curve.p);
                const difference = Math.abs(points.length - (curve.p + 1));
                expect(difference).toBeLessThanOrEqual(bound);
                // Log actual counts for verification
                console.log(`Curve ${curve.name}: generated ${points.length} points (expected around ${curve.p + 1})`);
            });
        });
        test('validates Hasse bound for generated groups', ()=>{
            const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves();
            curves.forEach((curve)=>{
                const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
                const groupOrder = points.length;
                // Hasse bound: |#E(Fp) - (p + 1)| ≤ 2√p
                const bound = 2 * Math.sqrt(curve.p);
                const difference = Math.abs(groupOrder - (curve.p + 1));
                expect(difference).toBeLessThanOrEqual(bound);
            });
        });
        test('generates unique points', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'test_curve',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            const pointStrings = points.map((p)=>p.isIdentity ? 'O' : `(${p.x},${p.y})`);
            const uniquePoints = new Set(pointStrings);
            expect(uniquePoints.size).toBe(points.length);
        });
    });
    describe('Group Creation', ()=>{
        test('creates valid elliptic curve group structure', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'E_5_1_1',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const group = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            expect(group.curve).toEqual(curve);
            expect(group.name).toBe('EC_E_5_1_1');
            expect(group.displayName).toBe('E: y² = x³ + 1x + 1 (mod 5)');
            expect(group.order).toBe(group.points.length);
            expect(group.points.length).toBeGreaterThan(0);
            expect(group.points[0].isIdentity).toBe(true);
        });
        test('validates group properties', ()=>{
            const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves().slice(0, 3);
            curves.forEach((curve)=>{
                const group = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
                expect(group.order).toBeGreaterThan(0);
                expect(group.points.length).toBe(group.order);
                expect(group.name).toContain('EC_');
                expect(group.displayName).toContain('y²');
                expect(group.displayName).toContain(`(mod ${curve.p})`);
            });
        });
    });
    describe('Predefined Curves', ()=>{
        test('provides valid predefined curves', ()=>{
            const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves();
            expect(Array.isArray(curves)).toBe(true);
            expect(curves.length).toBeGreaterThan(0);
            curves.forEach((curve)=>{
                expect(curve).toHaveProperty('a');
                expect(curve).toHaveProperty('b');
                expect(curve).toHaveProperty('p');
                expect(curve).toHaveProperty('name');
                expect(curve).toHaveProperty('displayName');
                expect(typeof curve.a).toBe('number');
                expect(typeof curve.b).toBe('number');
                expect(typeof curve.p).toBe('number');
                expect(typeof curve.name).toBe('string');
                expect(typeof curve.displayName).toBe('string');
                expect(curve.p).toBeGreaterThan(1);
                expect(Number.isInteger(curve.p)).toBe(true);
                // Validate using mathematical validation framework
                const validation = _mathematicalValidation.EllipticCurveValidator.validateCurve(curve);
                expect(validation.isValid).toBe(true);
            });
        });
        test('validates discriminant for predefined curves', ()=>{
            const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves();
            curves.forEach((curve)=>{
                // Check discriminant: Δ = -16(4a³ + 27b²) ≠ 0 (mod p)
                const discriminant = -16 * (4 * Math.pow(curve.a, 3) + 27 * Math.pow(curve.b, 2));
                expect(discriminant % curve.p).not.toBe(0);
            });
        });
    });
    describe('Standard Group Conversion', ()=>{
        test('converts to standard group format correctly', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'E_5_1_1',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            const standardGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.toStandardGroup(ecGroup);
            expect(standardGroup.name).toBe(ecGroup.name);
            expect(standardGroup.displayName).toBe(ecGroup.displayName);
            expect(standardGroup.order).toBe(ecGroup.order);
            expect(standardGroup.isAbelian).toBe(true);
            expect(Array.isArray(standardGroup.elements)).toBe(true);
            expect(standardGroup.operations instanceof Map).toBe(true);
            expect(Array.isArray(standardGroup.generators)).toBe(true);
            // Validate element structure
            standardGroup.elements.forEach((element)=>{
                expect(element).toHaveProperty('id');
                expect(element).toHaveProperty('label');
                expect(element).toHaveProperty('latex');
                expect(element).toHaveProperty('order');
                expect(element).toHaveProperty('inverse');
                expect(element).toHaveProperty('conjugacyClass');
                expect(typeof element.id).toBe('string');
                expect(typeof element.label).toBe('string');
                expect(typeof element.latex).toBe('string');
                expect(typeof element.order).toBe('number');
                expect(typeof element.inverse).toBe('string');
                expect(typeof element.conjugacyClass).toBe('number');
            });
        });
        test('validates operation table in standard group', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'test_curve',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            const standardGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.toStandardGroup(ecGroup);
            // Check operation table completeness
            expect(standardGroup.operations.size).toBe(standardGroup.order);
            standardGroup.operations.forEach((operationMap, element1)=>{
                expect(operationMap.size).toBe(standardGroup.order);
                operationMap.forEach((result, element2)=>{
                    // Result should be a valid element ID - debug the issue
                    const isValidElement = standardGroup.elements.some((e)=>e.id === result);
                    if (!isValidElement) {
                        console.log(`Invalid result: ${result}, available elements: ${standardGroup.elements.map((e)=>e.id).join(', ')}`);
                    }
                    expect(isValidElement).toBe(true);
                });
            });
        });
        test('validates inverse relationships in standard group', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'test_curve',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            const standardGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.toStandardGroup(ecGroup);
            standardGroup.elements.forEach((element)=>{
                const inverse = standardGroup.elements.find((e)=>e.id === element.inverse);
                expect(inverse).toBeDefined();
                // Check that element * inverse = identity
                const product = standardGroup.operations.get(element.id)?.get(element.inverse);
                expect(product).toBe('P0'); // P0 should be identity
            });
        });
    });
});
describe('EllipticCurveAnimator', ()=>{
    describe('Animation Generation', ()=>{
        const curve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'test_curve',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        const point1 = {
            x: 0,
            y: 1,
            isIdentity: false
        };
        const point2 = {
            x: 2,
            y: 1,
            isIdentity: false
        };
        const identity = {
            x: null,
            y: null,
            isIdentity: true
        };
        test('generates valid animation frames for point addition', ()=>{
            const frames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, point2, curve, 800, 600);
            expect(Array.isArray(frames)).toBe(true);
            expect(frames.length).toBeGreaterThan(0);
            // Check frame structure
            frames.forEach((frame)=>{
                expect(frame).toHaveProperty('step');
                expect(frame).toHaveProperty('progress');
                expect(typeof frame.step).toBe('string');
                expect(typeof frame.progress).toBe('number');
                expect(frame.progress).toBeGreaterThanOrEqual(0);
                expect(frame.progress).toBeLessThanOrEqual(1);
            });
            // First frame should be 'selecting'
            expect(frames[0].step).toBe('selecting');
            expect(frames[0].progress).toBe(0);
            // Last frame should be 'completed'
            expect(frames[frames.length - 1].step).toBe('completed');
            expect(frames[frames.length - 1].progress).toBe(1);
        });
        test('handles identity point animations', ()=>{
            const frames1 = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(identity, point1, curve);
            const frames2 = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, identity, curve);
            expect(frames1.length).toBeGreaterThan(0);
            expect(frames2.length).toBeGreaterThan(0);
            // Should start with selecting and end with completed
            expect(frames1[0].step).toBe('selecting');
            expect(frames1[frames1.length - 1].step).toBe('completed');
            expect(frames2[0].step).toBe('selecting');
            expect(frames2[frames2.length - 1].step).toBe('completed');
        });
        test('validates animation progression', ()=>{
            const frames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, point2, curve);
            // Progress should be monotonically increasing
            for(let i = 1; i < frames.length; i++){
                expect(frames[i].progress).toBeGreaterThanOrEqual(frames[i - 1].progress);
            }
            // All expected steps should be present for non-identity points
            const steps = frames.map((f)=>f.step);
            expect(steps).toContain('selecting');
            expect(steps).toContain('completed');
        });
        test('handles edge cases in animation generation', ()=>{
            // Same point (doubling)
            const doublingFrames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, point1, curve);
            expect(doublingFrames.length).toBeGreaterThan(0);
            // Both identity points
            const identityFrames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(identity, identity, curve);
            expect(identityFrames.length).toBeGreaterThan(0);
        });
        test('validates animation results match arithmetic', ()=>{
            const frames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, point2, curve);
            const lastFrame = frames[frames.length - 1];
            const arithmeticResult = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(point1, point2, curve);
            expect(lastFrame.result).toEqual(arithmeticResult);
        });
    });
    describe('Performance and Edge Cases', ()=>{
        test('generates animations efficiently', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 11,
                name: 'perf_test',
                displayName: 'y² = x³ + x + 1 (mod 11)'
            };
            const points = _EllipticCurveGroups.EllipticCurveGroupGenerator.generateCurvePoints(curve);
            const startTime = performance.now();
            // Generate animations for first few point pairs
            for(let i = 0; i < Math.min(3, points.length); i++){
                for(let j = 0; j < Math.min(3, points.length); j++){
                    _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(points[i], points[j], curve);
                }
            }
            const endTime = performance.now();
            expect(endTime - startTime).toBeLessThan(100); // Should be fast
        });
        test('handles large canvas dimensions', ()=>{
            const curve = {
                a: 1,
                b: 1,
                p: 5,
                name: 'test_curve',
                displayName: 'y² = x³ + x + 1 (mod 5)'
            };
            const point1 = {
                x: 0,
                y: 1,
                isIdentity: false
            };
            const point2 = {
                x: 2,
                y: 1,
                isIdentity: false
            };
            const frames = _EllipticCurveGroups.EllipticCurveAnimator.generateAdditionAnimation(point1, point2, curve, 1920, 1080);
            expect(frames.length).toBeGreaterThan(0);
            // Check that line points (if any) respect canvas bounds
            frames.forEach((frame)=>{
                if (frame.linePoints) {
                    frame.linePoints.forEach((point)=>{
                        expect(point.x).toBeGreaterThanOrEqual(0);
                        expect(point.x).toBeLessThanOrEqual(1920);
                        expect(point.y).toBeGreaterThanOrEqual(0);
                        expect(point.y).toBeLessThanOrEqual(1080);
                    });
                }
            });
        });
    });
});
describe('Integration Tests', ()=>{
    test('validates complete elliptic curve group workflow', ()=>{
        // Create curve
        const curve = {
            a: 1,
            b: 1,
            p: 5,
            name: 'integration_test',
            displayName: 'y² = x³ + x + 1 (mod 5)'
        };
        // Generate group
        const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
        // Convert to standard format
        const standardGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.toStandardGroup(ecGroup);
        // Test all points and operations
        ecGroup.points.forEach((point)=>{
            expect(point).toBeValidEllipticCurvePoint(curve);
            expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(point, curve)).toBe(true);
            const order = _EllipticCurveGroups.EllipticCurveArithmetic.getPointOrder(point, curve);
            if (order > 0 && order !== -1) {
                expect(ecGroup.order % order).toBe(0); // Lagrange theorem
            }
        });
        // Test standard group properties
        expect(standardGroup.elements.length).toBe(ecGroup.order);
        expect(standardGroup.operations.size).toBe(ecGroup.order);
        expect(standardGroup.isAbelian).toBe(true);
    });
    test('validates mathematical consistency across all predefined curves', ()=>{
        const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves();
        curves.forEach((curve)=>{
            // Validate curve parameters
            const curveValidation = _mathematicalValidation.EllipticCurveValidator.validateCurve(curve);
            expect(curveValidation.isValid).toBe(true);
            // Generate group and validate
            const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            // Validate Hasse bound
            const hasseValidation = _mathematicalValidation.EllipticCurveValidator.validateHasseBound(ecGroup.order, curve.p);
            expect(hasseValidation.isValid).toBe(true);
            // Test group operations maintain closure
            const testPoints = ecGroup.points.slice(0, Math.min(4, ecGroup.points.length));
            testPoints.forEach((p1)=>{
                testPoints.forEach((p2)=>{
                    const sum = _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(p1, p2, curve);
                    const normalizedSum = normalizePoint(sum, curve.p);
                    expect(normalizedSum).toBeValidEllipticCurvePoint(curve);
                    expect(_EllipticCurveGroups.EllipticCurveArithmetic.isOnCurve(sum, curve)).toBe(true);
                    // Result should be in the group (after normalization)
                    const isInGroup = ecGroup.points.some((p)=>{
                        const normalizedP = normalizePoint(p, curve.p);
                        return normalizedP.isIdentity === normalizedSum.isIdentity && normalizedP.x === normalizedSum.x && normalizedP.y === normalizedSum.y;
                    });
                    expect(isInGroup).toBe(true);
                });
            });
        });
    });
    test('validates performance across different curve sizes', ()=>{
        const curves = _EllipticCurveGroups.EllipticCurveGroupGenerator.getPredefinedCurves();
        curves.forEach((curve)=>{
            const startTime = performance.now();
            // Generate group
            const ecGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve);
            // Convert to standard format
            const standardGroup = _EllipticCurveGroups.EllipticCurveGroupGenerator.toStandardGroup(ecGroup);
            // Test some operations
            if (ecGroup.points.length > 1) {
                _EllipticCurveGroups.EllipticCurveArithmetic.addPoints(ecGroup.points[1], ecGroup.points[1], curve);
            }
            const endTime = performance.now();
            // Should complete reasonably quickly even for larger curves
            expect(endTime - startTime).toBeLessThan(1000); // 1 second limit
        });
    });
    test('validates deterministic behavior', ()=>{
        const curve = {
            a: 1,
            b: 1,
            p: 7,
            name: 'deterministic_test',
            displayName: 'y² = x³ + x + 1 (mod 7)'
        };
        // Generate multiple times and ensure identical results
        const results = Array.from({
            length: 3
        }, ()=>_EllipticCurveGroups.EllipticCurveGroupGenerator.createEllipticCurveGroup(curve));
        const firstResult = results[0];
        results.slice(1).forEach((result)=>{
            expect(result.order).toBe(firstResult.order);
            expect(result.points.length).toBe(firstResult.points.length);
            // Points should be identical (though order might differ)
            expect(result.points).toEqual(expect.arrayContaining(firstResult.points));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,