3b84aabbad5dc0ca7cf9b3519f14abcc
/**
 * WASM Performance Wrapper
 * Specialized performance monitoring for WebAssembly mathematical computations
 * Handles TDA Rust core operations and other WASM-based mathematical functions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WASMPerformanceWrapper: function() {
        return WASMPerformanceWrapper;
    },
    wasmPerformanceWrapper: function() {
        return wasmPerformanceWrapper;
    },
    withCayleyPerformanceMonitoring: function() {
        return withCayleyPerformanceMonitoring;
    },
    withTDAPerformanceMonitoring: function() {
        return withTDAPerformanceMonitoring;
    }
});
const _MathematicalPerformanceMonitor = require("./MathematicalPerformanceMonitor");
class WASMPerformanceWrapper {
    constructor(){
        this.wasmModules = new Map();
        this.performanceCache = new Map();
    }
    static getInstance() {
        if (!WASMPerformanceWrapper.instance) {
            WASMPerformanceWrapper.instance = new WASMPerformanceWrapper();
        }
        return WASMPerformanceWrapper.instance;
    }
    /**
   * Register a WASM module for performance monitoring
   */ registerWASMModule(name, module) {
        this.wasmModules.set(name, module);
    }
    /**
   * Wrap a WASM function call with performance monitoring
   */ async wrapWASMOperation(context, wasmFunction, options) {
        const operation = {
            operation: `wasm_${context.operation}`,
            category: this.categorizeWASMOperation(context.operation),
            complexity: context.expectedComplexity,
            inputSize: context.inputSize,
            expectedTimeMs: this.estimateExecutionTime(context),
            maxAllowedTimeMs: this.getMaxAllowedTime(context)
        };
        return await _MathematicalPerformanceMonitor.mathematicalPerformanceMonitor.monitorMathematicalOperation(operation, async ()=>{
            const startMemory = options?.trackMemory ? this.getWASMMemoryUsage() : undefined;
            try {
                const result = await wasmFunction();
                // Store performance metrics in cache if requested
                if (options?.cacheResults) {
                    this.cachePerformanceMetrics(context, startMemory);
                }
                return result;
            } catch (error) {
                console.error(`WASM operation ${context.operation} failed:`, error);
                throw error;
            }
        }, {
            environment: options?.environment,
            trackMemory: options?.trackMemory,
            validateResult: context.validationFn
        });
    }
    /**
   * Wrap synchronous WASM function calls
   */ wrapSyncWASMOperation(context, wasmFunction, options) {
        const operation = {
            operation: `wasm_${context.operation}`,
            category: this.categorizeWASMOperation(context.operation),
            complexity: context.expectedComplexity,
            inputSize: context.inputSize,
            expectedTimeMs: this.estimateExecutionTime(context),
            maxAllowedTimeMs: this.getMaxAllowedTime(context)
        };
        return _MathematicalPerformanceMonitor.mathematicalPerformanceMonitor.monitorSyncMathematicalOperation(operation, ()=>{
            const startMemory = options?.trackMemory ? this.getWASMMemoryUsage() : undefined;
            try {
                const result = wasmFunction();
                // Store performance metrics in cache if requested
                if (options?.cacheResults) {
                    this.cachePerformanceMetrics(context, startMemory);
                }
                return result;
            } catch (error) {
                console.error(`WASM operation ${context.operation} failed:`, error);
                throw error;
            }
        }, {
            environment: options?.environment,
            trackMemory: options?.trackMemory,
            validateResult: context.validationFn
        });
    }
    /**
   * Specific wrapper for TDA Rust core operations
   */ async wrapTDAOperation(operationName, inputData, wasmFunction, options) {
        const inputSize = this.calculateTDAInputSize(inputData);
        const context = {
            operation: `tda_${operationName}`,
            wasmModule: 'tda_rust_core',
            functionName: operationName,
            inputSize,
            expectedComplexity: this.getTDAComplexity(operationName, inputSize),
            inputData,
            validationFn: options?.validateTopology ? this.createTDAValidator(options.expectedBetti) : undefined
        };
        return await this.wrapWASMOperation(context, wasmFunction, {
            environment: options?.environment,
            trackMemory: true,
            cacheResults: true
        });
    }
    /**
   * Specific wrapper for Cayley graph operations
   */ async wrapCayleyOperation(operationName, groupOrder, wasmFunction, options) {
        const context = {
            operation: `cayley_${operationName}`,
            wasmModule: 'cayley_core',
            functionName: operationName,
            inputSize: groupOrder,
            expectedComplexity: this.getCayleyComplexity(operationName, groupOrder),
            validationFn: options?.validateGroupProperties ? this.createCayleyValidator(groupOrder) : undefined
        };
        return await this.wrapWASMOperation(context, wasmFunction, {
            environment: options?.environment,
            trackMemory: true,
            cacheResults: true
        });
    }
    categorizeWASMOperation(operation) {
        if (operation.includes('tda') || operation.includes('persistence') || operation.includes('homology')) {
            return 'tda';
        }
        if (operation.includes('cayley') || operation.includes('group') || operation.includes('algebra')) {
            return 'group_theory';
        }
        if (operation.includes('elliptic') || operation.includes('curve') || operation.includes('field')) {
            return 'elliptic_curves';
        }
        if (operation.includes('render') || operation.includes('draw') || operation.includes('canvas')) {
            return 'visualization';
        }
        if (operation.includes('latex') || operation.includes('math') || operation.includes('katex')) {
            return 'latex_rendering';
        }
        return 'tda'; // Default fallback
    }
    estimateExecutionTime(context) {
        const { operation, inputSize, expectedComplexity } = context;
        // Base estimates in milliseconds
        const baseTime = {
            'tda_persistence': 100,
            'tda_homology': 500,
            'cayley_generation': 50,
            'cayley_layout': 200,
            'group_validation': 20,
            'default': 100
        };
        const base = baseTime[operation] || baseTime.default;
        // Apply complexity scaling
        switch(expectedComplexity){
            case 'O(1)':
                return base;
            case 'O(n)':
                return base * Math.log(inputSize + 1);
            case 'O(n²)':
                return base * Math.pow(Math.log(inputSize + 1), 2);
            case 'O(n³)':
                return base * Math.pow(Math.log(inputSize + 1), 3);
            case 'O(2^n)':
                return Math.min(base * Math.pow(2, Math.min(inputSize, 10)), 10000);
            default:
                return base * Math.log(inputSize + 1);
        }
    }
    getMaxAllowedTime(context) {
        const estimated = this.estimateExecutionTime(context);
        // Allow 3x the estimated time as maximum
        return Math.max(estimated * 3, 1000); // Minimum 1 second
    }
    calculateTDAInputSize(inputData) {
        if (Array.isArray(inputData)) {
            return inputData.length;
        }
        if (inputData?.points && Array.isArray(inputData.points)) {
            return inputData.points.length;
        }
        if (typeof inputData === 'object' && inputData?.size) {
            return inputData.size;
        }
        return 100; // Default estimate
    }
    getTDAComplexity(operationName, inputSize) {
        switch(operationName){
            case 'persistence_diagram':
            case 'homology_computation':
                return inputSize < 50 ? 'O(n²)' : 'O(n³)';
            case 'filtration_construction':
                return 'O(n²)';
            case 'barcode_generation':
                return 'O(n)';
            case 'landscape_computation':
                return 'O(n²)';
            default:
                return 'O(n²)';
        }
    }
    getCayleyComplexity(operationName, groupOrder) {
        switch(operationName){
            case 'group_generation':
                return groupOrder < 20 ? 'O(n²)' : 'O(n³)';
            case 'layout_calculation':
                return 'O(n²)';
            case 'subgroup_detection':
                return 'O(n²)';
            case 'conjugacy_classes':
                return 'O(n²)';
            default:
                return 'O(n²)';
        }
    }
    createTDAValidator(expectedBetti) {
        return (result)=>{
            try {
                if (!result || !result.intervals) {
                    return 0.0; // Invalid result
                }
                // Basic validation: check if we have reasonable intervals
                const intervals = result.intervals;
                if (!Array.isArray(intervals) || intervals.length === 0) {
                    return 0.5; // Partially valid
                }
                // Check if intervals have expected structure
                const hasValidStructure = intervals.every((interval)=>typeof interval.birth === 'number' && typeof interval.death === 'number' && interval.birth <= interval.death);
                if (!hasValidStructure) {
                    return 0.3; // Poor structure
                }
                // If expected Betti numbers provided, validate against them
                if (expectedBetti) {
                    const actualBetti = this.computeBettiNumbers(intervals);
                    const bettiAccuracy = this.compareBettiNumbers(actualBetti, expectedBetti);
                    return 0.7 + 0.3 * bettiAccuracy; // Base score + Betti accuracy
                }
                return 1.0; // Fully valid
            } catch (error) {
                console.warn('TDA validation failed:', error);
                return 0.0;
            }
        };
    }
    createCayleyValidator(groupOrder) {
        return (result)=>{
            try {
                if (!result) return 0.0;
                // Validate group structure if applicable
                if (result.elements && Array.isArray(result.elements)) {
                    if (result.elements.length !== groupOrder) {
                        return 0.5; // Wrong number of elements
                    }
                    // Check for identity element
                    const hasIdentity = result.elements.some((el)=>el.id === 'e');
                    if (!hasIdentity) {
                        return 0.6; // Missing identity
                    }
                    return 1.0; // Valid group structure
                }
                // Validate visualization data
                if (result.nodes && result.edges) {
                    const nodeCount = Array.isArray(result.nodes) ? result.nodes.length : 0;
                    if (nodeCount !== groupOrder) {
                        return 0.7; // Wrong number of nodes
                    }
                    return 1.0; // Valid visualization
                }
                return 0.8; // Generic valid result
            } catch (error) {
                console.warn('Cayley validation failed:', error);
                return 0.0;
            }
        };
    }
    computeBettiNumbers(intervals) {
        const dimensions = new Set(intervals.map((i)=>i.dimension));
        const maxDim = Math.max(...dimensions);
        const betti = [];
        for(let d = 0; d <= maxDim; d++){
            const dimIntervals = intervals.filter((i)=>i.dimension === d && i.death > i.birth);
            betti[d] = dimIntervals.length;
        }
        return betti;
    }
    compareBettiNumbers(actual, expected) {
        const maxLength = Math.max(actual.length, expected.length);
        let matches = 0;
        for(let i = 0; i < maxLength; i++){
            const actualVal = actual[i] || 0;
            const expectedVal = expected[i] || 0;
            if (actualVal === expectedVal) matches++;
        }
        return matches / maxLength;
    }
    getWASMMemoryUsage() {
        let wasmHeap = 0;
        let jsHeap = 0;
        // Try to get WASM memory usage
        try {
            // This would need to be adapted based on the specific WASM module
            const wasmModule = this.wasmModules.get('tda_rust_core');
            if (wasmModule && wasmModule.memory) {
                wasmHeap = wasmModule.memory.buffer.byteLength;
            }
        } catch (error) {
        // Ignore WASM memory errors
        }
        // Get JS heap usage
        try {
            const performance = globalThis.performance;
            if (performance?.memory) {
                jsHeap = performance.memory.usedJSHeapSize || 0;
            }
        } catch (error) {
        // Ignore JS memory errors
        }
        return {
            wasmHeap,
            jsHeap
        };
    }
    cachePerformanceMetrics(context, startMemory) {
        const key = `${context.wasmModule}_${context.functionName}`;
        const existing = this.performanceCache.get(key) || [];
        // For now, just store the operation context
        // In a real implementation, we'd calculate and store actual metrics
        const metrics = {
            executionTime: 0,
            memoryIncrease: 0,
            inputComplexity: context.inputSize
        };
        existing.push(metrics);
        // Keep only the last 100 measurements
        if (existing.length > 100) {
            existing.splice(0, existing.length - 100);
        }
        this.performanceCache.set(key, existing);
    }
    /**
   * Get cached performance metrics for analysis
   */ getCachedMetrics(wasmModule, functionName) {
        const key = `${wasmModule}_${functionName}`;
        return this.performanceCache.get(key) || [];
    }
    /**
   * Clear performance cache
   */ clearCache() {
        this.performanceCache.clear();
    }
    /**
   * Generate WASM-specific performance report
   */ generateWASMReport() {
        const modules = Array.from(this.wasmModules.keys());
        const operations = {};
        const recommendations = [];
        // Analyze cached metrics
        for (const [key, metrics] of this.performanceCache.entries()){
            const callCount = metrics.length;
            const averageTime = callCount > 0 ? metrics.reduce((sum, m)=>sum + m.executionTime, 0) / callCount : 0;
            operations[key] = {
                callCount,
                averageTime
            };
            // Generate recommendations
            if (callCount > 50 && averageTime > 1000) {
                recommendations.push(`Consider optimizing ${key} - high frequency and slow execution`);
            }
        }
        return {
            modules,
            operations,
            recommendations
        };
    }
}
const wasmPerformanceWrapper = WASMPerformanceWrapper.getInstance();
function withTDAPerformanceMonitoring(operationName, inputData, wasmFunction, options) {
    return wasmPerformanceWrapper.wrapTDAOperation(operationName, inputData, wasmFunction, options);
}
function withCayleyPerformanceMonitoring(operationName, groupOrder, wasmFunction, options) {
    return wasmPerformanceWrapper.wrapCayleyOperation(operationName, groupOrder, wasmFunction, options);
}

//# sourceMappingURL=data:application/json;base64,