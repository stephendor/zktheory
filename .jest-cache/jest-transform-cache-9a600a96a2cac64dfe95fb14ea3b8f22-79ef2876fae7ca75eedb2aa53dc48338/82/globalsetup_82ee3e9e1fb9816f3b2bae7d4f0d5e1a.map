{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/tests/global-setup.js"],"sourcesContent":["/**\n * Global Setup for Mathematical Testing Suite\n * Configures environment for mathematical computation testing\n */\n\nmodule.exports = async () => {\n  console.log('\\n🧮 Setting up Mathematical Testing Environment...\\n');\n  \n  // Set up mathematical constants\n  global.__MATHEMATICAL_CONSTANTS__ = {\n    PI: Math.PI,\n    E: Math.E,\n    GOLDEN_RATIO: (1 + Math.sqrt(5)) / 2,\n    EULER_GAMMA: 0.5772156649015329,\n  };\n  \n  // Set up performance monitoring\n  global.__PERFORMANCE_BASELINE__ = {\n    startTime: Date.now(),\n    initialMemory: process.memoryUsage(),\n  };\n  \n  // Configure mathematical precision\n  global.__MATHEMATICAL_PRECISION__ = {\n    DEFAULT_TOLERANCE: 1e-10,\n    FLOAT_TOLERANCE: 1e-6,\n    STATISTICAL_TOLERANCE: 1e-3,\n  };\n  \n  // Set up test data generators\n  global.__TEST_DATA_GENERATORS__ = {\n    randomPoints: (count, bounds = { xMin: 0, xMax: 10, yMin: 0, yMax: 10 }) => {\n      return Array.from({ length: count }, () => [\n        Math.random() * (bounds.xMax - bounds.xMin) + bounds.xMin,\n        Math.random() * (bounds.yMax - bounds.yMin) + bounds.yMin\n      ]);\n    },\n    \n    circularPoints: (count, radius = 1, center = [0, 0]) => {\n      return Array.from({ length: count }, (_, i) => {\n        const angle = (2 * Math.PI * i) / count;\n        return [\n          center[0] + radius * Math.cos(angle),\n          center[1] + radius * Math.sin(angle)\n        ];\n      });\n    },\n    \n    gridPoints: (rows, cols, spacing = 1) => {\n      const points = [];\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          points.push([i * spacing, j * spacing]);\n        }\n      }\n      return points;\n    },\n    \n    clusteredPoints: (numClusters, pointsPerCluster, clusterRadius = 1) => {\n      const points = [];\n      for (let c = 0; c < numClusters; c++) {\n        const centerX = Math.random() * 20 - 10;\n        const centerY = Math.random() * 20 - 10;\n        \n        for (let p = 0; p < pointsPerCluster; p++) {\n          const angle = Math.random() * 2 * Math.PI;\n          const distance = Math.random() * clusterRadius;\n          points.push([\n            centerX + distance * Math.cos(angle),\n            centerY + distance * Math.sin(angle)\n          ]);\n        }\n      }\n      return points;\n    }\n  };\n  \n  // Set up mathematical validation functions\n  global.__MATHEMATICAL_VALIDATORS__ = {\n    isValidGroup: (group) => {\n      if (!group || typeof group !== 'object') return false;\n      if (!group.elements || !Array.isArray(group.elements)) return false;\n      if (!group.operations || !(group.operations instanceof Map)) return false;\n      if (typeof group.order !== 'number' || group.order <= 0) return false;\n      if (group.elements.length !== group.order) return false;\n      return true;\n    },\n    \n    isValidPersistenceInterval: (interval) => {\n      if (!interval || typeof interval !== 'object') return false;\n      if (typeof interval.birth !== 'number' || typeof interval.death !== 'number') return false;\n      if (typeof interval.dimension !== 'number' || !Number.isInteger(interval.dimension)) return false;\n      if (interval.birth > interval.death) return false;\n      if (interval.dimension < 0) return false;\n      return true;\n    },\n    \n    hasValidTopology: (intervals) => {\n      if (!Array.isArray(intervals)) return false;\n      \n      // Check for at least one H0 component\n      const h0Intervals = intervals.filter(i => i.dimension === 0);\n      if (h0Intervals.length === 0) return false;\n      \n      // Check that all intervals are valid\n      return intervals.every(global.__MATHEMATICAL_VALIDATORS__.isValidPersistenceInterval);\n    }\n  };\n  \n  // Set up benchmark data\n  global.__BENCHMARK_DATA__ = {\n    smallPointCloud: global.__TEST_DATA_GENERATORS__.randomPoints(10),\n    mediumPointCloud: global.__TEST_DATA_GENERATORS__.randomPoints(50),\n    largePointCloud: global.__TEST_DATA_GENERATORS__.randomPoints(200),\n    circularData: global.__TEST_DATA_GENERATORS__.circularPoints(20, 2),\n    gridData: global.__TEST_DATA_GENERATORS__.gridPoints(5, 5),\n    clusteredData: global.__TEST_DATA_GENERATORS__.clusteredPoints(3, 10, 1.5)\n  };\n  \n  // Configure test timeouts based on operation complexity\n  global.__TEST_TIMEOUTS__ = {\n    UNIT_TEST: 5000,\n    INTEGRATION_TEST: 10000,\n    PERFORMANCE_TEST: 15000,\n    E2E_TEST: 30000\n  };\n  \n  // Set up statistical testing utilities\n  global.__STATISTICAL_UTILS__ = {\n    mean: (values) => values.reduce((sum, val) => sum + val, 0) / values.length,\n    \n    variance: (values) => {\n      const mean = global.__STATISTICAL_UTILS__.mean(values);\n      return values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    },\n    \n    standardDeviation: (values) => Math.sqrt(global.__STATISTICAL_UTILS__.variance(values)),\n    \n    chiSquaredTest: (observed, expected, alpha = 0.05) => {\n      if (observed.length !== expected.length) return false;\n      \n      let chiSquared = 0;\n      for (let i = 0; i < observed.length; i++) {\n        if (expected[i] === 0) continue;\n        chiSquared += Math.pow(observed[i] - expected[i], 2) / expected[i];\n      }\n      \n      // Simplified: assume degrees of freedom = length - 1\n      // Critical value for α = 0.05 and df = length - 1 (approximation)\n      const criticalValue = 3.84 * (observed.length - 1); // Very rough approximation\n      return chiSquared < criticalValue;\n    }\n  };\n  \n  // Set up performance monitoring\n  if (typeof performance !== 'undefined' && performance.mark) {\n    performance.mark('test-suite-start');\n  }\n  \n  console.log('✅ Mathematical testing environment configured');\n  console.log(`📊 Benchmark datasets: ${Object.keys(global.__BENCHMARK_DATA__).length} prepared`);\n  console.log(`🎯 Mathematical precision: ${global.__MATHEMATICAL_PRECISION__.DEFAULT_TOLERANCE}`);\n  console.log(`⏱️  Performance monitoring: enabled\\n`);\n};"],"names":["module","exports","console","log","global","__MATHEMATICAL_CONSTANTS__","PI","Math","E","GOLDEN_RATIO","sqrt","EULER_GAMMA","__PERFORMANCE_BASELINE__","startTime","Date","now","initialMemory","process","memoryUsage","__MATHEMATICAL_PRECISION__","DEFAULT_TOLERANCE","FLOAT_TOLERANCE","STATISTICAL_TOLERANCE","__TEST_DATA_GENERATORS__","randomPoints","count","bounds","xMin","xMax","yMin","yMax","Array","from","length","random","circularPoints","radius","center","_","i","angle","cos","sin","gridPoints","rows","cols","spacing","points","j","push","clusteredPoints","numClusters","pointsPerCluster","clusterRadius","c","centerX","centerY","p","distance","__MATHEMATICAL_VALIDATORS__","isValidGroup","group","elements","isArray","operations","Map","order","isValidPersistenceInterval","interval","birth","death","dimension","Number","isInteger","hasValidTopology","intervals","h0Intervals","filter","every","__BENCHMARK_DATA__","smallPointCloud","mediumPointCloud","largePointCloud","circularData","gridData","clusteredData","__TEST_TIMEOUTS__","UNIT_TEST","INTEGRATION_TEST","PERFORMANCE_TEST","E2E_TEST","__STATISTICAL_UTILS__","mean","values","reduce","sum","val","variance","pow","standardDeviation","chiSquaredTest","observed","expected","alpha","chiSquared","criticalValue","performance","mark","Object","keys"],"mappings":"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"}