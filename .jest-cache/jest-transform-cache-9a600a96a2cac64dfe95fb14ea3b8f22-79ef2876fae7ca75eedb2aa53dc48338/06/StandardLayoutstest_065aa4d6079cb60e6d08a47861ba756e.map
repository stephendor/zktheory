{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/__tests__/lib/StandardLayouts.test.ts"],"sourcesContent":["/**\n * Comprehensive Jest Unit Tests for StandardLayouts\n * Tests mathematical accuracy, geometric properties, and layout generation algorithms\n */\n\nimport { \n  StandardLayoutGenerator,\n  StandardLayout,\n  LayoutPosition \n} from '@/lib/StandardLayouts';\nimport { GroupDatabase } from '@/lib/GroupDatabase';\nimport { Group } from '@/lib/GroupTheory';\nimport { \n  mathematicalMatchers,\n  MATHEMATICAL_PRECISION,\n  PrecisionValidator,\n  aggregateValidationResults\n} from '../utils/mathematicalValidation';\n\n// Extend Jest matchers\nexpect.extend(mathematicalMatchers);\n\ndescribe('StandardLayoutGenerator', () => {\n  \n  describe('Klein Four Group Layout (V4)', () => {\n    let layout: StandardLayout;\n\n    beforeEach(() => {\n      layout = StandardLayoutGenerator.getKleinFourLayout();\n    });\n\n    test('generates correct V4 group structure', () => {\n      expect(layout).toHaveProperty('positions');\n      expect(layout).toHaveProperty('description');\n      expect(layout).toHaveProperty('generators');\n      \n      expect(layout.description).toBe(\"Klein Four Group - Square arrangement\");\n      expect(layout.generators).toEqual(['a', 'b']);\n    });\n\n    test('validates V4 element positioning', () => {\n      const { positions } = layout;\n      \n      // Check all required elements present\n      expect(positions).toHaveProperty('e'); // Identity\n      expect(positions).toHaveProperty('a'); // First generator\n      expect(positions).toHaveProperty('b'); // Second generator\n      expect(positions).toHaveProperty('c'); // Product ab\n      \n      // Validate coordinate ranges [0, 1]\n      Object.values(positions).forEach(pos => {\n        expect(pos.x).toBeGreaterThanOrEqual(0);\n        expect(pos.x).toBeLessThanOrEqual(1);\n        expect(pos.y).toBeGreaterThanOrEqual(0);\n        expect(pos.y).toBeLessThanOrEqual(1);\n        expect(Number.isFinite(pos.x)).toBe(true);\n        expect(Number.isFinite(pos.y)).toBe(true);\n      });\n    });\n\n    test('verifies V4 geometric properties', () => {\n      const { positions } = layout;\n      \n      // Identity should be at center\n      expect(positions.e.x).toBeCloseTo(0.5, 5);\n      expect(positions.e.y).toBeCloseTo(0.5, 5);\n      \n      // Verify rectangular arrangement constraints\n      expect(positions.a.x).toBeLessThan(positions.e.x); // Left of center\n      expect(positions.b.x).toBeGreaterThan(positions.e.x); // Right of center\n      expect(positions.c.y).toBeLessThan(positions.e.y); // Above center\n    });\n\n    test('validates symmetry properties', () => {\n      const { positions } = layout;\n      \n      // Calculate distances from center\n      const distances = {\n        a: Math.sqrt((positions.a.x - 0.5) ** 2 + (positions.a.y - 0.5) ** 2),\n        b: Math.sqrt((positions.b.x - 0.5) ** 2 + (positions.b.y - 0.5) ** 2),\n        c: Math.sqrt((positions.c.x - 0.5) ** 2 + (positions.c.y - 0.5) ** 2)\n      };\n      \n      // Non-identity elements should be equidistant from center\n      expect(distances.a).toBeCloseTo(distances.b, 5);\n      expect(distances.a).toBeCloseTo(distances.c, 5);\n    });\n\n    test('ensures unique positioning', () => {\n      const { positions } = layout;\n      const coords = Object.values(positions).map(p => `${p.x},${p.y}`);\n      const uniqueCoords = new Set(coords);\n      \n      expect(uniqueCoords.size).toBe(coords.length);\n    });\n  });\n\n  describe('Quaternion Group Layout (Q8)', () => {\n    let layout: StandardLayout;\n\n    beforeEach(() => {\n      layout = StandardLayoutGenerator.getQuaternionLayout();\n    });\n\n    test('generates correct Q8 group structure', () => {\n      expect(layout.description).toBe(\"Quaternion Group Q8 - Cube projection\");\n      expect(layout.generators).toEqual(['i', 'j']);\n      \n      // Should have 8 elements\n      expect(Object.keys(layout.positions)).toHaveLength(8);\n    });\n\n    test('validates Q8 element positioning', () => {\n      const { positions } = layout;\n      const expectedElements = ['1', '-1', 'i', '-i', 'j', '-j', 'k', '-k'];\n      \n      expectedElements.forEach(element => {\n        expect(positions).toHaveProperty(element);\n        expect(Number.isFinite(positions[element].x)).toBe(true);\n        expect(Number.isFinite(positions[element].y)).toBe(true);\n      });\n    });\n\n    test('verifies Q8 quaternion pairing properties', () => {\n      const { positions } = layout;\n      \n      // Quaternion opposites should have specific geometric relationships\n      const pairs = [\n        ['1', '-1'], ['i', '-i'], ['j', '-j'], ['k', '-k']\n      ];\n      \n      pairs.forEach(([pos, neg]) => {\n        const distance = Math.sqrt(\n          (positions[pos].x - positions[neg].x) ** 2 + \n          (positions[pos].y - positions[neg].y) ** 2\n        );\n        expect(distance).toBeGreaterThan(0.1); // Should be separated\n      });\n    });\n\n    test('validates cube projection geometry', () => {\n      const { positions } = layout;\n      \n      // Identity at center\n      expect(positions['1'].x).toBeCloseTo(0.5, 5);\n      expect(positions['1'].y).toBeCloseTo(0.5, 5);\n      \n      // All positions should be in [0,1] × [0,1]\n      Object.values(positions).forEach(pos => {\n        expect(pos.x).toBeGreaterThanOrEqual(0);\n        expect(pos.x).toBeLessThanOrEqual(1);\n        expect(pos.y).toBeGreaterThanOrEqual(0);\n        expect(pos.y).toBeLessThanOrEqual(1);\n      });\n    });\n\n    test('ensures mathematical consistency with quaternion relations', () => {\n      const { positions } = layout;\n      \n      // Verify generators are present and positioned\n      expect(positions).toHaveProperty('i');\n      expect(positions).toHaveProperty('j');\n      expect(positions).toHaveProperty('k');\n      \n      // Check that i, j, k are distributed around the layout\n      const iPos = positions['i'];\n      const jPos = positions['j'];\n      const kPos = positions['k'];\n      \n      // They should form a non-degenerate triangle\n      const area = Math.abs(\n        (iPos.x * (jPos.y - kPos.y) + \n         jPos.x * (kPos.y - iPos.y) + \n         kPos.x * (iPos.y - jPos.y)) / 2\n      );\n      expect(area).toBeGreaterThan(0.01); // Non-zero area\n    });\n  });\n\n  describe('Dihedral Group Layouts', () => {\n    \n    describe('Dihedral D3 (S3) Layout', () => {\n      let layout: StandardLayout;\n\n      beforeEach(() => {\n        layout = StandardLayoutGenerator.getDihedral3Layout();\n      });\n\n      test('generates correct D3 group structure', () => {\n        expect(layout.description).toBe(\"Dihedral D3 (S3) - Triangular symmetry\");\n        expect(layout.generators).toEqual(['r', 's']);\n        expect(Object.keys(layout.positions)).toHaveLength(6);\n      });\n\n      test('validates D3 element positioning', () => {\n        const { positions } = layout;\n        const expectedElements = ['e', 'r', 'r²', 's', 'sr', 'sr²'];\n        \n        expectedElements.forEach(element => {\n          expect(positions).toHaveProperty(element);\n        });\n      });\n\n      test('verifies triangular symmetry properties', () => {\n        const { positions } = layout;\n        \n        // Identity at center\n        expect(positions.e.x).toBeCloseTo(0.5, 5);\n        expect(positions.e.y).toBeCloseTo(0.5, 5);\n        \n        // Rotation elements should form a pattern\n        const rotations = [positions.r, positions['r²']];\n        rotations.forEach(pos => {\n          const distance = Math.sqrt((pos.x - 0.5) ** 2 + (pos.y - 0.5) ** 2);\n          expect(distance).toBeGreaterThan(0.1); // Away from center\n        });\n      });\n\n      test('validates reflection arrangement', () => {\n        const { positions } = layout;\n        const reflections = ['s', 'sr', 'sr²'];\n        \n        // Reflections should be positioned to show triangular symmetry\n        reflections.forEach(refl => {\n          expect(positions[refl].x).toBeGreaterThanOrEqual(0);\n          expect(positions[refl].x).toBeLessThanOrEqual(1);\n          expect(positions[refl].y).toBeGreaterThanOrEqual(0);\n          expect(positions[refl].y).toBeLessThanOrEqual(1);\n        });\n      });\n    });\n\n    describe('Dihedral D4 Layout', () => {\n      let layout: StandardLayout;\n\n      beforeEach(() => {\n        layout = StandardLayoutGenerator.getDihedral4Layout();\n      });\n\n      test('generates correct D4 group structure', () => {\n        expect(layout.description).toBe(\"Dihedral D4 - Square symmetry\");\n        expect(layout.generators).toEqual(['r', 's']);\n        expect(Object.keys(layout.positions)).toHaveLength(8);\n      });\n\n      test('validates D4 square symmetry properties', () => {\n        const { positions } = layout;\n        \n        // Check rotation elements form a square pattern\n        const rotations = [positions.r, positions['r²'], positions['r³']];\n        const center = positions.e;\n        \n        // Calculate distances from center for rotations\n        const distances = rotations.map(pos => \n          Math.sqrt((pos.x - center.x) ** 2 + (pos.y - center.y) ** 2)\n        );\n        \n        // All rotations should be equidistant from center\n        expect(distances[0]).toBeCloseTo(distances[1], 5);\n        expect(distances[0]).toBeCloseTo(distances[2], 5);\n      });\n\n      test('verifies square geometric constraints', () => {\n        const { positions } = layout;\n        \n        // Check that rotations approximate a square arrangement\n        const r = positions.r;\n        const r2 = positions['r²'];\n        const r3 = positions['r³'];\n        \n        // Adjacent rotations should be roughly equidistant\n        const d1 = Math.sqrt((r.x - r2.x) ** 2 + (r.y - r2.y) ** 2);\n        const d2 = Math.sqrt((r2.x - r3.x) ** 2 + (r2.y - r3.y) ** 2);\n        \n        expect(Math.abs(d1 - d2)).toBeLessThan(0.1); // Similar distances\n      });\n    });\n  });\n\n  describe('Cyclic Group Circular Layouts', () => {\n    \n    test.each([3, 4, 5, 6, 8, 12])('generates valid C%d circular layout', (n) => {\n      const layout = StandardLayoutGenerator.getCyclicLayout(n);\n      \n      expect(layout.description).toBe(`Cyclic C${n} - Circular arrangement`);\n      expect(layout.generators).toEqual(['1']);\n      expect(Object.keys(layout.positions)).toHaveLength(n);\n    });\n\n    test('validates circular positioning mathematics for C6', () => {\n      const layout = StandardLayoutGenerator.getCyclicLayout(6);\n      const { positions } = layout;\n      \n      // Check all positions are on a circle\n      const radius = 0.35; // From implementation\n      const center = { x: 0.5, y: 0.5 };\n      \n      Object.values(positions).forEach(pos => {\n        const distance = Math.sqrt((pos.x - center.x) ** 2 + (pos.y - center.y) ** 2);\n        expect(distance).toBeCloseTo(radius, 4);\n      });\n    });\n\n    test('verifies angular distribution for cyclic groups', () => {\n      const n = 8;\n      const layout = StandardLayoutGenerator.getCyclicLayout(n);\n      const { positions } = layout;\n      \n      // Calculate angles for each position\n      const center = { x: 0.5, y: 0.5 };\n      const angles = Object.keys(positions).sort((a, b) => parseInt(a) - parseInt(b)).map(key => {\n        const pos = positions[key];\n        let angle = Math.atan2(pos.y - center.y, pos.x - center.x);\n        // Normalize to [0, 2π] and account for starting from top (-π/2)\n        angle = (angle + Math.PI / 2 + 2 * Math.PI) % (2 * Math.PI);\n        return angle;\n      });\n      \n      // Check distribution - consecutive angles should be evenly spaced\n      const expectedAngleStep = 2 * Math.PI / n;\n      \n      for (let i = 0; i < angles.length; i++) {\n        const expectedAngle = (expectedAngleStep * i) % (2 * Math.PI);\n        expect(angles[i]).toBeCloseTo(expectedAngle, 1);\n      }\n    });\n\n    test('handles edge cases for small cyclic groups', () => {\n      // C1 - single element\n      const c1 = StandardLayoutGenerator.getCyclicLayout(1);\n      expect(Object.keys(c1.positions)).toHaveLength(1);\n      \n      // Check position is roughly at top (allowing for floating point precision)\n      const pos = c1.positions['0'];\n      expect(pos.x).toBeCloseTo(0.5, 5);\n      expect(pos.y).toBeCloseTo(0.15, 5);\n      \n      // C2 - two elements\n      const c2 = StandardLayoutGenerator.getCyclicLayout(2);\n      expect(Object.keys(c2.positions)).toHaveLength(2);\n    });\n  });\n\n  describe('Direct Product Layouts', () => {\n    \n    test.each([\n      [2, 2], [2, 3], [3, 3], [2, 4], [3, 4]\n    ])('generates valid C%d × C%d grid layout', (m, n) => {\n      const layout = StandardLayoutGenerator.getDirectProductLayout(m, n);\n      \n      expect(layout.description).toBe(`Direct Product C${m} × C${n} - Grid arrangement`);\n      expect(layout.generators).toEqual(['(1,0)', '(0,1)']);\n      expect(Object.keys(layout.positions)).toHaveLength(m * n);\n    });\n\n    test('validates grid positioning mathematics for C3 × C2', () => {\n      const layout = StandardLayoutGenerator.getDirectProductLayout(3, 2);\n      const { positions } = layout;\n      \n      // Check grid structure\n      const expectedPositions = [\n        '(0,0)', '(0,1)', '(1,0)', '(1,1)', '(2,0)', '(2,1)'\n      ];\n      \n      expectedPositions.forEach(pos => {\n        expect(positions).toHaveProperty(pos);\n      });\n      \n      // Verify positions form a proper grid\n      const margin = 0.1;\n      const availableWidth = 1 - 2 * margin;\n      const availableHeight = 1 - 2 * margin;\n      \n      // Check some specific positions\n      expect(positions['(0,0)'].x).toBeCloseTo(margin, 5);\n      expect(positions['(0,0)'].y).toBeCloseTo(margin, 5);\n      expect(positions['(2,1)'].x).toBeCloseTo(margin + availableWidth, 5);\n      expect(positions['(2,1)'].y).toBeCloseTo(margin + availableHeight, 5);\n    });\n\n    test('handles edge case for 1×n and n×1 products', () => {\n      const layout1xn = StandardLayoutGenerator.getDirectProductLayout(1, 3);\n      expect(Object.keys(layout1xn.positions)).toHaveLength(3);\n      \n      const layoutnx1 = StandardLayoutGenerator.getDirectProductLayout(3, 1);\n      expect(Object.keys(layoutnx1.positions)).toHaveLength(3);\n    });\n  });\n\n  describe('Alternating A4 Layout', () => {\n    let layout: StandardLayout;\n\n    beforeEach(() => {\n      layout = StandardLayoutGenerator.getAlternating4Layout();\n    });\n\n    test('generates correct A4 group structure', () => {\n      expect(layout.description).toBe(\"Alternating A4 - Tetrahedral arrangement\");\n      expect(layout.generators).toEqual(['(123)', '(12)(34)']);\n      expect(Object.keys(layout.positions)).toHaveLength(12);\n    });\n\n    test('validates A4 element positioning', () => {\n      const { positions } = layout;\n      const expectedElements = [\n        'e', '(123)', '(132)', '(124)', '(142)', '(134)', \n        '(143)', '(234)', '(243)', '(12)(34)', '(13)(24)', '(14)(23)'\n      ];\n      \n      expectedElements.forEach(element => {\n        expect(positions).toHaveProperty(element);\n      });\n    });\n\n    test('verifies tetrahedral symmetry properties', () => {\n      const { positions } = layout;\n      \n      // Identity at center\n      expect(positions.e.x).toBeCloseTo(0.5, 5);\n      expect(positions.e.y).toBeCloseTo(0.5, 5);\n      \n      // Check that 3-cycles and double transpositions are positioned appropriately\n      const threeCycles = ['(123)', '(132)', '(124)', '(142)', '(134)', '(143)', '(234)', '(243)'];\n      const doubleTranspositions = ['(12)(34)', '(13)(24)', '(14)(23)'];\n      \n      // All positions should be within bounds\n      [...threeCycles, ...doubleTranspositions].forEach(element => {\n        const pos = positions[element];\n        expect(pos.x).toBeGreaterThanOrEqual(0);\n        expect(pos.x).toBeLessThanOrEqual(1);\n        expect(pos.y).toBeGreaterThanOrEqual(0);\n        expect(pos.y).toBeLessThanOrEqual(1);\n      });\n    });\n  });\n\n  describe('Group Type Detection and Layout Selection', () => {\n    \n    test('recognizes and generates correct layouts for standard groups', () => {\n      const testCases = [\n        { name: 'C1', expectedType: 'trivial' },\n        { name: 'V4', expectedType: 'klein' },\n        { name: 'Klein4', expectedType: 'klein' },\n        { name: 'Q8', expectedType: 'quaternion' },\n        { name: 'Q4', expectedType: 'quaternion' },\n        { name: 'D3', expectedType: 'dihedral3' },\n        { name: 'S3', expectedType: 'dihedral3' },\n        { name: 'D4', expectedType: 'dihedral4' },\n        { name: 'A4', expectedType: 'alternating4' }\n      ];\n      \n      testCases.forEach(({ name, expectedType }) => {\n        const layout = StandardLayoutGenerator.getStandardLayout(name, 0);\n        expect(layout).not.toBeNull();\n        expect(layout?.positions).toBeDefined();\n      });\n    });\n\n    test('handles cyclic group pattern matching', () => {\n      for (let n = 2; n <= 20; n++) {\n        const layout = StandardLayoutGenerator.getStandardLayout(`C${n}`, n);\n        expect(layout).not.toBeNull();\n        expect(layout?.description).toContain(`Cyclic C${n}`);\n        expect(Object.keys(layout?.positions || {})).toHaveLength(n);\n      }\n    });\n\n    test('handles dihedral group pattern matching', () => {\n      const d3 = StandardLayoutGenerator.getStandardLayout('D3', 6);\n      expect(d3).not.toBeNull();\n      expect(d3?.description).toContain('D3');\n      \n      const d4 = StandardLayoutGenerator.getStandardLayout('D4', 8);\n      expect(d4).not.toBeNull();\n      expect(d4?.description).toContain('D4');\n    });\n\n    test('handles direct product pattern matching', () => {\n      const testCases = ['C2xC2', 'C2xC3', 'C3xC2', 'C2xC4'];\n      \n      testCases.forEach(groupName => {\n        const layout = StandardLayoutGenerator.getStandardLayout(groupName, 0);\n        expect(layout).not.toBeNull();\n        expect(layout?.description).toContain('Direct Product');\n      });\n    });\n\n    test('returns null for unknown group patterns', () => {\n      const unknownGroups = ['InvalidGroup', 'X7', 'Z99', 'ComplexGroup'];\n      \n      unknownGroups.forEach(name => {\n        const layout = StandardLayoutGenerator.getStandardLayout(name, 0);\n        expect(layout).toBeNull();\n      });\n    });\n\n    test('handles edge cases in pattern matching', () => {\n      // Very large cyclic groups\n      const c50 = StandardLayoutGenerator.getStandardLayout('C50', 50);\n      expect(c50).toBeNull(); // Should reject groups > 20\n      \n      // Malformed names\n      const malformed = StandardLayoutGenerator.getStandardLayout('C', 0);\n      expect(malformed).toBeNull();\n      \n      const malformed2 = StandardLayoutGenerator.getStandardLayout('CxC', 0);\n      expect(malformed2).toBeNull();\n    });\n  });\n\n  describe('Layout Position Calculations', () => {\n    \n    test('validates mathematical accuracy of coordinate generation', () => {\n      const tolerance = MATHEMATICAL_PRECISION.FLOAT_TOLERANCE;\n      \n      // Test cyclic group positions using trigonometry\n      const n = 6;\n      const layout = StandardLayoutGenerator.getCyclicLayout(n);\n      const radius = 0.35;\n      const center = { x: 0.5, y: 0.5 };\n      \n      Object.keys(layout.positions).forEach((key, index) => {\n        const expectedAngle = (2 * Math.PI * index) / n - Math.PI / 2;\n        const expectedX = center.x + radius * Math.cos(expectedAngle);\n        const expectedY = center.y + radius * Math.sin(expectedAngle);\n        \n        const actual = layout.positions[key];\n        expect(Math.abs(actual.x - expectedX)).toBeLessThan(tolerance);\n        expect(Math.abs(actual.y - expectedY)).toBeLessThan(tolerance);\n      });\n    });\n\n    test('verifies coordinate precision and stability', () => {\n      // Test multiple generations produce identical results\n      const layouts = Array.from({ length: 5 }, () => \n        StandardLayoutGenerator.getKleinFourLayout()\n      );\n      \n      const firstLayout = layouts[0];\n      layouts.slice(1).forEach(layout => {\n        Object.keys(firstLayout.positions).forEach(key => {\n          expect(layout.positions[key].x).toBe(firstLayout.positions[key].x);\n          expect(layout.positions[key].y).toBe(firstLayout.positions[key].y);\n        });\n      });\n    });\n\n    test('validates floating point stability in calculations', () => {\n      // Test with edge cases that might cause precision issues\n      const testSizes = [7, 11, 13, 17]; // Prime numbers\n      \n      testSizes.forEach(n => {\n        const layout = StandardLayoutGenerator.getCyclicLayout(n);\n        Object.values(layout.positions).forEach(pos => {\n          expect(Number.isFinite(pos.x)).toBe(true);\n          expect(Number.isFinite(pos.y)).toBe(true);\n          expect(Number.isNaN(pos.x)).toBe(false);\n          expect(Number.isNaN(pos.y)).toBe(false);\n        });\n      });\n    });\n  });\n\n  describe('Geometric Properties and Visual Quality', () => {\n    \n    test('validates symmetry preservation in layouts', () => {\n      // Test Klein Four Group symmetry\n      const v4 = StandardLayoutGenerator.getKleinFourLayout();\n      const center = v4.positions.e;\n      \n      // Calculate symmetry measures\n      const nonIdentityElements = ['a', 'b', 'c'];\n      const distances = nonIdentityElements.map(elem => {\n        const pos = v4.positions[elem];\n        return Math.sqrt((pos.x - center.x) ** 2 + (pos.y - center.y) ** 2);\n      });\n      \n      // Check symmetry: all distances should be equal (within tolerance)\n      const avgDistance = distances.reduce((a, b) => a + b) / distances.length;\n      distances.forEach(d => {\n        expect(Math.abs(d - avgDistance)).toBeLessThan(0.01);\n      });\n    });\n\n    test('validates visual balance and spacing', () => {\n      const layouts = [\n        StandardLayoutGenerator.getKleinFourLayout(),\n        StandardLayoutGenerator.getQuaternionLayout(),\n        StandardLayoutGenerator.getDihedral3Layout(),\n        StandardLayoutGenerator.getCyclicLayout(8)\n      ];\n      \n      layouts.forEach(layout => {\n        const positions = Object.values(layout.positions);\n        \n        // Check minimum spacing between elements\n        const minDistance = positions.reduce((min, pos1) => {\n          return positions.reduce((minInner, pos2) => {\n            if (pos1 === pos2) return minInner;\n            const dist = Math.sqrt((pos1.x - pos2.x) ** 2 + (pos1.y - pos2.y) ** 2);\n            return Math.min(minInner, dist);\n          }, min);\n        }, Infinity);\n        \n        expect(minDistance).toBeGreaterThan(0.05); // Minimum spacing\n      });\n    });\n\n    test('validates bounding box utilization', () => {\n      const layouts = [\n        StandardLayoutGenerator.getQuaternionLayout(),\n        StandardLayoutGenerator.getDihedral4Layout(),\n        StandardLayoutGenerator.getAlternating4Layout()\n      ];\n      \n      layouts.forEach(layout => {\n        const positions = Object.values(layout.positions);\n        \n        // Calculate bounding box\n        const minX = Math.min(...positions.map(p => p.x));\n        const maxX = Math.max(...positions.map(p => p.x));\n        const minY = Math.min(...positions.map(p => p.y));\n        const maxY = Math.max(...positions.map(p => p.y));\n        \n        // Should use reasonable portion of [0,1] × [0,1] space\n        const xRange = maxX - minX;\n        const yRange = maxY - minY;\n        \n        expect(xRange).toBeGreaterThan(0.1); // Not too compressed\n        expect(yRange).toBeGreaterThan(0.1);\n        expect(xRange).toBeLessThan(1.0); // Within bounds\n        expect(yRange).toBeLessThan(1.0);\n      });\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    \n    test('handles malformed group names gracefully', () => {\n      const malformedNames = [\n        '', '   ', 'C', 'D', 'CxC', 'C2x', 'xC3', 'C-1', 'D0'\n      ];\n      \n      malformedNames.forEach(name => {\n        const layout = StandardLayoutGenerator.getStandardLayout(name, 0);\n        expect(layout).toBeNull();\n      });\n    });\n\n    test('handles boundary conditions for cyclic groups', () => {\n      // Very small groups\n      const c1 = StandardLayoutGenerator.getCyclicLayout(1);\n      expect(Object.keys(c1.positions)).toHaveLength(1);\n      \n      // Groups at the boundary\n      const c20 = StandardLayoutGenerator.getCyclicLayout(20);\n      expect(Object.keys(c20.positions)).toHaveLength(20);\n      \n      // Verify positions are still valid\n      Object.values(c20.positions).forEach(pos => {\n        expect(pos.x).toBeGreaterThanOrEqual(0);\n        expect(pos.x).toBeLessThanOrEqual(1);\n        expect(pos.y).toBeGreaterThanOrEqual(0);\n        expect(pos.y).toBeLessThanOrEqual(1);\n      });\n    });\n\n    test('handles edge cases in direct product layouts', () => {\n      // Single factor groups\n      const c1x1 = StandardLayoutGenerator.getDirectProductLayout(1, 1);\n      expect(Object.keys(c1x1.positions)).toHaveLength(1);\n      \n      // Ensure no division by zero or invalid coordinates\n      Object.values(c1x1.positions).forEach(pos => {\n        expect(Number.isFinite(pos.x)).toBe(true);\n        expect(Number.isFinite(pos.y)).toBe(true);\n      });\n    });\n\n    test('validates unknown group types return null', () => {\n      const unknownTypes = [\n        'PSL(2,7)', 'GL(2,3)', 'Quaternion16', 'DicyclicD8', 'AlternatingA5'\n      ];\n      \n      unknownTypes.forEach(name => {\n        const layout = StandardLayoutGenerator.getStandardLayout(name, 0);\n        expect(layout).toBeNull();\n      });\n    });\n  });\n\n  describe('Integration with Group Theory', () => {\n    \n    test('validates layouts match actual group structures from GroupDatabase', () => {\n      const testGroups = ['C3', 'C4', 'V4', 'S3'];\n      \n      testGroups.forEach(groupName => {\n        const group = GroupDatabase.getGroup(groupName);\n        const layout = StandardLayoutGenerator.getStandardLayout(groupName, group?.order || 0);\n        \n        if (group && layout) {\n          // Layout should have position for each group element\n          expect(Object.keys(layout.positions).length).toBeLessThanOrEqual(group.order);\n          \n          // Generators should exist in group\n          layout.generators?.forEach(gen => {\n            if (gen !== '1') { // Skip generic generator notation\n              const hasElement = group.elements.some(elem => \n                elem.id === gen || elem.label === gen\n              );\n              // This is informational - layouts may use different notation\n            }\n          });\n        }\n      });\n    });\n\n    test('verifies generator consistency between layouts and group theory', () => {\n      // Test that layout generators make mathematical sense\n      const v4Layout = StandardLayoutGenerator.getKleinFourLayout();\n      expect(v4Layout.generators).toHaveLength(2); // V4 needs 2 generators\n      \n      const c5Layout = StandardLayoutGenerator.getCyclicLayout(5);\n      expect(c5Layout.generators).toHaveLength(1); // Cyclic groups need 1 generator\n      \n      const d3Layout = StandardLayoutGenerator.getDihedral3Layout();\n      expect(d3Layout.generators).toHaveLength(2); // Dihedral groups need 2 generators\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    \n    test('generates layouts efficiently for various group sizes', () => {\n      const testCases = [\n        { name: 'C8', order: 8 },\n        { name: 'C12', order: 12 },\n        { name: 'D4', order: 8 },\n        { name: 'Q8', order: 8 }\n      ];\n      \n      testCases.forEach(({ name, order }) => {\n        const startTime = performance.now();\n        const layout = StandardLayoutGenerator.getStandardLayout(name, order);\n        const endTime = performance.now();\n        \n        expect(endTime - startTime).toBeLessThan(10); // Should be fast\n        expect(layout).not.toBeNull();\n      });\n    });\n\n    test('handles memory efficiently for multiple layout generations', () => {\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      \n      // Generate many layouts\n      for (let i = 0; i < 100; i++) {\n        StandardLayoutGenerator.getCyclicLayout(8);\n        StandardLayoutGenerator.getKleinFourLayout();\n        StandardLayoutGenerator.getQuaternionLayout();\n      }\n      \n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      const memoryIncrease = finalMemory - initialMemory;\n      \n      // Memory increase should be reasonable (less than 5MB)\n      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024);\n    });\n\n    test('validates deterministic layout generation', () => {\n      // Same input should always produce same output\n      const layouts1 = Array.from({ length: 5 }, () => \n        StandardLayoutGenerator.getCyclicLayout(6)\n      );\n      \n      const layouts2 = Array.from({ length: 5 }, () => \n        StandardLayoutGenerator.getCyclicLayout(6)\n      );\n      \n      layouts1.forEach((layout1, index) => {\n        const layout2 = layouts2[index];\n        Object.keys(layout1.positions).forEach(key => {\n          expect(layout1.positions[key]).toEqual(layout2.positions[key]);\n        });\n      });\n    });\n  });\n\n  describe('Mathematical Rigor and Validation', () => {\n    \n    test('validates coordinate bounds and finite values', () => {\n      const allLayouts = [\n        StandardLayoutGenerator.getKleinFourLayout(),\n        StandardLayoutGenerator.getQuaternionLayout(),\n        StandardLayoutGenerator.getDihedral3Layout(),\n        StandardLayoutGenerator.getDihedral4Layout(),\n        StandardLayoutGenerator.getAlternating4Layout(),\n        StandardLayoutGenerator.getCyclicLayout(7),\n        StandardLayoutGenerator.getDirectProductLayout(2, 3)\n      ];\n      \n      allLayouts.forEach(layout => {\n        Object.values(layout.positions).forEach(pos => {\n          // Coordinates should be in [0, 1]\n          expect(pos.x).toBeGreaterThanOrEqual(0);\n          expect(pos.x).toBeLessThanOrEqual(1);\n          expect(pos.y).toBeGreaterThanOrEqual(0);\n          expect(pos.y).toBeLessThanOrEqual(1);\n          \n          // Coordinates should be finite numbers\n          expect(Number.isFinite(pos.x)).toBe(true);\n          expect(Number.isFinite(pos.y)).toBe(true);\n          expect(Number.isNaN(pos.x)).toBe(false);\n          expect(Number.isNaN(pos.y)).toBe(false);\n        });\n      });\n    });\n\n    test('validates mathematical consistency across layout types', () => {\n      // Identity elements should be consistently positioned\n      const layoutsWithIdentity = [\n        StandardLayoutGenerator.getKleinFourLayout(),\n        StandardLayoutGenerator.getDihedral3Layout(),\n        StandardLayoutGenerator.getDihedral4Layout(),\n        StandardLayoutGenerator.getAlternating4Layout()\n      ];\n      \n      layoutsWithIdentity.forEach(layout => {\n        const identityPos = layout.positions.e;\n        expect(identityPos).toBeDefined();\n        \n        // Identity should be roughly centered\n        expect(identityPos.x).toBeCloseTo(0.5, 1);\n        expect(identityPos.y).toBeCloseTo(0.5, 1);\n      });\n    });\n\n    test('validates layout properties satisfy group theory constraints', () => {\n      // V4 should have 4 elements in square-like arrangement\n      const v4 = StandardLayoutGenerator.getKleinFourLayout();\n      expect(Object.keys(v4.positions)).toHaveLength(4);\n      \n      // Q8 should have 8 elements with quaternion structure\n      const q8 = StandardLayoutGenerator.getQuaternionLayout();\n      expect(Object.keys(q8.positions)).toHaveLength(8);\n      \n      // Cyclic groups should have n elements in circular arrangement\n      for (let n = 3; n <= 8; n++) {\n        const cn = StandardLayoutGenerator.getCyclicLayout(n);\n        expect(Object.keys(cn.positions)).toHaveLength(n);\n      }\n    });\n  });\n});"],"names":["expect","extend","mathematicalMatchers","describe","layout","beforeEach","StandardLayoutGenerator","getKleinFourLayout","test","toHaveProperty","description","toBe","generators","toEqual","positions","Object","values","forEach","pos","x","toBeGreaterThanOrEqual","toBeLessThanOrEqual","y","Number","isFinite","e","toBeCloseTo","a","toBeLessThan","b","toBeGreaterThan","c","distances","Math","sqrt","coords","map","p","uniqueCoords","Set","size","length","getQuaternionLayout","keys","toHaveLength","expectedElements","element","pairs","neg","distance","iPos","jPos","kPos","area","abs","getDihedral3Layout","rotations","r","reflections","refl","getDihedral4Layout","center","r2","r3","d1","d2","each","n","getCyclicLayout","radius","angles","sort","parseInt","key","angle","atan2","PI","expectedAngleStep","i","expectedAngle","c1","c2","m","getDirectProductLayout","expectedPositions","margin","availableWidth","availableHeight","layout1xn","layoutnx1","getAlternating4Layout","threeCycles","doubleTranspositions","testCases","name","expectedType","getStandardLayout","not","toBeNull","toBeDefined","toContain","d3","d4","groupName","unknownGroups","c50","malformed","malformed2","tolerance","MATHEMATICAL_PRECISION","FLOAT_TOLERANCE","index","expectedX","cos","expectedY","sin","actual","layouts","Array","from","firstLayout","slice","testSizes","isNaN","v4","nonIdentityElements","elem","avgDistance","reduce","d","minDistance","min","pos1","minInner","pos2","dist","Infinity","minX","maxX","max","minY","maxY","xRange","yRange","malformedNames","c20","c1x1","unknownTypes","testGroups","group","GroupDatabase","getGroup","order","gen","hasElement","elements","some","id","label","v4Layout","c5Layout","d3Layout","startTime","performance","now","endTime","initialMemory","memory","usedJSHeapSize","finalMemory","memoryIncrease","layouts1","layouts2","layout1","layout2","allLayouts","layoutsWithIdentity","identityPos","q8","cn"],"mappings":"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"}