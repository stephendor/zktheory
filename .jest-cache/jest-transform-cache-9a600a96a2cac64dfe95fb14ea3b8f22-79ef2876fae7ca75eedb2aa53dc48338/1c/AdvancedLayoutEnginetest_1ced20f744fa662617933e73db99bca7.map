{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/__tests__/lib/AdvancedLayoutEngine.test.ts"],"sourcesContent":["/**\n * Comprehensive Unit Tests for AdvancedLayoutEngine\n * Tests layout strategy generation, mathematical accuracy, and performance\n */\n\nimport {\n  AdvancedLayoutEngine,\n  type AdvancedLayout,\n  type LayoutStrategy,\n  type LayoutDirection,\n  type LayoutNestingLevel\n} from '@/lib/AdvancedLayoutEngine';\n\nimport { Group, GroupElement, GroupTheoryLibrary } from '@/lib/GroupTheory';\nimport { GroupDatabase } from '@/lib/GroupDatabase';\nimport { StandardLayoutGenerator } from '@/lib/StandardLayouts';\n\nimport {\n  GroupTheoryValidator,\n  PrecisionValidator,\n  PerformanceValidator,\n  mathematicalMatchers,\n  MATHEMATICAL_PRECISION,\n  aggregateValidationResults\n} from '../utils/mathematicalValidation';\n\n// Extend Jest matchers\nexpect.extend(mathematicalMatchers);\n\ndescribe('AdvancedLayoutEngine', () => {\n  \n  // Test data setup\n  let cyclicGroup3: Group;\n  let cyclicGroup4: Group;\n  let dihedralGroup3: Group;\n  let symmetricGroup3: Group;\n  let trivialGroup: Group;\n\n  beforeAll(() => {\n    // Get test groups from GroupDatabase\n    cyclicGroup3 = GroupDatabase.getGroup('C3')!;\n    cyclicGroup4 = GroupDatabase.getGroup('C4')!;\n    dihedralGroup3 = GroupDatabase.getGroup('D3')!;\n    symmetricGroup3 = GroupDatabase.getGroup('S3')!;\n    \n    // Get trivial group from database\n    trivialGroup = GroupDatabase.getGroup('C1')!;\n  });\n\n  describe('Layout Strategy Generation', () => {\n    \n    describe('generateOptimalLayout', () => {\n      test('generates layout for trivial group', () => {\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(trivialGroup, []);\n        \n        expect(layout).toBeDefined();\n        expect(layout.positions).toHaveProperty('e');\n        expect(layout.nestingStructure).toHaveLength(1);\n        expect(layout.description).toContain('Trivial group');\n        expect(layout.is3D).toBe(false);\n        \n        const position = layout.positions['e'];\n        expect(position.x).toBe(300);\n        expect(position.y).toBe(200);\n        expect(position.z).toBeUndefined();\n      });\n\n      test('generates layout for cyclic group C3', () => {\n        const generators = ['a'];\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, generators);\n        \n        expect(layout).toBeDefined();\n        expect(layout.positions).toBeDefined();\n        expect(layout.nestingStructure).toHaveLength(1);\n        expect(layout.is3D).toBe(false);\n        \n        // Verify all elements have positions\n        cyclicGroup3.elements.forEach(element => {\n          expect(layout.positions).toHaveProperty(element.id);\n          const pos = layout.positions[element.id];\n          expect(typeof pos.x).toBe('number');\n          expect(typeof pos.y).toBe('number');\n          expect(Number.isFinite(pos.x)).toBe(true);\n          expect(Number.isFinite(pos.y)).toBe(true);\n        });\n      });\n\n      test('generates layout for cyclic group C4', () => {\n        const generators = ['a'];\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, generators);\n        \n        expect(layout).toBeDefined();\n        expect(layout.nestingStructure).toHaveLength(1);\n        \n        // Verify circular layout for cyclic group with order > 2\n        const nestingLevel = layout.nestingStructure[0];\n        expect(nestingLevel.strategy).toBe('circular');\n        expect(nestingLevel.direction).toBe('XY');\n      });\n\n      test('generates layout for dihedral group D3', () => {\n        const generators = ['r', 's']; // rotation and reflection\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(dihedralGroup3, generators);\n        \n        expect(layout).toBeDefined();\n        expect(layout.nestingStructure).toHaveLength(2);\n        \n        // Should detect dihedral structure\n        const hasCircularStrategy = layout.nestingStructure.some(level => level.strategy === 'circular');\n        expect(hasCircularStrategy).toBe(true);\n      });\n\n      test('generates 3D layout when requested', () => {\n        const generators = ['a'];\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, generators, true);\n        \n        expect(layout.is3D).toBe(true);\n        \n        // All positions should have z coordinate\n        cyclicGroup3.elements.forEach(element => {\n          const pos = layout.positions[element.id];\n          expect(pos.z).toBeDefined();\n          expect(typeof pos.z).toBe('number');\n          expect(Number.isFinite(pos.z!)).toBe(true);\n        });\n      });\n\n      test('uses standard layout when available and not prefer3D', () => {\n        // Mock StandardLayoutGenerator to return a layout\n        const mockStandardLayout = {\n          positions: {\n            'e': { x: 0.5, y: 0.5 },\n            'a': { x: 0.3, y: 0.7 },\n            'a2': { x: 0.7, y: 0.3 }\n          },\n          description: 'Standard C3 layout'\n        };\n        \n        jest.spyOn(StandardLayoutGenerator, 'getStandardLayout').mockReturnValue(mockStandardLayout);\n        \n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a'], false);\n        \n        expect(layout.description).toBe('Standard C3 layout');\n        expect(layout.positions['e'].x).toBe(300); // Converted to canvas coordinates\n        expect(layout.positions['e'].y).toBe(200);\n        \n        StandardLayoutGenerator.getStandardLayout.mockRestore();\n      });\n    });\n\n    describe('strategy selection logic', () => {\n      test('selects linear strategy for order-2 generators', () => {\n        // Create a group with order-2 elements\n        const testGroup: Group = {\n          name: 'Test',\n          order: 4,\n          elements: [\n            { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n            { id: 'a', label: 'a', order: 2, inverse: 'a', conjugacyClass: 1 },\n            { id: 'b', label: 'b', order: 2, inverse: 'b', conjugacyClass: 1 },\n            { id: 'ab', label: 'ab', order: 2, inverse: 'ab', conjugacyClass: 1 }\n          ],\n          operations: new Map(),\n          generators: ['a', 'b'],\n          isAbelian: true\n        };\n        \n        const layout = AdvancedLayoutEngine.generateOptimalLayout(testGroup, ['a', 'b']);\n        \n        // Should use linear strategies for order-2 generators\n        expect(layout.nestingStructure[0].strategy).toBe('linear');\n        expect(layout.nestingStructure[1].strategy).toBe('linear');\n        \n        // Should use different directions\n        expect(layout.nestingStructure[0].direction).toBe('X');\n        expect(layout.nestingStructure[1].direction).toBe('Y');\n      });\n\n      test('selects circular strategy for higher order cyclic groups', () => {\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n        \n        expect(layout.nestingStructure[0].strategy).toBe('circular');\n        expect(layout.nestingStructure[0].direction).toBe('XY');\n      });\n    });\n  });\n\n  describe('Nesting Structure Computation', () => {\n    \n    test('computes correct nesting levels', () => {\n      const generators = ['r', 's'];\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(dihedralGroup3, generators);\n      \n      expect(layout.nestingStructure).toHaveLength(2);\n      \n      layout.nestingStructure.forEach((level, index) => {\n        expect(level.nestingLevel).toBe(index);\n        expect(level.generator).toBe(generators[index]);\n        expect(level.subgroupElements).toBeDefined();\n        expect(Array.isArray(level.subgroupElements)).toBe(true);\n        expect(level.subgroupElements!.includes('e')).toBe(true);\n      });\n    });\n\n    test('generates valid subgroup elements for each level', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n      \n      const subgroupElements = layout.nestingStructure[0].subgroupElements!;\n      expect(subgroupElements).toContain('e');\n      expect(subgroupElements).toContain('a');\n      expect(subgroupElements.length).toBeGreaterThan(1);\n      \n      // All subgroup elements should be valid group elements\n      subgroupElements.forEach(elementId => {\n        const element = cyclicGroup4.elements.find(e => e.id === elementId);\n        expect(element).toBeDefined();\n      });\n    });\n\n    test('maintains mathematical consistency in nesting', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(symmetricGroup3, ['a', 'b']);\n      \n      // Verify nesting levels are sequential\n      layout.nestingStructure.forEach((level, index) => {\n        expect(level.nestingLevel).toBe(index);\n      });\n      \n      // Verify each level has valid strategy and direction\n      layout.nestingStructure.forEach(level => {\n        expect(['linear', 'circular', 'rotated']).toContain(level.strategy);\n        expect(['X', 'Y', 'Z', 'XY', 'XZ', 'YZ']).toContain(level.direction);\n      });\n    });\n  });\n\n  describe('3D Layout Positioning', () => {\n    \n    test('generates valid 3D coordinates', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a'], true);\n      \n      expect(layout.is3D).toBe(true);\n      \n      cyclicGroup4.elements.forEach(element => {\n        const pos = layout.positions[element.id];\n        expect(pos.z).toBeDefined();\n        expect(typeof pos.z).toBe('number');\n        expect(Number.isFinite(pos.z!)).toBe(true);\n      });\n    });\n\n    test('applies Z-direction linear layout correctly', () => {\n      // Create test scenario that would use Z direction\n      const testGroup: Group = {\n        name: 'TestZ',\n        order: 4,\n        elements: [\n          { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n          { id: 'a', label: 'a', order: 2, inverse: 'a', conjugacyClass: 1 },\n          { id: 'b', label: 'b', order: 2, inverse: 'b', conjugacyClass: 1 },\n          { id: 'c', label: 'c', order: 2, inverse: 'c', conjugacyClass: 1 }\n        ],\n        operations: new Map(),\n        generators: ['a', 'b', 'c'],\n        isAbelian: true\n      };\n      \n      const layout = AdvancedLayoutEngine.generateOptimalLayout(testGroup, ['a', 'b', 'c'], true);\n      \n      // Third generator should use Z direction\n      expect(layout.nestingStructure[2].direction).toBe('Z');\n      \n      // Verify Z-coordinates vary for elements positioned by third generator\n      const zCoords = testGroup.elements.map(e => layout.positions[e.id].z!);\n      const uniqueZCoords = [...new Set(zCoords)];\n      expect(uniqueZCoords.length).toBeGreaterThan(1);\n    });\n\n    test('applies XZ and YZ circular layouts correctly', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(dihedralGroup3, ['r', 's'], true);\n      \n      // Should have some 3D positioning\n      const hasNonZeroZ = dihedralGroup3.elements.some(e => \n        layout.positions[e.id].z !== undefined && layout.positions[e.id].z !== 0\n      );\n      expect(hasNonZeroZ).toBe(true);\n    });\n  });\n\n  describe('Layout Strategy Application', () => {\n    \n    describe('Linear Layout', () => {\n      test('distributes elements along X-axis correctly', () => {\n        const testGroup: Group = {\n          name: 'LinearTest',\n          order: 3,\n          elements: [\n            { id: 'e', label: 'e', order: 1, inverse: 'e', conjugacyClass: 0 },\n            { id: 'a', label: 'a', order: 2, inverse: 'a', conjugacyClass: 1 },\n            { id: 'b', label: 'b', order: 2, inverse: 'b', conjugacyClass: 1 }\n          ],\n          operations: new Map(),\n          generators: ['a'],\n          isAbelian: true\n        };\n        \n        const layout = AdvancedLayoutEngine.generateOptimalLayout(testGroup, ['a']);\n        \n        // Elements should be aligned along X-axis with constant Y\n        const positions = Object.values(layout.positions);\n        const yCoords = positions.map(p => p.y);\n        const uniqueYCoords = [...new Set(yCoords)];\n        \n        // Should have consistent Y coordinate (allowing for floating point precision)\n        expect(uniqueYCoords.length).toBeLessThanOrEqual(2); // Identity might be at center\n        \n        // X coordinates should vary\n        const xCoords = positions.map(p => p.x);\n        const uniqueXCoords = [...new Set(xCoords)];\n        expect(uniqueXCoords.length).toBeGreaterThan(1);\n      });\n\n      test('maintains equal spacing in linear layout', () => {\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n        \n        // Get positions in order\n        const orderedPositions = cyclicGroup4.elements\n          .sort((a, b) => a.id.localeCompare(b.id))\n          .map(e => layout.positions[e.id]);\n        \n        // Calculate spacing between adjacent elements\n        const spacings: number[] = [];\n        for (let i = 1; i < orderedPositions.length; i++) {\n          const dx = orderedPositions[i].x - orderedPositions[i-1].x;\n          const dy = orderedPositions[i].y - orderedPositions[i-1].y;\n          const distance = Math.sqrt(dx*dx + dy*dy);\n          spacings.push(distance);\n        }\n        \n        // Verify spacings are approximately equal (within tolerance)\n        if (spacings.length > 1) {\n          const avgSpacing = spacings.reduce((a, b) => a + b, 0) / spacings.length;\n          spacings.forEach(spacing => {\n            global.testUtils.expectMathematicalAccuracy(spacing, avgSpacing, 1);\n          });\n        }\n      });\n    });\n\n    describe('Circular Layout', () => {\n      test('arranges elements in circular pattern', () => {\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n        \n        // Should use circular layout for C4\n        expect(layout.nestingStructure[0].strategy).toBe('circular');\n        \n        // Calculate distances from center for all elements\n        const centerX = 300; // Canvas center\n        const centerY = 200;\n        \n        const distances = cyclicGroup4.elements.map(element => {\n          const pos = layout.positions[element.id];\n          return Math.sqrt((pos.x - centerX)**2 + (pos.y - centerY)**2);\n        });\n        \n        // All elements (except possibly identity) should be approximately the same distance from center\n        const nonIdentityDistances = distances.filter(d => d > 10); // Filter out identity at center\n        if (nonIdentityDistances.length > 1) {\n          const avgDistance = nonIdentityDistances.reduce((a, b) => a + b, 0) / nonIdentityDistances.length;\n          nonIdentityDistances.forEach(distance => {\n            global.testUtils.expectMathematicalAccuracy(distance, avgDistance, 5);\n          });\n        }\n      });\n\n      test('maintains angular symmetry in circular layout', () => {\n        const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n        \n        const centerX = 300;\n        const centerY = 200;\n        \n        // Calculate angles for all non-identity elements\n        const angles = cyclicGroup3.elements\n          .filter(e => e.id !== 'e')\n          .map(element => {\n            const pos = layout.positions[element.id];\n            return Math.atan2(pos.y - centerY, pos.x - centerX);\n          });\n        \n        if (angles.length > 1) {\n          // Calculate angular differences\n          const sortedAngles = angles.sort();\n          const angularDifferences: number[] = [];\n          \n          for (let i = 1; i < sortedAngles.length; i++) {\n            angularDifferences.push(sortedAngles[i] - sortedAngles[i-1]);\n          }\n          \n          // Add wrap-around difference\n          angularDifferences.push(2 * Math.PI - (sortedAngles[sortedAngles.length-1] - sortedAngles[0]));\n          \n          // All angular differences should be approximately equal\n          const expectedAngle = 2 * Math.PI / angles.length;\n          angularDifferences.forEach(angle => {\n            global.testUtils.expectMathematicalAccuracy(angle, expectedAngle, 0.1);\n          });\n        }\n      });\n    });\n\n    describe('Rotated Layout', () => {\n      test('applies rotation offset correctly', () => {\n        // Create scenario that uses rotated layout\n        const complexGroup: Group = {\n          name: 'Complex',\n          order: 8,\n          elements: Array.from({length: 8}, (_, i) => ({\n            id: `g${i}`,\n            label: `g${i}`,\n            order: i === 0 ? 1 : 8,\n            inverse: `g${i}`,\n            conjugacyClass: i\n          })),\n          operations: new Map(),\n          generators: ['g1'],\n          isAbelian: false\n        };\n        \n        const layout = AdvancedLayoutEngine.generateOptimalLayout(complexGroup, ['g1']);\n        \n        // Verify positions are generated\n        complexGroup.elements.forEach(element => {\n          const pos = layout.positions[element.id];\n          expect(Number.isFinite(pos.x)).toBe(true);\n          expect(Number.isFinite(pos.y)).toBe(true);\n        });\n      });\n    });\n  });\n\n  describe('Group Structure Analysis', () => {\n    \n    test('correctly identifies cyclic groups', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      \n      // Should detect cyclic structure and use appropriate strategy\n      expect(layout.nestingStructure).toHaveLength(1);\n      expect(layout.nestingStructure[0].strategy).toMatch(/circular|linear/);\n    });\n\n    test('correctly identifies dihedral groups', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(dihedralGroup3, ['r', 's']);\n      \n      // Should have two generators and appropriate strategies\n      expect(layout.nestingStructure).toHaveLength(2);\n      \n      // Should use strategies appropriate for dihedral structure\n      const strategies = layout.nestingStructure.map(level => level.strategy);\n      expect(strategies.some(s => s === 'circular')).toBe(true);\n    });\n\n    test('handles abelian groups correctly', () => {\n      expect(cyclicGroup3.isAbelian).toBe(true);\n      expect(cyclicGroup4.isAbelian).toBe(true);\n      expect(dihedralGroup3.isAbelian).toBe(false);\n      \n      const cyclicLayout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      const dihedralLayout = AdvancedLayoutEngine.generateOptimalLayout(dihedralGroup3, ['r', 's']);\n      \n      // Both should generate valid layouts\n      expect(cyclicLayout.positions).toBeDefined();\n      expect(dihedralLayout.positions).toBeDefined();\n    });\n  });\n\n  describe('Standard Layout Conversion', () => {\n    \n    test('converts standard layout to advanced layout format', () => {\n      const mockStandardLayout = {\n        positions: {\n          'e': { x: 0.5, y: 0.5 },\n          'a': { x: 0.3, y: 0.7 },\n          'a2': { x: 0.7, y: 0.3 }\n        },\n        description: 'Mock standard layout'\n      };\n      \n      jest.spyOn(StandardLayoutGenerator, 'getStandardLayout').mockReturnValue(mockStandardLayout);\n      \n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a'], false);\n      \n      expect(layout.positions['e'].x).toBe(300); // 0.5 * 600\n      expect(layout.positions['e'].y).toBe(200); // 0.5 * 400\n      expect(layout.positions['a'].x).toBe(180); // 0.3 * 600\n      expect(layout.positions['a'].y).toBe(280); // 0.7 * 400\n      expect(layout.description).toBe('Mock standard layout');\n      expect(layout.is3D).toBe(false);\n      expect(layout.nestingStructure).toHaveLength(0);\n      \n      StandardLayoutGenerator.getStandardLayout.mockRestore();\n    });\n  });\n\n  describe('Mathematical Accuracy', () => {\n    \n    test('maintains mathematical precision in coordinate calculations', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n      \n      // Verify all coordinates are finite and precise\n      cyclicGroup4.elements.forEach(element => {\n        const pos = layout.positions[element.id];\n        \n        expect(Number.isFinite(pos.x)).toBe(true);\n        expect(Number.isFinite(pos.y)).toBe(true);\n        expect(Number.isNaN(pos.x)).toBe(false);\n        expect(Number.isNaN(pos.y)).toBe(false);\n        \n        // Coordinates should be reasonable (within canvas bounds + some margin)\n        expect(pos.x).toBeGreaterThan(-100);\n        expect(pos.x).toBeLessThan(700);\n        expect(pos.y).toBeGreaterThan(-100);\n        expect(pos.y).toBeLessThan(500);\n      });\n    });\n\n    test('maintains group-theoretic consistency', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      \n      // All group elements should have positions\n      cyclicGroup3.elements.forEach(element => {\n        expect(layout.positions).toHaveProperty(element.id);\n      });\n      \n      // Number of positioned elements should match group order\n      const positionedElements = Object.keys(layout.positions);\n      expect(positionedElements).toHaveLength(cyclicGroup3.order);\n      \n      // Identity should be present\n      expect(layout.positions).toHaveProperty('e');\n    });\n\n    test('validates layout mathematical properties', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n      \n      // Test mathematical invariants\n      const positions = Object.values(layout.positions);\n      const xCoords = positions.map(p => p.x);\n      const yCoords = positions.map(p => p.y);\n      \n      // Validate numerical stability\n      const validation = PrecisionValidator.validateFloatingPointStability([...xCoords, ...yCoords]);\n      expect(validation.isValid).toBe(true);\n      \n      // Check for reasonable spread (elements shouldn't all be at same point)\n      const xRange = Math.max(...xCoords) - Math.min(...xCoords);\n      const yRange = Math.max(...yCoords) - Math.min(...yCoords);\n      expect(xRange + yRange).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Performance Testing', () => {\n    \n    test('layout generation completes within time bounds', () => {\n      const { result, duration } = global.testUtils.expectPerformance(() => {\n        return AdvancedLayoutEngine.generateOptimalLayout(symmetricGroup3, ['a', 'b']);\n      }, 500); // 500ms max\n      \n      expect(result).toBeDefined();\n      expect(result.positions).toBeDefined();\n      console.log(`Layout generation completed in ${duration.toFixed(2)}ms`);\n    });\n\n    test('memory usage is reasonable for layout generation', () => {\n      const { result, memoryIncrease } = global.testUtils.expectMemoryUsage(() => {\n        return AdvancedLayoutEngine.generateOptimalLayout(symmetricGroup3, ['a', 'b']);\n      }, 10); // 10MB max increase\n      \n      expect(result).toBeDefined();\n      console.log(`Memory increase: ${memoryIncrease.toFixed(2)}MB`);\n    });\n\n    test('scales appropriately with group size', () => {\n      const times: number[] = [];\n      const groups = [cyclicGroup3, cyclicGroup4, symmetricGroup3];\n      \n      groups.forEach(group => {\n        const startTime = performance.now();\n        AdvancedLayoutEngine.generateOptimalLayout(group, group.generators);\n        const endTime = performance.now();\n        times.push(endTime - startTime);\n      });\n      \n      // Performance should scale reasonably (not exponentially)\n      times.forEach(time => {\n        expect(time).toBeLessThan(1000); // 1 second max for test groups\n      });\n      \n      console.log('Scaling times:', times.map(t => `${t.toFixed(2)}ms`));\n    });\n\n    test('deterministic behavior for same inputs', () => {\n      const layout1 = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      const layout2 = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      \n      // Should produce identical results\n      expect(layout1.positions).toEqual(layout2.positions);\n      expect(layout1.nestingStructure).toEqual(layout2.nestingStructure);\n      expect(layout1.description).toBe(layout2.description);\n      expect(layout1.is3D).toBe(layout2.is3D);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    \n    test('handles empty generators array', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, []);\n      \n      expect(layout).toBeDefined();\n      expect(layout.positions).toBeDefined();\n      // Should still position all elements somehow\n      expect(Object.keys(layout.positions)).toHaveLength(cyclicGroup3.order);\n    });\n\n    test('handles invalid generator names gracefully', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['invalid']);\n      \n      expect(layout).toBeDefined();\n      expect(layout.positions).toBeDefined();\n      // Should not crash, but may have default behavior\n    });\n\n    test('handles groups with single element', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(trivialGroup, []);\n      \n      expect(layout).toBeDefined();\n      expect(layout.positions).toHaveProperty('e');\n      expect(layout.nestingStructure).toHaveLength(1);\n      expect(layout.description).toContain('Trivial group');\n    });\n\n    test('handles large number of generators', () => {\n      const manyGenerators = Array.from({length: 10}, (_, i) => `g${i}`);\n      \n      // Should not crash even with many generators\n      expect(() => {\n        AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, manyGenerators);\n      }).not.toThrow();\n    });\n\n    test('handles extreme coordinate values gracefully', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a'], true);\n      \n      // Verify coordinates are not extreme\n      cyclicGroup4.elements.forEach(element => {\n        const pos = layout.positions[element.id];\n        expect(Math.abs(pos.x)).toBeLessThan(1e6);\n        expect(Math.abs(pos.y)).toBeLessThan(1e6);\n        if (pos.z !== undefined) {\n          expect(Math.abs(pos.z)).toBeLessThan(1e6);\n        }\n      });\n    });\n  });\n\n  describe('Integration with Group Theory', () => {\n    \n    test('respects group structure in layout', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      \n      // Verify all group elements are represented\n      const layoutElementIds = Object.keys(layout.positions);\n      const groupElementIds = cyclicGroup3.elements.map(e => e.id);\n      \n      expect(layoutElementIds.sort()).toEqual(groupElementIds.sort());\n    });\n\n    test('validates against group axioms', () => {\n      // Verify our test groups are mathematically valid\n      [cyclicGroup3, cyclicGroup4, dihedralGroup3, symmetricGroup3, trivialGroup].forEach(group => {\n        expect(group).toBeValidGroup();\n      });\n    });\n\n    test('maintains generator relationships in layout', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n      \n      // Generator should be included in nesting structure\n      expect(layout.nestingStructure[0].generator).toBe('a');\n      expect(layout.nestingStructure[0].subgroupElements).toContain('a');\n      expect(layout.nestingStructure[0].subgroupElements).toContain('e');\n    });\n  });\n\n  describe('Layout Quality Metrics', () => {\n    \n    test('minimizes edge crossings in planar layouts', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup4, ['a']);\n      \n      // For cyclic groups, circular layout should minimize crossings\n      // Verify elements are positioned to form a reasonable graph\n      const positions = layout.positions;\n      const elementIds = Object.keys(positions);\n      \n      // Calculate minimum distance between any two elements\n      let minDistance = Infinity;\n      for (let i = 0; i < elementIds.length; i++) {\n        for (let j = i + 1; j < elementIds.length; j++) {\n          const pos1 = positions[elementIds[i]];\n          const pos2 = positions[elementIds[j]];\n          const distance = Math.sqrt((pos1.x - pos2.x)**2 + (pos1.y - pos2.y)**2);\n          minDistance = Math.min(minDistance, distance);\n        }\n      }\n      \n      // Elements shouldn't be too close (overlap) or too far apart\n      expect(minDistance).toBeGreaterThan(5);\n      expect(minDistance).toBeLessThan(200);\n    });\n\n    test('maintains visual balance in layout', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(cyclicGroup3, ['a']);\n      \n      // Calculate center of mass of all positioned elements\n      const positions = Object.values(layout.positions);\n      const centerX = positions.reduce((sum, pos) => sum + pos.x, 0) / positions.length;\n      const centerY = positions.reduce((sum, pos) => sum + pos.y, 0) / positions.length;\n      \n      // Center of mass should be reasonably close to canvas center\n      const canvasCenterX = 300;\n      const canvasCenterY = 200;\n      \n      expect(Math.abs(centerX - canvasCenterX)).toBeLessThan(100);\n      expect(Math.abs(centerY - canvasCenterY)).toBeLessThan(100);\n    });\n\n    test('optimizes space utilization', () => {\n      const layout = AdvancedLayoutEngine.generateOptimalLayout(symmetricGroup3, ['a', 'b']);\n      \n      // Calculate bounding box of all elements\n      const positions = Object.values(layout.positions);\n      const minX = Math.min(...positions.map(p => p.x));\n      const maxX = Math.max(...positions.map(p => p.x));\n      const minY = Math.min(...positions.map(p => p.y));\n      const maxY = Math.max(...positions.map(p => p.y));\n      \n      const width = maxX - minX;\n      const height = maxY - minY;\n      \n      // Layout should use reasonable portion of canvas space\n      expect(width).toBeGreaterThan(50); // Not too cramped\n      expect(height).toBeGreaterThan(50);\n      expect(width).toBeLessThan(600); // Not exceeding canvas\n      expect(height).toBeLessThan(400);\n    });\n  });\n});"],"names":["expect","extend","mathematicalMatchers","describe","cyclicGroup3","cyclicGroup4","dihedralGroup3","symmetricGroup3","trivialGroup","beforeAll","GroupDatabase","getGroup","test","layout","AdvancedLayoutEngine","generateOptimalLayout","toBeDefined","positions","toHaveProperty","nestingStructure","toHaveLength","description","toContain","is3D","toBe","position","x","y","z","toBeUndefined","generators","elements","forEach","element","id","pos","Number","isFinite","nestingLevel","strategy","direction","hasCircularStrategy","some","level","mockStandardLayout","jest","spyOn","StandardLayoutGenerator","mockReturnValue","getStandardLayout","mockRestore","testGroup","name","order","label","inverse","conjugacyClass","operations","Map","isAbelian","index","generator","subgroupElements","Array","isArray","includes","length","toBeGreaterThan","elementId","find","e","zCoords","map","uniqueZCoords","Set","hasNonZeroZ","undefined","Object","values","yCoords","p","uniqueYCoords","toBeLessThanOrEqual","xCoords","uniqueXCoords","orderedPositions","sort","a","b","localeCompare","spacings","i","dx","dy","distance","Math","sqrt","push","avgSpacing","reduce","spacing","global","testUtils","expectMathematicalAccuracy","centerX","centerY","distances","nonIdentityDistances","filter","d","avgDistance","angles","atan2","sortedAngles","angularDifferences","PI","expectedAngle","angle","complexGroup","from","_","toMatch","strategies","s","cyclicLayout","dihedralLayout","isNaN","toBeLessThan","positionedElements","keys","validation","PrecisionValidator","validateFloatingPointStability","isValid","xRange","max","min","yRange","result","duration","expectPerformance","console","log","toFixed","memoryIncrease","expectMemoryUsage","times","groups","group","startTime","performance","now","endTime","time","t","layout1","layout2","toEqual","manyGenerators","not","toThrow","abs","layoutElementIds","groupElementIds","toBeValidGroup","elementIds","minDistance","Infinity","j","pos1","pos2","sum","canvasCenterX","canvasCenterY","minX","maxX","minY","maxY","width","height"],"mappings":"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"}