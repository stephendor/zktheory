fc9fdd0055944c4b550ad08c9b6af588
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PerformanceMetricsCollector: function() {
        return PerformanceMetricsCollector;
    },
    performanceMetrics: function() {
        return performanceMetrics;
    }
});
const _MetricsBuffer = require("./MetricsBuffer");
class PerformanceMetricsCollector {
    constructor(){
        this.isEnabled = true;
        this.sampleRate = 1.0 // 100% sampling by default
        ;
        this.buffer = new _MetricsBuffer.MetricsBuffer();
        this.hooks = new Map();
    }
    static getInstance() {
        if (!PerformanceMetricsCollector.instance) {
            PerformanceMetricsCollector.instance = new PerformanceMetricsCollector();
        }
        return PerformanceMetricsCollector.instance;
    }
    enable() {
        this.isEnabled = true;
    }
    disable() {
        this.isEnabled = false;
    }
    setSampleRate(rate) {
        if (rate >= 0 && rate <= 1) {
            this.sampleRate = rate;
        }
    }
    collectMetric(metric) {
        if (!this.isEnabled) return;
        // Apply sampling for high-frequency operations
        if (Math.random() > this.sampleRate) return;
        // Add timestamp if not provided
        if (!metric.timestamp) {
            metric.timestamp = Date.now();
        }
        this.buffer.addMetric(metric);
    }
    startTimer(componentId, category) {
        if (!this.isEnabled) {
            return ()=>{}; // No-op function
        }
        const hookId = `${componentId}_${category}`;
        const startTime = performance.now();
        const hook = {
            id: hookId,
            category,
            startTime,
            isActive: true
        };
        this.hooks.set(hookId, hook);
        // Return stop function
        return ()=>{
            const endTime = performance.now();
            const duration = endTime - startTime;
            // Remove the hook
            this.hooks.delete(hookId);
            // Collect the metric
            this.collectMetric({
                id: hookId,
                timestamp: Date.now(),
                category: category,
                value: duration,
                unit: 'ms',
                metadata: {
                    componentId,
                    category
                }
            });
        };
    }
    getMetrics(category, timeRange) {
        return this.buffer.getMetrics(category, timeRange);
    }
    getMetricsByComponent(componentId) {
        return this.buffer.getMetricsByComponent(componentId);
    }
    getLatestMetrics(limit = 100) {
        return this.buffer.getLatestMetrics(limit);
    }
    getMetricsSummary() {
        return this.buffer.getMetricsSummary();
    }
    clearMetrics() {
        this.buffer.clearMetrics();
    }
    clearOldMetrics(ageThreshold) {
        this.buffer.clearOldMetrics(ageThreshold);
    }
    getActiveHooks() {
        return Array.from(this.hooks.values());
    }
    getBufferSize() {
        return this.buffer.getBufferSize();
    }
    getBufferCapacity() {
        return this.buffer.getBufferCapacity();
    }
    isBufferFull() {
        return this.buffer.isBufferFull();
    }
    // Utility method for memory usage tracking
    trackMemoryUsage(componentId, memoryInfo) {
        if (!this.isEnabled) return;
        const memory = memoryInfo || performance.memory;
        if (memory) {
            this.collectMetric({
                id: `${componentId}_memory`,
                timestamp: Date.now(),
                category: 'memory',
                value: memory.usedJSHeapSize,
                unit: 'bytes',
                metadata: {
                    componentId,
                    totalJSHeapSize: memory.totalJSHeapSize,
                    jsHeapSizeLimit: memory.jsHeapSizeLimit
                }
            });
        }
    }
    // Utility method for WASM performance monitoring
    withPerformanceMonitoring(fn, operationName, componentId = 'wasm') {
        return (...args)=>{
            const stopTimer = this.startTimer(componentId, operationName);
            try {
                const result = fn(...args);
                stopTimer();
                return result;
            } catch (error) {
                stopTimer();
                // Log error metric
                this.collectMetric({
                    id: `${componentId}_${operationName}_error`,
                    timestamp: Date.now(),
                    category: 'computation',
                    value: 0,
                    unit: 'ms',
                    metadata: {
                        operation: operationName,
                        error: true,
                        args: args.length
                    }
                });
                throw error;
            }
        };
    }
}
const performanceMetrics = PerformanceMetricsCollector.getInstance();

//# sourceMappingURL=data:application/json;base64,