{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/performance/PerformanceMetrics.ts"],"sourcesContent":["import { PerformanceMetric, PerformanceHook } from './types';\nimport { MetricsBuffer } from './MetricsBuffer';\n\nexport class PerformanceMetricsCollector {\n  private static instance: PerformanceMetricsCollector;\n  private buffer: MetricsBuffer;\n  private hooks: Map<string, PerformanceHook>;\n  private isEnabled: boolean = true;\n  private sampleRate: number = 1.0; // 100% sampling by default\n\n  private constructor() {\n    this.buffer = new MetricsBuffer();\n    this.hooks = new Map();\n  }\n\n  static getInstance(): PerformanceMetricsCollector {\n    if (!PerformanceMetricsCollector.instance) {\n      PerformanceMetricsCollector.instance = new PerformanceMetricsCollector();\n    }\n    return PerformanceMetricsCollector.instance;\n  }\n\n  enable(): void {\n    this.isEnabled = true;\n  }\n\n  disable(): void {\n    this.isEnabled = false;\n  }\n\n  setSampleRate(rate: number): void {\n    if (rate >= 0 && rate <= 1) {\n      this.sampleRate = rate;\n    }\n  }\n\n  collectMetric(metric: PerformanceMetric): void {\n    if (!this.isEnabled) return;\n\n    // Apply sampling for high-frequency operations\n    if (Math.random() > this.sampleRate) return;\n\n    // Add timestamp if not provided\n    if (!metric.timestamp) {\n      metric.timestamp = Date.now();\n    }\n\n    this.buffer.addMetric(metric);\n  }\n\n  startTimer(componentId: string, category: string): () => void {\n    if (!this.isEnabled) {\n      return () => {}; // No-op function\n    }\n\n    const hookId = `${componentId}_${category}`;\n    const startTime = performance.now();\n\n    const hook: PerformanceHook = {\n      id: hookId,\n      category,\n      startTime,\n      isActive: true\n    };\n\n    this.hooks.set(hookId, hook);\n\n    // Return stop function\n    return () => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Remove the hook\n      this.hooks.delete(hookId);\n\n      // Collect the metric\n      this.collectMetric({\n        id: hookId,\n        timestamp: Date.now(),\n        category: category as any,\n        value: duration,\n        unit: 'ms',\n        metadata: { componentId, category }\n      });\n    };\n  }\n\n  getMetrics(category?: string, timeRange?: { start: number; end: number }): PerformanceMetric[] {\n    return this.buffer.getMetrics(category, timeRange);\n  }\n\n  getMetricsByComponent(componentId: string): PerformanceMetric[] {\n    return this.buffer.getMetricsByComponent(componentId);\n  }\n\n  getLatestMetrics(limit: number = 100): PerformanceMetric[] {\n    return this.buffer.getLatestMetrics(limit);\n  }\n\n  getMetricsSummary() {\n    return this.buffer.getMetricsSummary();\n  }\n\n  clearMetrics(): void {\n    this.buffer.clearMetrics();\n  }\n\n  clearOldMetrics(ageThreshold: number): void {\n    this.buffer.clearOldMetrics(ageThreshold);\n  }\n\n  getActiveHooks(): PerformanceHook[] {\n    return Array.from(this.hooks.values());\n  }\n\n  getBufferSize(): number {\n    return this.buffer.getBufferSize();\n  }\n\n  getBufferCapacity(): number {\n    return this.buffer.getBufferCapacity();\n  }\n\n  isBufferFull(): boolean {\n    return this.buffer.isBufferFull();\n  }\n\n  // Utility method for memory usage tracking\n  trackMemoryUsage(componentId: string, memoryInfo?: PerformanceMemory): void {\n    if (!this.isEnabled) return;\n\n    const memory = memoryInfo || (performance as any).memory;\n    if (memory) {\n      this.collectMetric({\n        id: `${componentId}_memory`,\n        timestamp: Date.now(),\n        category: 'memory',\n        value: memory.usedJSHeapSize,\n        unit: 'bytes',\n        metadata: {\n          componentId,\n          totalJSHeapSize: memory.totalJSHeapSize,\n          jsHeapSizeLimit: memory.jsHeapSizeLimit\n        }\n      });\n    }\n  }\n\n  // Utility method for WASM performance monitoring\n  withPerformanceMonitoring<T extends any[], R>(\n    fn: (...args: T) => R,\n    operationName: string,\n    componentId: string = 'wasm'\n  ): (...args: T) => R {\n    return (...args: T): R => {\n      const stopTimer = this.startTimer(componentId, operationName);\n      \n      try {\n        const result = fn(...args);\n        stopTimer();\n        return result;\n      } catch (error) {\n        stopTimer();\n        \n        // Log error metric\n        this.collectMetric({\n          id: `${componentId}_${operationName}_error`,\n          timestamp: Date.now(),\n          category: 'computation',\n          value: 0,\n          unit: 'ms',\n          metadata: { operation: operationName, error: true, args: args.length }\n        });\n        \n        throw error;\n      }\n    };\n  }\n}\n\n// Export singleton instance\nexport const performanceMetrics = PerformanceMetricsCollector.getInstance();\n\n// Type for performance memory (if available)\ninterface PerformanceMemory {\n  usedJSHeapSize: number;\n  totalJSHeapSize: number;\n  jsHeapSizeLimit: number;\n}\n"],"names":["PerformanceMetricsCollector","performanceMetrics","isEnabled","sampleRate","buffer","MetricsBuffer","hooks","Map","getInstance","instance","enable","disable","setSampleRate","rate","collectMetric","metric","Math","random","timestamp","Date","now","addMetric","startTimer","componentId","category","hookId","startTime","performance","hook","id","isActive","set","endTime","duration","delete","value","unit","metadata","getMetrics","timeRange","getMetricsByComponent","getLatestMetrics","limit","getMetricsSummary","clearMetrics","clearOldMetrics","ageThreshold","getActiveHooks","Array","from","values","getBufferSize","getBufferCapacity","isBufferFull","trackMemoryUsage","memoryInfo","memory","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","withPerformanceMonitoring","fn","operationName","args","stopTimer","result","error","operation","length"],"mappings":"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"}