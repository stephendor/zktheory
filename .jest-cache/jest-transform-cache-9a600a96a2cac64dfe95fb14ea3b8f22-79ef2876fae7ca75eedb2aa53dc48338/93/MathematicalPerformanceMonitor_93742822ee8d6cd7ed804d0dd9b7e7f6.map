{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/performance/MathematicalPerformanceMonitor.ts"],"sourcesContent":["/**\n * Mathematical Performance Monitoring System\n * Specialized performance monitoring for mathematical computations and visualizations\n * Extends the existing performance framework with mathematical-specific metrics\n */\n\nimport { PerformanceMetricsCollector } from './PerformanceMetrics';\nimport type { PerformanceMetric, PerformanceReport, Recommendation } from './types';\n\nexport interface MathematicalOperation {\n  operation: string;\n  category: 'group_theory' | 'elliptic_curves' | 'tda' | 'visualization' | 'latex_rendering';\n  complexity: 'O(1)' | 'O(n)' | 'O(n²)' | 'O(n³)' | 'O(2^n)' | 'unknown';\n  inputSize?: number;\n  expectedTimeMs?: number;\n  maxAllowedTimeMs?: number;\n}\n\nexport interface MathematicalMetric extends PerformanceMetric {\n  category: 'computation' | 'rendering' | 'memory' | 'interaction';\n  mathematicalContext: {\n    operation: string;\n    algorithm: string;\n    inputSize: number;\n    complexity: string;\n    accuracy?: number;\n    memoryFootprint?: number;\n  };\n}\n\nexport interface MathematicalPerformanceThreshold {\n  operation: string;\n  environment: 'development' | 'testing' | 'production';\n  maxExecutionTime: number;\n  maxMemoryIncrease: number;\n  minAccuracy?: number;\n  severity: 'warning' | 'error' | 'critical';\n}\n\nexport interface RegressionAnalysis {\n  baseline: {\n    mean: number;\n    standardDeviation: number;\n    sampleSize: number;\n    timestamp: number;\n  };\n  current: {\n    value: number;\n    timestamp: number;\n  };\n  analysis: {\n    isRegression: boolean;\n    confidenceLevel: number;\n    percentageChange: number;\n    statisticalSignificance: number;\n  };\n}\n\nexport class MathematicalPerformanceMonitor {\n  private static instance: MathematicalPerformanceMonitor;\n  private metricsCollector: PerformanceMetricsCollector;\n  private thresholds: Map<string, MathematicalPerformanceThreshold[]> = new Map();\n  private baselines: Map<string, RegressionAnalysis['baseline']> = new Map();\n  private enabled: boolean = true;\n\n  private constructor() {\n    this.metricsCollector = PerformanceMetricsCollector.getInstance();\n    this.initializeDefaultThresholds();\n  }\n\n  static getInstance(): MathematicalPerformanceMonitor {\n    if (!MathematicalPerformanceMonitor.instance) {\n      MathematicalPerformanceMonitor.instance = new MathematicalPerformanceMonitor();\n    }\n    return MathematicalPerformanceMonitor.instance;\n  }\n\n  private initializeDefaultThresholds(): void {\n    const defaultThresholds: MathematicalPerformanceThreshold[] = [\n      // Group Theory Operations\n      {\n        operation: 'group_validation',\n        environment: 'development',\n        maxExecutionTime: 100,\n        maxMemoryIncrease: 10 * 1024 * 1024, // 10MB\n        minAccuracy: 1.0,\n        severity: 'warning'\n      },\n      {\n        operation: 'group_validation',\n        environment: 'production',\n        maxExecutionTime: 50,\n        maxMemoryIncrease: 5 * 1024 * 1024, // 5MB\n        minAccuracy: 1.0,\n        severity: 'error'\n      },\n      // TDA Operations\n      {\n        operation: 'tda_computation',\n        environment: 'development',\n        maxExecutionTime: 1000,\n        maxMemoryIncrease: 50 * 1024 * 1024, // 50MB\n        severity: 'warning'\n      },\n      {\n        operation: 'tda_computation',\n        environment: 'production',\n        maxExecutionTime: 500,\n        maxMemoryIncrease: 25 * 1024 * 1024, // 25MB\n        severity: 'error'\n      },\n      // Visualization Operations\n      {\n        operation: 'cayley_rendering',\n        environment: 'development',\n        maxExecutionTime: 200,\n        maxMemoryIncrease: 20 * 1024 * 1024, // 20MB\n        severity: 'warning'\n      },\n      {\n        operation: 'cayley_rendering',\n        environment: 'production',\n        maxExecutionTime: 100,\n        maxMemoryIncrease: 10 * 1024 * 1024, // 10MB\n        severity: 'error'\n      },\n      // LaTeX Rendering\n      {\n        operation: 'latex_rendering',\n        environment: 'development',\n        maxExecutionTime: 50,\n        maxMemoryIncrease: 5 * 1024 * 1024, // 5MB\n        severity: 'warning'\n      },\n      {\n        operation: 'latex_rendering',\n        environment: 'production',\n        maxExecutionTime: 25,\n        maxMemoryIncrease: 2 * 1024 * 1024, // 2MB\n        severity: 'error'\n      },\n      // Canvas Rendering (Critical for UI responsiveness)\n      {\n        operation: 'canvas_rendering',\n        environment: 'development',\n        maxExecutionTime: 16.67, // 60 FPS\n        maxMemoryIncrease: 2 * 1024 * 1024, // 2MB\n        severity: 'warning'\n      },\n      {\n        operation: 'canvas_rendering',\n        environment: 'production',\n        maxExecutionTime: 16.67, // 60 FPS\n        maxMemoryIncrease: 1 * 1024 * 1024, // 1MB\n        severity: 'critical'\n      }\n    ];\n\n    defaultThresholds.forEach(threshold => {\n      const key = `${threshold.operation}_${threshold.environment}`;\n      const existing = this.thresholds.get(key) || [];\n      this.thresholds.set(key, [...existing, threshold]);\n    });\n  }\n\n  /**\n   * Monitor a mathematical operation with automatic performance tracking\n   */\n  async monitorMathematicalOperation<T>(\n    operation: MathematicalOperation,\n    fn: () => Promise<T> | T,\n    options?: {\n      environment?: 'development' | 'testing' | 'production';\n      trackMemory?: boolean;\n      validateResult?: (result: T) => number; // Return accuracy score 0-1\n    }\n  ): Promise<T> {\n    if (!this.enabled) {\n      return await fn();\n    }\n\n    const environment = options?.environment || 'development';\n    const startTime = performance.now();\n    const startMemory = options?.trackMemory ? this.getMemoryUsage() : undefined;\n\n    let result: T;\n    let error: Error | undefined;\n\n    try {\n      result = await fn();\n    } catch (e) {\n      error = e as Error;\n      throw e;\n    } finally {\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n      const endMemory = options?.trackMemory ? this.getMemoryUsage() : undefined;\n      const memoryIncrease = startMemory && endMemory ? endMemory.heapUsed - startMemory.heapUsed : 0;\n\n      // Calculate accuracy if validator provided\n      let accuracy: number | undefined;\n      if (!error && options?.validateResult && result !== undefined) {\n        try {\n          accuracy = options.validateResult(result);\n        } catch (validationError) {\n          console.warn('Accuracy validation failed:', validationError);\n        }\n      }\n\n      // Create mathematical metric\n      const metric: MathematicalMetric = {\n        id: `${operation.operation}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: Date.now(),\n        category: 'computation',\n        value: executionTime,\n        unit: 'ms',\n        mathematicalContext: {\n          operation: operation.operation,\n          algorithm: operation.category,\n          inputSize: operation.inputSize || 0,\n          complexity: operation.complexity,\n          accuracy,\n          memoryFootprint: memoryIncrease\n        },\n        metadata: {\n          environment,\n          error: error?.message,\n          memoryIncrease,\n          expectedTime: operation.expectedTimeMs,\n          maxAllowedTime: operation.maxAllowedTimeMs\n        }\n      };\n\n      // Store the metric\n      this.metricsCollector.collectMetric(metric);\n\n      // Check thresholds and generate alerts\n      this.checkMathematicalThresholds(metric, environment);\n\n      // Update baselines for regression detection\n      this.updateBaselines(operation.operation, executionTime);\n    }\n\n    return result!;\n  }\n\n  /**\n   * Monitor synchronous mathematical operations\n   */\n  monitorSyncMathematicalOperation<T>(\n    operation: MathematicalOperation,\n    fn: () => T,\n    options?: {\n      environment?: 'development' | 'testing' | 'production';\n      trackMemory?: boolean;\n      validateResult?: (result: T) => number;\n    }\n  ): T {\n    if (!this.enabled) {\n      return fn();\n    }\n\n    const environment = options?.environment || 'development';\n    const startTime = performance.now();\n    const startMemory = options?.trackMemory ? this.getMemoryUsage() : undefined;\n\n    let result: T;\n    let error: Error | undefined;\n\n    try {\n      result = fn();\n    } catch (e) {\n      error = e as Error;\n      throw e;\n    } finally {\n      const endTime = performance.now();\n      const executionTime = endTime - startTime;\n      const endMemory = options?.trackMemory ? this.getMemoryUsage() : undefined;\n      const memoryIncrease = startMemory && endMemory ? endMemory.heapUsed - startMemory.heapUsed : 0;\n\n      // Calculate accuracy if validator provided\n      let accuracy: number | undefined;\n      if (!error && options?.validateResult && result !== undefined) {\n        try {\n          accuracy = options.validateResult(result);\n        } catch (validationError) {\n          console.warn('Accuracy validation failed:', validationError);\n        }\n      }\n\n      // Create mathematical metric\n      const metric: MathematicalMetric = {\n        id: `${operation.operation}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: Date.now(),\n        category: 'computation',\n        value: executionTime,\n        unit: 'ms',\n        mathematicalContext: {\n          operation: operation.operation,\n          algorithm: operation.category,\n          inputSize: operation.inputSize || 0,\n          complexity: operation.complexity,\n          accuracy,\n          memoryFootprint: memoryIncrease\n        },\n        metadata: {\n          environment,\n          error: error?.message,\n          memoryIncrease,\n          expectedTime: operation.expectedTimeMs,\n          maxAllowedTime: operation.maxAllowedTimeMs\n        }\n      };\n\n      // Store the metric\n      this.metricsCollector.collectMetric(metric);\n\n      // Check thresholds and generate alerts\n      this.checkMathematicalThresholds(metric, environment);\n\n      // Update baselines for regression detection\n      this.updateBaselines(operation.operation, executionTime);\n    }\n\n    return result!;\n  }\n\n  private checkMathematicalThresholds(\n    metric: MathematicalMetric,\n    environment: 'development' | 'testing' | 'production'\n  ): void {\n    const key = `${metric.mathematicalContext.operation}_${environment}`;\n    const thresholds = this.thresholds.get(key) || [];\n\n    thresholds.forEach(threshold => {\n      // Check execution time threshold\n      if (metric.value > threshold.maxExecutionTime) {\n        console.warn(`🚨 Performance Alert: ${metric.mathematicalContext.operation} exceeded time threshold`, {\n          actual: metric.value,\n          threshold: threshold.maxExecutionTime,\n          severity: threshold.severity,\n          environment\n        });\n      }\n\n      // Check memory threshold\n      if (metric.mathematicalContext.memoryFootprint && \n          metric.mathematicalContext.memoryFootprint > threshold.maxMemoryIncrease) {\n        console.warn(`🚨 Memory Alert: ${metric.mathematicalContext.operation} exceeded memory threshold`, {\n          actual: metric.mathematicalContext.memoryFootprint,\n          threshold: threshold.maxMemoryIncrease,\n          severity: threshold.severity,\n          environment\n        });\n      }\n\n      // Check accuracy threshold\n      if (threshold.minAccuracy && \n          metric.mathematicalContext.accuracy !== undefined &&\n          metric.mathematicalContext.accuracy < threshold.minAccuracy) {\n        console.error(`🚨 Accuracy Alert: ${metric.mathematicalContext.operation} below accuracy threshold`, {\n          actual: metric.mathematicalContext.accuracy,\n          threshold: threshold.minAccuracy,\n          severity: threshold.severity,\n          environment\n        });\n      }\n    });\n  }\n\n  private updateBaselines(operation: string, executionTime: number): void {\n    const existing = this.baselines.get(operation);\n    \n    if (!existing) {\n      // Create initial baseline\n      this.baselines.set(operation, {\n        mean: executionTime,\n        standardDeviation: 0,\n        sampleSize: 1,\n        timestamp: Date.now()\n      });\n    } else {\n      // Update baseline using moving average and variance\n      const newSampleSize = existing.sampleSize + 1;\n      const newMean = (existing.mean * existing.sampleSize + executionTime) / newSampleSize;\n      \n      // Calculate running standard deviation\n      const variance = ((existing.standardDeviation ** 2) * (existing.sampleSize - 1) + \n                       ((executionTime - newMean) ** 2)) / newSampleSize;\n      const newStandardDeviation = Math.sqrt(variance);\n\n      this.baselines.set(operation, {\n        mean: newMean,\n        standardDeviation: newStandardDeviation,\n        sampleSize: newSampleSize,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  /**\n   * Detect performance regression for a given operation\n   */\n  detectRegression(operation: string, currentTime: number): RegressionAnalysis | null {\n    const baseline = this.baselines.get(operation);\n    if (!baseline || baseline.sampleSize < 5) {\n      return null; // Need sufficient baseline data\n    }\n\n    // Calculate z-score for statistical significance\n    const zScore = (currentTime - baseline.mean) / baseline.standardDeviation;\n    const isRegression = zScore > 2.0; // 95% confidence level\n    const percentageChange = ((currentTime - baseline.mean) / baseline.mean) * 100;\n\n    return {\n      baseline,\n      current: {\n        value: currentTime,\n        timestamp: Date.now()\n      },\n      analysis: {\n        isRegression,\n        confidenceLevel: 0.95,\n        percentageChange,\n        statisticalSignificance: Math.abs(zScore)\n      }\n    };\n  }\n\n  /**\n   * Generate mathematical performance report\n   */\n  generateMathematicalReport(timeRange?: { start: number; end: number }): PerformanceReport {\n    const metrics = this.metricsCollector.getMetrics('computation', timeRange);\n    const mathematicalMetrics = metrics.filter(m => \n      (m as MathematicalMetric).mathematicalContext !== undefined\n    ) as MathematicalMetric[];\n\n    // Calculate summary statistics\n    const totalMetrics = mathematicalMetrics.length;\n    const averageComputationTime = totalMetrics > 0 \n      ? mathematicalMetrics.reduce((sum, m) => sum + m.value, 0) / totalMetrics \n      : 0;\n\n    const averageMemoryUsage = mathematicalMetrics\n      .filter(m => m.mathematicalContext.memoryFootprint !== undefined)\n      .reduce((sum, m, _, arr) => sum + (m.mathematicalContext.memoryFootprint! / arr.length), 0);\n\n    // Calculate performance score (0-100)\n    const performanceScore = this.calculatePerformanceScore(mathematicalMetrics);\n\n    // Generate recommendations\n    const recommendations = this.generateRecommendations(mathematicalMetrics);\n\n    return {\n      summary: {\n        totalMetrics,\n        averageComputationTime,\n        averageMemoryUsage,\n        performanceScore\n      },\n      trends: {\n        computationTrend: this.analyzeTrend(mathematicalMetrics, 'computation'),\n        memoryTrend: this.analyzeTrend(mathematicalMetrics, 'memory'),\n        renderingTrend: this.analyzeTrend(mathematicalMetrics, 'rendering')\n      },\n      recommendations,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  private calculatePerformanceScore(metrics: MathematicalMetric[]): number {\n    if (metrics.length === 0) return 100;\n\n    let score = 100;\n    let penaltyCount = 0;\n\n    metrics.forEach(metric => {\n      const operation = metric.mathematicalContext.operation;\n      const threshold = this.getThresholdForOperation(operation, 'production');\n      \n      if (threshold) {\n        // Penalize based on how much over threshold\n        if (metric.value > threshold.maxExecutionTime) {\n          const overage = (metric.value - threshold.maxExecutionTime) / threshold.maxExecutionTime;\n          score -= Math.min(overage * 10, 20); // Max 20 points penalty per violation\n          penaltyCount++;\n        }\n\n        if (metric.mathematicalContext.memoryFootprint && \n            metric.mathematicalContext.memoryFootprint > threshold.maxMemoryIncrease) {\n          const overage = (metric.mathematicalContext.memoryFootprint - threshold.maxMemoryIncrease) / threshold.maxMemoryIncrease;\n          score -= Math.min(overage * 5, 10); // Max 10 points penalty per violation\n          penaltyCount++;\n        }\n      }\n    });\n\n    // Apply diminishing returns for multiple violations\n    if (penaltyCount > 5) {\n      score -= (penaltyCount - 5) * 2;\n    }\n\n    return Math.max(0, Math.min(100, score));\n  }\n\n  private analyzeTrend(metrics: MathematicalMetric[], type: string): 'improving' | 'stable' | 'degrading' {\n    if (metrics.length < 10) return 'stable';\n\n    const recent = metrics.slice(-5);\n    const previous = metrics.slice(-10, -5);\n\n    const recentAvg = recent.reduce((sum, m) => sum + m.value, 0) / recent.length;\n    const previousAvg = previous.reduce((sum, m) => sum + m.value, 0) / previous.length;\n\n    const change = (recentAvg - previousAvg) / previousAvg;\n\n    if (change > 0.1) return 'degrading';\n    if (change < -0.1) return 'improving';\n    return 'stable';\n  }\n\n  private generateRecommendations(metrics: MathematicalMetric[]): Recommendation[] {\n    const recommendations: Recommendation[] = [];\n\n    // Analyze slow operations\n    const slowOperations = metrics.filter(m => {\n      const threshold = this.getThresholdForOperation(m.mathematicalContext.operation, 'production');\n      return threshold && m.value > threshold.maxExecutionTime;\n    });\n\n    if (slowOperations.length > 0) {\n      const operationCounts = slowOperations.reduce((acc, m) => {\n        acc[m.mathematicalContext.operation] = (acc[m.mathematicalContext.operation] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n\n      Object.entries(operationCounts).forEach(([operation, count]) => {\n        recommendations.push({\n          type: 'optimization',\n          priority: count > 5 ? 'high' : 'medium',\n          message: `${operation} has ${count} slow executions`,\n          action: `Consider optimizing ${operation} algorithm or adding caching`,\n          metadata: { operation, slowCount: count }\n        });\n      });\n    }\n\n    // Analyze memory usage\n    const highMemoryOperations = metrics.filter(m => {\n      const threshold = this.getThresholdForOperation(m.mathematicalContext.operation, 'production');\n      return threshold && m.mathematicalContext.memoryFootprint && \n             m.mathematicalContext.memoryFootprint > threshold.maxMemoryIncrease;\n    });\n\n    if (highMemoryOperations.length > 0) {\n      recommendations.push({\n        type: 'optimization',\n        priority: 'medium',\n        message: `${highMemoryOperations.length} operations exceeded memory thresholds`,\n        action: 'Review memory allocation patterns and implement cleanup strategies',\n        metadata: { highMemoryCount: highMemoryOperations.length }\n      });\n    }\n\n    return recommendations;\n  }\n\n  private getThresholdForOperation(operation: string, environment: string): MathematicalPerformanceThreshold | undefined {\n    const key = `${operation}_${environment}`;\n    const thresholds = this.thresholds.get(key);\n    return thresholds ? thresholds[0] : undefined;\n  }\n\n  private getMemoryUsage(): { heapUsed: number; heapTotal: number; external: number; rss: number } {\n    if (typeof process !== 'undefined' && process.memoryUsage) {\n      return process.memoryUsage();\n    }\n    \n    // Browser fallback\n    const performance = globalThis.performance as any;\n    if (performance?.memory) {\n      return {\n        heapUsed: performance.memory.usedJSHeapSize || 0,\n        heapTotal: performance.memory.totalJSHeapSize || 0,\n        external: 0,\n        rss: 0\n      };\n    }\n\n    return { heapUsed: 0, heapTotal: 0, external: 0, rss: 0 };\n  }\n\n  /**\n   * Enable or disable mathematical performance monitoring\n   */\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  /**\n   * Get current enablement status\n   */\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  /**\n   * Clear all baselines and metrics\n   */\n  reset(): void {\n    this.baselines.clear();\n    this.metricsCollector.clearMetrics();\n  }\n\n  /**\n   * Export performance data for analysis\n   */\n  exportData(): {\n    baselines: Record<string, RegressionAnalysis['baseline']>;\n    thresholds: Record<string, MathematicalPerformanceThreshold[]>;\n    metrics: MathematicalMetric[];\n  } {\n    return {\n      baselines: Object.fromEntries(this.baselines),\n      thresholds: Object.fromEntries(this.thresholds),\n      metrics: this.metricsCollector.getMetrics('computation') as MathematicalMetric[]\n    };\n  }\n}\n\n// Export singleton instance\nexport const mathematicalPerformanceMonitor = MathematicalPerformanceMonitor.getInstance();"],"names":["MathematicalPerformanceMonitor","mathematicalPerformanceMonitor","thresholds","Map","baselines","enabled","metricsCollector","PerformanceMetricsCollector","getInstance","initializeDefaultThresholds","instance","defaultThresholds","operation","environment","maxExecutionTime","maxMemoryIncrease","minAccuracy","severity","forEach","threshold","key","existing","get","set","monitorMathematicalOperation","fn","options","startTime","performance","now","startMemory","trackMemory","getMemoryUsage","undefined","result","error","e","endTime","executionTime","endMemory","memoryIncrease","heapUsed","accuracy","validateResult","validationError","console","warn","metric","id","Date","Math","random","toString","substr","timestamp","category","value","unit","mathematicalContext","algorithm","inputSize","complexity","memoryFootprint","metadata","message","expectedTime","expectedTimeMs","maxAllowedTime","maxAllowedTimeMs","collectMetric","checkMathematicalThresholds","updateBaselines","monitorSyncMathematicalOperation","actual","mean","standardDeviation","sampleSize","newSampleSize","newMean","variance","newStandardDeviation","sqrt","detectRegression","currentTime","baseline","zScore","isRegression","percentageChange","current","analysis","confidenceLevel","statisticalSignificance","abs","generateMathematicalReport","timeRange","metrics","getMetrics","mathematicalMetrics","filter","m","totalMetrics","length","averageComputationTime","reduce","sum","averageMemoryUsage","_","arr","performanceScore","calculatePerformanceScore","recommendations","generateRecommendations","summary","trends","computationTrend","analyzeTrend","memoryTrend","renderingTrend","toISOString","score","penaltyCount","getThresholdForOperation","overage","min","max","type","recent","slice","previous","recentAvg","previousAvg","change","slowOperations","operationCounts","acc","Object","entries","count","push","priority","action","slowCount","highMemoryOperations","highMemoryCount","process","memoryUsage","globalThis","memory","usedJSHeapSize","heapTotal","totalJSHeapSize","external","rss","setEnabled","isEnabled","reset","clear","clearMetrics","exportData","fromEntries"],"mappings":"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"}