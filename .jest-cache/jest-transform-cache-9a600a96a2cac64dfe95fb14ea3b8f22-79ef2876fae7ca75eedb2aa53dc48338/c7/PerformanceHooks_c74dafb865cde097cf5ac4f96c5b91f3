15f331c10642f5283332d2d68d037c61
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useMemoryTracking: function() {
        return useMemoryTracking;
    },
    usePerformanceMetrics: function() {
        return usePerformanceMetrics;
    },
    usePerformanceMonitor: function() {
        return usePerformanceMonitor;
    },
    usePerformanceOptimization: function() {
        return usePerformanceOptimization;
    },
    usePerformanceToggle: function() {
        return usePerformanceToggle;
    },
    useWASMPerformance: function() {
        return useWASMPerformance;
    }
});
const _react = require("react");
const _PerformanceMetrics = require("./PerformanceMetrics");
const usePerformanceMonitor = (componentId, category)=>{
    const startTimer = (0, _react.useCallback)(()=>{
        return _PerformanceMetrics.performanceMetrics.startTimer(componentId, category);
    }, [
        componentId,
        category
    ]);
    return {
        startTimer
    };
};
const usePerformanceMetrics = (category, timeRange, updateInterval = 1000)=>{
    const [metrics, setMetrics] = (0, _react.useState)([]);
    const [summary, setSummary] = (0, _react.useState)(_PerformanceMetrics.performanceMetrics.getMetricsSummary());
    const intervalRef = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        const updateMetrics = ()=>{
            const newMetrics = _PerformanceMetrics.performanceMetrics.getMetrics(category, timeRange);
            const newSummary = _PerformanceMetrics.performanceMetrics.getMetricsSummary();
            setMetrics(newMetrics);
            setSummary(newSummary);
        };
        // Initial update
        updateMetrics();
        // Set up interval for updates
        if (updateInterval > 0) {
            intervalRef.current = setInterval(updateMetrics, updateInterval);
        }
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [
        category,
        timeRange,
        updateInterval
    ]);
    return {
        metrics,
        summary
    };
};
const usePerformanceToggle = ()=>{
    const [isEnabled, setIsEnabled] = (0, _react.useState)(process.env.NODE_ENV === 'development');
    (0, _react.useEffect)(()=>{
        if (isEnabled) {
            _PerformanceMetrics.performanceMetrics.enable();
        } else {
            _PerformanceMetrics.performanceMetrics.disable();
        }
    }, [
        isEnabled
    ]);
    const toggle = (0, _react.useCallback)(()=>{
        setIsEnabled((prev)=>!prev);
    }, []);
    return {
        isEnabled,
        toggle
    };
};
const useMemoryTracking = (componentId, trackInterval = 5000)=>{
    const intervalRef = (0, _react.useRef)();
    (0, _react.useEffect)(()=>{
        const trackMemory = ()=>{
            _PerformanceMetrics.performanceMetrics.trackMemoryUsage(componentId);
        };
        // Initial tracking
        trackMemory();
        // Set up interval for memory tracking
        if (trackInterval > 0) {
            intervalRef.current = setInterval(trackMemory, trackInterval);
        }
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [
        componentId,
        trackInterval
    ]);
    return {
        trackMemory: ()=>_PerformanceMetrics.performanceMetrics.trackMemoryUsage(componentId)
    };
};
const usePerformanceOptimization = (componentId)=>{
    const [optimizationSuggestions, setOptimizationSuggestions] = (0, _react.useState)([]);
    (0, _react.useEffect)(()=>{
        const analyzePerformance = ()=>{
            const componentMetrics = _PerformanceMetrics.performanceMetrics.getMetricsByComponent(componentId);
            const suggestions = [];
            if (componentMetrics.length === 0) return;
            // Analyze computation performance
            const computationMetrics = componentMetrics.filter((m)=>m.category === 'computation');
            if (computationMetrics.length > 0) {
                const avgTime = computationMetrics.reduce((sum, m)=>sum + m.value, 0) / computationMetrics.length;
                const maxTime = Math.max(...computationMetrics.map((m)=>m.value));
                if (avgTime > 100) {
                    suggestions.push('Consider implementing computation caching for repeated operations');
                }
                if (maxTime > 500) {
                    suggestions.push('Some operations are taking >500ms - investigate optimization opportunities');
                }
            }
            // Analyze memory usage
            const memoryMetrics = componentMetrics.filter((m)=>m.category === 'memory');
            if (memoryMetrics.length > 0) {
                const latestMemory = memoryMetrics[memoryMetrics.length - 1];
                if (latestMemory.value > 50 * 1024 * 1024) {
                    suggestions.push('Memory usage is high - consider implementing cleanup strategies');
                }
            }
            setOptimizationSuggestions(suggestions);
        };
        // Analyze every 10 seconds
        const interval = setInterval(analyzePerformance, 10000);
        analyzePerformance(); // Initial analysis
        return ()=>clearInterval(interval);
    }, [
        componentId
    ]);
    return {
        optimizationSuggestions
    };
};
const useWASMPerformance = (operationName, componentId = 'wasm')=>{
    const [operationMetrics, setOperationMetrics] = (0, _react.useState)([]);
    const [averageTime, setAverageTime] = (0, _react.useState)(0);
    (0, _react.useEffect)(()=>{
        const updateMetrics = ()=>{
            const metrics = _PerformanceMetrics.performanceMetrics.getMetricsByComponent(componentId);
            const operationMetrics = metrics.filter((m)=>m.id.includes(operationName));
            setOperationMetrics(operationMetrics);
            if (operationMetrics.length > 0) {
                const avgTime = operationMetrics.reduce((sum, m)=>sum + m.value, 0) / operationMetrics.length;
                setAverageTime(avgTime);
            }
        };
        // Update every second
        const interval = setInterval(updateMetrics, 1000);
        updateMetrics(); // Initial update
        return ()=>clearInterval(interval);
    }, [
        operationName,
        componentId
    ]);
    const wrapWASMFunction = (0, _react.useCallback)((fn)=>{
        return _PerformanceMetrics.performanceMetrics.withPerformanceMonitoring(fn, operationName, componentId);
    }, [
        operationName,
        componentId
    ]);
    return {
        operationMetrics,
        averageTime,
        wrapWASMFunction
    };
};

//# sourceMappingURL=data:application/json;base64,