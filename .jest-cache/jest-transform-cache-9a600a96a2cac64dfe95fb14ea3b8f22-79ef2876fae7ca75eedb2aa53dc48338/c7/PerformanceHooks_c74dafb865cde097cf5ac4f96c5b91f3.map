{"version":3,"sources":["/home/stephen-dorman/dev/zktheory/src/lib/performance/PerformanceHooks.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { performanceMetrics } from './PerformanceMetrics';\nimport { PerformanceMetric } from './types';\n\nexport const usePerformanceMonitor = (componentId: string, category: string) => {\n  const startTimer = useCallback(() => {\n    return performanceMetrics.startTimer(componentId, category);\n  }, [componentId, category]);\n\n  return { startTimer };\n};\n\nexport const usePerformanceMetrics = (\n  category?: string,\n  timeRange?: { start: number; end: number },\n  updateInterval: number = 1000\n) => {\n  const [metrics, setMetrics] = useState<PerformanceMetric[]>([]);\n  const [summary, setSummary] = useState(performanceMetrics.getMetricsSummary());\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const updateMetrics = () => {\n      const newMetrics = performanceMetrics.getMetrics(category, timeRange);\n      const newSummary = performanceMetrics.getMetricsSummary();\n      setMetrics(newMetrics);\n      setSummary(newSummary);\n    };\n\n    // Initial update\n    updateMetrics();\n\n    // Set up interval for updates\n    if (updateInterval > 0) {\n      intervalRef.current = setInterval(updateMetrics, updateInterval);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [category, timeRange, updateInterval]);\n\n  return { metrics, summary };\n};\n\nexport const usePerformanceToggle = () => {\n  const [isEnabled, setIsEnabled] = useState(\n    process.env.NODE_ENV === 'development'\n  );\n\n  useEffect(() => {\n    if (isEnabled) {\n      performanceMetrics.enable();\n    } else {\n      performanceMetrics.disable();\n    }\n  }, [isEnabled]);\n\n  const toggle = useCallback(() => {\n    setIsEnabled(prev => !prev);\n  }, []);\n\n  return { isEnabled, toggle };\n};\n\nexport const useMemoryTracking = (componentId: string, trackInterval: number = 5000) => {\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const trackMemory = () => {\n      performanceMetrics.trackMemoryUsage(componentId);\n    };\n\n    // Initial tracking\n    trackMemory();\n\n    // Set up interval for memory tracking\n    if (trackInterval > 0) {\n      intervalRef.current = setInterval(trackMemory, trackInterval);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [componentId, trackInterval]);\n\n  return { trackMemory: () => performanceMetrics.trackMemoryUsage(componentId) };\n};\n\nexport const usePerformanceOptimization = (componentId: string) => {\n  const [optimizationSuggestions, setOptimizationSuggestions] = useState<string[]>([]);\n\n  useEffect(() => {\n    const analyzePerformance = () => {\n      const componentMetrics = performanceMetrics.getMetricsByComponent(componentId);\n      const suggestions: string[] = [];\n\n      if (componentMetrics.length === 0) return;\n\n      // Analyze computation performance\n      const computationMetrics = componentMetrics.filter(m => m.category === 'computation');\n      if (computationMetrics.length > 0) {\n        const avgTime = computationMetrics.reduce((sum, m) => sum + m.value, 0) / computationMetrics.length;\n        const maxTime = Math.max(...computationMetrics.map(m => m.value));\n        \n        if (avgTime > 100) {\n          suggestions.push('Consider implementing computation caching for repeated operations');\n        }\n        if (maxTime > 500) {\n          suggestions.push('Some operations are taking >500ms - investigate optimization opportunities');\n        }\n      }\n\n      // Analyze memory usage\n      const memoryMetrics = componentMetrics.filter(m => m.category === 'memory');\n      if (memoryMetrics.length > 0) {\n        const latestMemory = memoryMetrics[memoryMetrics.length - 1];\n        if (latestMemory.value > 50 * 1024 * 1024) { // 50MB\n          suggestions.push('Memory usage is high - consider implementing cleanup strategies');\n        }\n      }\n\n      setOptimizationSuggestions(suggestions);\n    };\n\n    // Analyze every 10 seconds\n    const interval = setInterval(analyzePerformance, 10000);\n    analyzePerformance(); // Initial analysis\n\n    return () => clearInterval(interval);\n  }, [componentId]);\n\n  return { optimizationSuggestions };\n};\n\nexport const useWASMPerformance = (operationName: string, componentId: string = 'wasm') => {\n  const [operationMetrics, setOperationMetrics] = useState<PerformanceMetric[]>([]);\n  const [averageTime, setAverageTime] = useState<number>(0);\n\n  useEffect(() => {\n    const updateMetrics = () => {\n      const metrics = performanceMetrics.getMetricsByComponent(componentId);\n      const operationMetrics = metrics.filter(m => m.id.includes(operationName));\n      \n      setOperationMetrics(operationMetrics);\n      \n      if (operationMetrics.length > 0) {\n        const avgTime = operationMetrics.reduce((sum, m) => sum + m.value, 0) / operationMetrics.length;\n        setAverageTime(avgTime);\n      }\n    };\n\n    // Update every second\n    const interval = setInterval(updateMetrics, 1000);\n    updateMetrics(); // Initial update\n\n    return () => clearInterval(interval);\n  }, [operationName, componentId]);\n\n  const wrapWASMFunction = useCallback(<T extends any[], R>(\n    fn: (...args: T) => R\n  ): ((...args: T) => R) => {\n    return performanceMetrics.withPerformanceMonitoring(fn, operationName, componentId);\n  }, [operationName, componentId]);\n\n  return {\n    operationMetrics,\n    averageTime,\n    wrapWASMFunction\n  };\n};\n"],"names":["useMemoryTracking","usePerformanceMetrics","usePerformanceMonitor","usePerformanceOptimization","usePerformanceToggle","useWASMPerformance","componentId","category","startTimer","useCallback","performanceMetrics","timeRange","updateInterval","metrics","setMetrics","useState","summary","setSummary","getMetricsSummary","intervalRef","useRef","useEffect","updateMetrics","newMetrics","getMetrics","newSummary","current","setInterval","clearInterval","isEnabled","setIsEnabled","process","env","NODE_ENV","enable","disable","toggle","prev","trackInterval","trackMemory","trackMemoryUsage","optimizationSuggestions","setOptimizationSuggestions","analyzePerformance","componentMetrics","getMetricsByComponent","suggestions","length","computationMetrics","filter","m","avgTime","reduce","sum","value","maxTime","Math","max","map","push","memoryMetrics","latestMemory","interval","operationName","operationMetrics","setOperationMetrics","averageTime","setAverageTime","id","includes","wrapWASMFunction","fn","withPerformanceMonitoring"],"mappings":"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"}